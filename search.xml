<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面向对象六大原则</title>
    <url>/2022/08/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h1 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h1><table>
<thead>
<tr>
<th>设计原则</th>
<th>概述</th>
<th>目的</th>
</tr>
</thead>
<tbody><tr>
<td>开闭原则</td>
<td>对扩展开放，对修改关闭</td>
<td>易于维护</td>
</tr>
<tr>
<td>单一职责</td>
<td>一个类只干一件事，实现类要单一</td>
<td>提升可读性</td>
</tr>
<tr>
<td>里氏替换</td>
<td>不要重写父类的方法</td>
<td>健壮性、防止错误继承</td>
</tr>
<tr>
<td>迪米特法则</td>
<td>最少知道，对象之间少建立联系</td>
<td>低耦合</td>
</tr>
<tr>
<td>接口隔离</td>
<td>一个接口只干一件事，接口要精简单一</td>
<td>高内聚</td>
</tr>
<tr>
<td>依赖倒置</td>
<td>高层不应该依赖低层，要面向接口编程</td>
<td>利于结构升级</td>
</tr>
</tbody></table>
<h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><blockquote>
<p><em>Software entities like classes,modules and functions should be open for extension but closed for modifications.</em></p>
<p><em>一个软件实体如类，模块和函数应该对扩展开放，对修改关闭</em></p>
</blockquote>
<p>随着业务发展需要增加新的方法，有几种方式：</p>
<ul>
<li><strong>在接口上添加新方法</strong><ul>
<li>导致每一个实现类都需要进行实现，改动量大</li>
<li>不一定所有的实现类都需要该方法</li>
</ul>
</li>
<li><strong>修改实现类旧方法</strong><ul>
<li>替代原有旧方法功能，如果同时需要使用旧方法则无法采用此方式 （<code>getPrice()</code> 获取的是原价格还是打折后价格？如果需要同时获取原价和打折后价格如何处理）</li>
</ul>
</li>
<li><strong>面向扩展，使用新接口或者新类继承父类</strong><ul>
<li>新接口方法接口，需要的类进行实现</li>
<li>新类继承父类，在父类基础上增加方法</li>
</ul>
</li>
</ul>
<p><strong>明显面向扩展更容易维护，这就是开闭原则的目的</strong></p>
<h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><blockquote>
<p><em>There should never be more than one reason for a class to change. —— Robert C. Martin</em></p>
<p><em>一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</em></p>
</blockquote>
<p>控制业务实现的粒度问题；一个类可以具备任意数量的方法，但都属于同一个功能簇中</p>
<p><strong>严格控制类中方法的粒度，必要时进行分析与拆分</strong></p>
<h2 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h2><blockquote>
<p><em>Inheritance should ensure that any property proved about supertype objects also holds for subtype objects. —— Liskov</em></p>
<p><em>继承必须确保父类所拥有的性质在子类中仍然成立</em></p>
</blockquote>
<p>在里氏替换原则的指导方针下，可得出：仅仅依据两个类之间有没有 “is a” 的关系，来判断两个类能不能发生继承关系是不够的</p>
<p>应该遵守一个大原则：<strong>任何使用父类的地方，都能被透明的替换成子类，且替换成子类后，程序行为不会发生问题</strong></p>
<p>不应该滥用继承关系，鸵鸟是否是鸟的子类（不会飞），鲸鱼是否是鱼的子类（没有腮），继承具有侵入性，当需要使用继承关系时需要辨明是否是真正的继承，<strong>父类的每个方法都必须适用于子类</strong></p>
<ol>
<li>子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法</li>
<li>子类可以增加自己特有的方法</li>
<li>子类重载父类方法时，方法的形参要比父类方法更为宽松</li>
<li>子类实现父类抽象方法时，方法的返回值要比父类方法更为严格</li>
</ol>
<h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote>
<p><em>talk only to your immediate friends. —— Ian Holland</em></p>
<p><em>只和直接的朋友交流</em></p>
</blockquote>
<p>迪米特法则也称为最少知道原则，最少知道包含两个目的：</p>
<ul>
<li><strong>只和直接的朋友交互</strong><ul>
<li>例如 MVC 架构，视图层和业务层交互，业务层和持久层交互，视图层不应该和持久层产生联系</li>
</ul>
</li>
<li><strong>较少对朋友的了解</strong><ul>
<li>类门面模式（门面指暴露重要工作的简单入口，而迪米特法则在于只暴露该暴露的入口，还是有所区别）思想，对外只暴露能够满足外部需要的内容</li>
</ul>
</li>
</ul>
<p><strong>目的在于降低类之间的耦合关系</strong></p>
<h2 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h2><blockquote>
<p><em>Interface Segregation Principle, ISP</em></p>
<p><em>低耦合、高内聚中的高内聚</em></p>
</blockquote>
<p>接口隔离原则中所说的接口并不是狭意的指 Java 中的 Interface，而是一切的提供方法定义的对象，例如 Java 中的接口、抽象类、实体类</p>
<p>接口隔离的原则：</p>
<ul>
<li>客户端不依赖不需要的接口</li>
<li>类间依赖关系建立在最小的接口上</li>
<li>接口应该细化，不应该具备臃肿的方法</li>
</ul>
<p>例如发送方式的实现类 <code>Send</code>，此时具备两种发送方式：邮件和短信，如果将方法都放在 <code>Send</code> 类中，则应该分别定义 <code>sendEmail()</code> 和 <code>sendNotice()</code> 两个方法，不利于后面的拓展；好的解决方法应该是定义接口，然后分别创建 <code>EmailSend</code> 和 <code>NoticeSend</code> 两个实现类，这就是接口隔离的目的</p>
<p>接口隔离和单一原则看似冲突，目标是达到二者的平衡</p>
<p><strong>避免接口污染</strong></p>
<h2 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h2><blockquote>
<p><em>Dependence Inversion Principle,DIP</em></p>
<p><em>不依赖于具体实现，而依赖于抽象</em></p>
</blockquote>
<p>不正确的依赖关系是上层调用下层，上层依赖下层</p>
<p>面向对象其实就是依赖倒置的一种体现，依赖倒置让下层依赖上层，比如接口，接口方法的扩展会影响所有实现类，但抽象层的变动远远少于实现层，所以依赖倒置可以很好地避免频繁的修改</p>
<p><strong>面向接口编程</strong></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="如何满足里氏替换原则"><a href="#如何满足里氏替换原则" class="headerlink" title="如何满足里氏替换原则"></a>如何满足里氏替换原则</h2><p>里氏替换的原则指：需要使用父类的地方可以替换为子类使用，因为父类的方法在子类上应该保持一致</p>
<p>在实际中遇到直接继承不能满足里氏替换的场景，就<strong>说明抽象不足，需要向上抽象</strong></p>
<p>如果一个 <code>Add</code> 类的 <code>compute(int n)</code> 操作为加法，减法也想要进行实现，则继承 <code>Add</code> 类后重写了 <code>compute(int n)</code> 方法，此时则违反了里氏替换原则，整个方法的实现被重写了</p>
<p>向上抽象出 <code>Compute</code> 接口，即可以实现里氏替换原则</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Add</span> <span class="keyword">implements</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subtract</span> <span class="keyword">implements</span> <span class="title class_">Compute</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compute</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;减法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://refactoringguru.cn/design-patterns">常用设计模式有哪些？ (refactoringguru.cn)</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>规范</tag>
      </tags>
  </entry>
</search>
