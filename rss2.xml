<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>贫瘠之地</title>
    <link>https://www.kugaaa.com/</link>
    
    <atom:link href="https://www.kugaaa.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>欢迎来到知识的荒漠</description>
    <pubDate>Thu, 06 Mar 2025 16:00:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Follow verify</title>
      <link>https://www.kugaaa.com/%E4%B8%B4%E6%97%B6/Follow%20verify.html</link>
      <guid>https://www.kugaaa.com/%E4%B8%B4%E6%97%B6/Follow%20verify.html</guid>
      <pubDate>Thu, 06 Mar 2025 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;This message is used to verify that this feed
(feedId:120499742879192064) belongs to me (userId:66699651383480320).
Join me in enjoying</description>
        
      
      
      
      <content:encoded><![CDATA[<p>This message is used to verify that this feed(feedId:120499742879192064) belongs to me (userId:66699651383480320).Join me in enjoying the next generation information browserhttps://follow.is.</p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E4%B8%B4%E6%97%B6/">临时</category>
      
      
      
      <comments>https://www.kugaaa.com/%E4%B8%B4%E6%97%B6/Follow%20verify.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBoot2 升级 Starter 影响</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/SpringBoot2%20%E5%8D%87%E7%BA%A7%20Starter%20%E5%BD%B1%E5%93%8D.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/SpringBoot2%20%E5%8D%87%E7%BA%A7%20Starter%20%E5%BD%B1%E5%93%8D.html</guid>
      <pubDate>Wed, 05 Mar 2025 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;升级 SpringBoot2，对于 starter 是否有不兼容的地方&lt;/p&gt;
&lt;h1 id=&quot;升级指南&quot;&gt;升级指南&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide&quot;&gt;Spring
Boot 2.0 Migration Guide · spring-projects/spring-boot Wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;官方给出的迁移指南，这里选取一些常见的、可能存在影响的改动点陈列&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="背景">背景</h1><p>升级 SpringBoot2，对于 starter 是否有不兼容的地方</p><h1 id="升级指南">升级指南</h1><p><ahref="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide">SpringBoot 2.0 Migration Guide · spring-projects/spring-boot Wiki</a></p><p>官方给出的迁移指南，这里选取一些常见的、可能存在影响的改动点陈列</p><h2 id="依赖版本">依赖版本</h2><p>SpringBoot2 的依赖表 <ahref="https://docs.spring.io/spring-boot/docs/2.0.x/reference/html/appendix-dependency-versions.html">AppendixF. Dependency versions</a></p><p>其中 Spring 框架的版本升级到了 5.x，所以对于 Java 6 和 7不再支持了</p><p>Maven 插件相关的命名和 Surefire 使用方式</p><p>以下库的最低支持版本已经更改</p><ul><li>Elasticsearch 5.6</li><li>Gradle 4</li><li>Hibernate 5.2</li><li>Jetty 9.4</li><li>Spring Framework 5</li><li>Spring Security 5</li><li>Tomcat 8.5</li></ul><h2 id="特性">特性</h2><h3 id="动态代理">动态代理</h3><p>默认使用 CGLIB 实现，如果需要使用 JDK 基于接口的动态代理实现</p><p>设置配置 <code>spring.aop.proxy-target-class</code> 为<code>false</code></p><h3 id="事件">事件</h3><p>新增了事件</p><p><code>ApplicationStartedEvent</code>在上下文刷新后，但在调用任何应用程序和命令行运行器之前</p><p><code>ApplicationReadyEvent</code>在任何应用程序和命令行运行器被调用后</p><p><strong>ApplicationRunner 和 CommandLineRunner</strong></p><p>当需要执行特殊逻辑在 Application 启动（started）后，可以实现<code>ApplicationRunner</code> 或 <code>CommandLineRunner</code>接口，提供的 <code>run</code> 方法会在<code>SpringApplication.run(…)</code> 完成之前被调用</p><p>非常适合在应用程序启动后但在开始接收流量之前运行的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCommandLineRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> &#123;</span><br><span class="line"><span class="comment">// Do something...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部配置">外部配置</h2><h3 id="绑定收紧">绑定收紧</h3><p>有关宽松绑定的规则变得更加严格，假设有一个<code>acme.my-project.my-name</code> 属性</p><ol type="1"><li>前缀必须是烤串命名；<code>acme.myProject</code> 或<code>acme.my_project</code> 是无效的</li><li>属性名可以使用烤串、驼峰或者蛇形命名</li><li>环境属性必须使用常规的大写下划线格式；例如<code>ACME_MYPROJECT_MYNAME</code></li></ol><p>概括起来是 prefix 严格，属性宽松</p><h3 id="configurationproperties-校验"><strong><span class="citation"data-cites="ConfigurationProperties">@ConfigurationProperties</span>校验</strong></h3><p>如果要打开校验，需要在 <code>@ConfigurationProperties</code>对象上添加注解 <code>@Validated</code></p><h2 id="web-应用">Web 应用</h2><h3 id="jackson">Jackson</h3><p>修改了 Jackson 配置默认值，将 JSR-310 日期写成 ISO-8601 字符串</p><p>设置<code>pring.jackson.serialization.write-dates-as-timestamps</code> 为<code>true</code> 可以使用旧配置</p><p><code>spring-boot-starter-json</code> 这个新的 starter 整合了读写JSON 的必要部分，提供了 Jackson使用的相关模块依赖，如果之前手动依赖这些模块，现在可以改为依赖这个新的starter</p><h3 id="spring-mvc-路径匹配"><strong>Spring M</strong>VC 路径匹配</h3><p>禁用了后缀匹配</p><p><code>GET /projects/spring-boot.json</code> 不会匹配到<code>@GetMapping("/projects/spring-boot")</code></p><h2 id="测试">测试</h2><h3 id="mockito-1.x"><strong>Mockito 1.x</strong></h3><p>Mockito 1.x 不再支持 <code>@MockBean</code> 和 <code>@SpyBean</code>了</p><p>如果没有使用 <code>spring-boot-starter-test</code>管理依赖，需要升级到 Mockito 2.x</p><h3 id="environmenttestutils"><strong>EnvironmentTestUtils</strong></h3><p><code>EnvironmentTestUtils</code> 弃用了，使用<code>TestPropertyValues</code> 提供更强大的能力</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TestPropertyValues.of(<span class="string">&quot;acme.first=1&quot;</span>, <span class="string">&quot;acme.second=2&quot;</span>)</span><br><span class="line">        .and(<span class="string">&quot;acme.third=3&quot;</span>)</span><br><span class="line">        .applyTo(<span class="built_in">this</span>.environment);</span><br></pre></td></tr></table></figure><h2 id="自定义-auto-configuration">自定义<strong>Auto-configuration</strong></h2><h3 id="conditionalonbean-语意变更"><span class="citation"data-cites="ConditionalOnBean">@ConditionalOnBean</span> 语意变更</h3><p><code>@ConditionalOnBean</code> 不再表达候选 bean <code>或</code>的含义，而是 <code>与</code> 的含义，即多个条件满足才生效</p><p>如果需要保持存在任何目标 bean 的条件，可以考虑使用如以下示例所示的<code>AnyNestedCondition</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThisOrThatCondition</span> <span class="keyword">extends</span> <span class="title class_">AnyNestedCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">ThisOrThatCondition() &#123;</span><br><span class="line"><span class="built_in">super</span>(ConfigurationPhase.REGISTER_BEAN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnBean(This.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThisCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnBean(That.class)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ThatCondition</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文档">文档</h1><p>从升级指南来看，涉及 starter 调整的只有<code>@ConditionalOnBean</code>语意变化一点，所以还是回归开发文档，看下相关章节</p><p><ahref="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.developing-auto-configuration">CoreFeatures</a></p><h2 id="理解自动装配-bean">理解自动装配 bean</h2><p>实现自动配置的类使用 <code>@AutoConfiguration</code> （SpringBoot2才有）进行注解，这个注解本身又被 <code>@Configuration</code>进行元注解，使得自动配置成为标准的 <code>@Configuration</code>类；额外的 <code>@Conditional</code> 注解用于约束自动配置何时应用</p><p>可以参考 <ahref="https://github.com/spring-projects/spring-boot/blob/v2.7.18/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports">spring-boot/spring-boot-project/spring-boot-autoconfigure/src/main/resources/META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.importsat v2.7.18 · spring-projects/spring-boot</a></p><h2 id="定位自动装配候选">定位自动装配候选</h2><p>SpringBoot 会检查已发布的 jar 包中是否存在一个名为<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>的文件</p><p>该文件应当列出你的配置类，每行一个类名，如下例所示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com<span class="selector-class">.mycorp</span><span class="selector-class">.libx</span><span class="selector-class">.autoconfigure</span><span class="selector-class">.LibXAutoConfiguration</span></span><br><span class="line">com<span class="selector-class">.mycorp</span><span class="selector-class">.libx</span><span class="selector-class">.autoconfigure</span>.LibXWebAutoConfiguration</span><br></pre></td></tr></table></figure><p>如果自动装配类需要特定顺序应用，可以使用<code>@AutoConfiguration</code>注解的<code>before</code>, <code>beforeName</code>, <code>after</code> and <code>afterName</code>属性，或者专有的 <code>@AutoConfigureBefore</code> 和<code>@AutoConfigureAfter</code> 注解；举个例子，如果希望提供 Web特殊的装配，那么这个类可能需要在 <code>WebMvcAutoConfiguration</code>之后被应用（applied）</p><p>如果想要对某些不相互直接了解的自动配置进行排序，也可以使用<code>@AutoConfigureOrder</code>；该注解与常规的<code>@Order</code>注解具有相同的语义，但为自动配置类提供了专用的排序</p><p>和标准的 <code>@Configuration</code> 类一样，顺序只影响 beans之间的应用，不影响其创建的顺序；创建的顺序由每个 bean 的依赖关系和任何<code>@DependsOn</code> 关系决定</p><h2 id="条件注解">条件注解</h2><p>对自动装配生效的规则控制</p><ul><li><strong>Class Conditions</strong>：ASM 解析运行中的类<ul><li><span class="citation"data-cites="ConditionalOnClass">@ConditionalOnClass</span>：存在类</li><li><span class="citation"data-cites="ConditionalOnMissingClass">@ConditionalOnMissingClass</span>：不存在类</li></ul></li><li><strong>Bean Conditions</strong>：扫描 beans，可以使用<code>search</code> 参数指定目标层级<ul><li><span class="citation"data-cites="ConditionalOnBean">@ConditionalOnBean</span>：存在 bean</li><li><span class="citation"data-cites="ConditionalOnMissingBean">@ConditionalOnMissingBean</span>：不存在bean</li></ul></li><li><strong>Property Conditions</strong><ul><li><span class="citation"data-cites="ConditionalOnProperty">@ConditionalOnProperty</span>：检查属性；更多规则使用<code>havingValue</code> 和 <code>matchIfMissing</code> 参数</li></ul></li><li><strong>Resource Conditions</strong><ul><li><span class="citation"data-cites="ConditionalOnResource">@ConditionalOnResource</span>：资源可以使用常见的Spring 约定来指定，如以下示例所示<code>file:/home/user/test.dat</code></li></ul></li><li><strong>Web Application Conditions</strong><ul><li><span class="citation"data-cites="ConditionalOnWebApplication">@ConditionalOnWebApplication</span>：Web应用</li><li><span class="citation"data-cites="ConditionalOnNotWebApplication">@ConditionalOnNotWebApplication</span>：非Web 应用</li></ul></li><li><strong>SpEL Expression Conditions</strong><ul><li><span class="citation"data-cites="ConditionalOnExpression">@ConditionalOnExpression</span>：使用SpEL 检查配置</li></ul></li></ul><h2 id="测试自动装配">测试自动装配</h2><p>自动装配会受到很多因素影响，比如配置文件、条件环境（依赖库）等等因素；所以通常来说，每个测试应该创建一个完整定义的<code>ApplicationContext</code>，它代表了这些定制的组合，<code>ApplicationContextRunner</code>提供了一种良好的实现方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ApplicationContextRunner</span> <span class="variable">contextRunner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextRunner</span>()</span><br><span class="line">    .withConfiguration(AutoConfigurations.of(MyServiceAutoConfiguration.class));</span><br></pre></td></tr></table></figure><p>每个测试都可以使用运行器来表示特定的用例。例如，下面的示例调用用户配置（<code>UserConfiguration</code>）并检查自动配置是否正确回退</p><p>调用 <code>run</code> 提供了一个回调上下文，可以与<code>Assert</code> 一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">defaultServiceBacksOff</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.contextRunner.withUserConfiguration(UserConfiguration.class).run((context) -&gt; &#123;</span><br><span class="line">        assertThat(context).hasSingleBean(MyService.class);</span><br><span class="line">        assertThat(context).getBean(<span class="string">&quot;myCustomService&quot;</span>).isSameAs(context.getBean(MyService.class));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UserConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    MyService <span class="title function_">myCustomService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyService</span>(<span class="string">&quot;mine&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 <code>Environment</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">serviceNameCanBeConfigured</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.contextRunner.withPropertyValues(<span class="string">&quot;user.name=test123&quot;</span>).run((context) -&gt; &#123;</span><br><span class="line">        assertThat(context).hasSingleBean(MyService.class);</span><br><span class="line">        assertThat(context.getBean(MyService.class).getName()).isEqualTo(<span class="string">&quot;test123&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>FilteredClassLoader</code> 过滤类路径来测试类相关条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">serviceIsIgnoredIfLibraryIsNotPresent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.contextRunner.withClassLoader(<span class="keyword">new</span> <span class="title class_">FilteredClassLoader</span>(MyService.class))</span><br><span class="line">        .run((context) -&gt; assertThat(context).doesNotHaveBean(<span class="string">&quot;myService&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义自动装配">自定义自动装配</h2><h3 id="命名">命名</h3><p>不要以 <code>spring-boot</code> 开头，因为未来可能被官方收录</p><p>应该以业务名称开头，例如 <code>acme-spring-boot-starter</code></p><h3 id="配置键">配置键</h3><p>不要使用官方的命名空间避免冲突，应该使用业务命名例如<code>acme</code></p><p>确保通过为每个属性添加字段 JavaDoc 来记录配置键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;acme&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AcmeProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Whether to check the location of acme resources.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">checkLocation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Timeout for establishing a connection to the acme server.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Duration</span> <span class="variable">loginTimeout</span> <span class="operator">=</span> Duration.ofSeconds(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些建议</p><ul><li>不要以 The 或 A 开头来写描述</li><li>对于 <code>boolean</code> 类型描述为 “是否” 或者 “启用”</li><li>对于集合类型，以 “逗号分隔列表” 为描述开头</li><li>使用 <code>java.time.Duration</code> 而不是 <code>long</code>类型，并在默认单位与毫秒不同时描述该默认单位，例如“如果未指定持续时间后缀，则将使用秒”</li><li>除非在运行时必须确定默认值，否则不要在描述中提供默认值</li></ul><h3 id="自动装配-module">自动装配 Module</h3><p>SpringBoot使用一个注解处理器在元数据文件（<code>META-INF/spring-autoconfigure-metadata.properties</code>）中收集自动配置上的条件，如果该文件存在，它将用于快速过滤不匹配的自动配置，这将提高启动时间</p><p>使用 Maven 进行构建时，建议在包含自动配置的模块中添加以下依赖项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果直接在项目中定义了自动装配，确保配置了<code>spring-boot-maven-plugin</code> 防止<code>repackage</code>目标将依赖项添加到 fat jar 中（避免把条件中的 class 打入 jar）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="starter-module">Starter Module</h3><ul><li>SpringBoot starter 是一个空jar（不包含业务逻辑），用于提供一组默认依赖</li><li>应该包含所有必要依赖，但避免包含可选依赖；不能预设使用方的依赖情况</li><li>必须直接或间接依赖 <code>spring-boot-starter</code>，以确保SpringBoot 核心功能可用</li><li>通常与自动配置结合使用，提供开箱即用的功能</li></ul><h1 id="源码">源码</h1><p>spring-boot 2.7.x</p><p>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getCandidateConfigurations的 Doc 直接就标明了</p><blockquote><p>返回应被考虑的自动配置类名称。默认情况下，此方法将使用 <code>ImportCandidates</code> 和 <code>getSpringFactoriesLoaderFactoryClass()</code> 加载候选类。为了向后兼容，它还会考虑 <code>SpringFactoriesLoader</code> 和 <code>getSpringFactoriesLoaderFactoryClass()</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line"><span class="comment">// SpringFactoriesLoader @since 3.2</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ImportCandidates @since 2.7.0</span></span><br><span class="line">ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line"></span><br><span class="line"><span class="comment">// assert</span></span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line"><span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">+ <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><ahref="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide">SpringBoot 2.0 Migration Guide · spring-projects/spring-boot Wiki</a></p><p><ahref="https://docs.spring.io/spring-boot/docs/2.7.18/reference/html/features.html#features.developing-auto-configuration">CoreFeatures</a></p><p><ahref="https://github.com/spring-projects/spring-boot/tree/2.7.x">spring-projects/spring-bootat 2.7.x</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/">Spring</category>
      
      
      <category domain="https://www.kugaaa.com/tags/Spring/">Spring</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/SpringBoot2%20%E5%8D%87%E7%BA%A7%20Starter%20%E5%BD%B1%E5%93%8D.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>准确率、精确率和召回率</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87.html</guid>
      <pubDate>Sun, 20 Oct 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;混淆矩阵-confusion-matrix&quot;&gt;混淆矩阵 Confusion Matrix&lt;/h1&gt;
&lt;h2 id=&quot;什么是混淆矩阵&quot;&gt;什么是混淆矩阵&lt;/h2&gt;
&lt;p&gt;混淆矩阵是通过将预测标签与真实标签进行比较来总结分类模型性能的表格，它显示了模型预测的真正例（TP）、真负例（TN）、假正例（FP）和假负例（FN）的数量&lt;/p&gt;
&lt;img src=&quot;/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image0.png&quot; class title=&quot;image0&quot;&gt;
&lt;h3 id=&quot;分类模型-classification-models&quot;&gt;分类模型 &lt;strong&gt;Classification
models&lt;/strong&gt;&lt;/h3&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="混淆矩阵-confusion-matrix">混淆矩阵 Confusion Matrix</h1><h2 id="什么是混淆矩阵">什么是混淆矩阵</h2><p>混淆矩阵是通过将预测标签与真实标签进行比较来总结分类模型性能的表格，它显示了模型预测的真正例（TP）、真负例（TN）、假正例（FP）和假负例（FN）的数量</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image0.png" class="" title="image0"><h3 id="分类模型-classification-models">分类模型 <strong>Classificationmodels</strong></h3><p>分类模型是一种机器学习模型，它为新的输入数据分配预定义的类别或标签</p><p>如果只有两个类别，则该分类是 binary 的；如果有多个类，则这是一个multi-class 问题</p><h3 id="混淆矩阵逻辑">混淆矩阵逻辑</h3><p>创建一个混淆矩阵首先需要给出输入，模型给出预测的后给出实际标签</p><p>这样就可以判断出模型预测的正确性</p><p>一旦知道了实际的标签，就可以计算模型正确或错误的次数</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image1.png" class="" title="image1"><p><strong>错误类型</strong></p><p>可以计算出不同错误类型的数量</p><ul><li>误报 false alarm，将普通交易标记为欺诈</li><li>错过 miss，将欺诈交易标记为普通交易</li></ul><p>第一种错误被称为 FP，第二种错误被称为 FN</p><div class="note info"><p><strong>positive 和 negative</strong></p><p>positive 和 negative 针对的是目标和非目标分类</p><p>在上面例子中，交易欺骗是我们的目标分类，所以我们将交易欺骗认为是positive</p></div><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image2.png" class="" title="image2"><p>之所以要区分两种不同的错误类型，是因为在一些业务中两种错误的后果危害性不同</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image3.png" class="" title="image3"><p><strong>正确类型</strong></p><p>同时也有两种不同的正确类型</p><ul><li>检测出实际的欺骗行为</li><li>正确标记正常行为</li></ul><p>第一种类型称为 TP，第二种行为称为 TN</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image4.png" class="" title="image4"><p>检测出不同的正确类型是必要的，因为业务可能更感兴趣的是模型识别欺骗交易的能力，而不是模型总体正确的频率</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image5.png" class="" title="image5"><p>总之对于一个预测模型，其得出的结果是如下四种之一</p><ul><li>真正例（<em>TruePositive, <strong>TP</strong></em>）：被模型预测为正的正样本</li><li>假正例（<em>False Positive,<strong>FP</strong></em>）：被模型预测为正的负样本</li><li>假负例（<em>False Negative,<strong>FN</strong></em>）：被模型预测为负的正样本</li><li>真负例（<em>True Negative,<strong>TN</strong></em>）：被模型预测为负的负样本</li></ul><p>于是可以根据上述结果绘制出混淆矩阵，横坐标代表预期分类，纵坐标代表实际分类</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image6.png" class="" title="image6"><h3 id="阅读混淆矩阵">阅读混淆矩阵</h3><p>用一个场景举例，垃圾邮件分类；这是一个二元分类模型，可以得出“是垃圾邮件” 和 “非垃圾邮件” 的分类</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image7.png" class="" title="image7"><p>TP</p><ul><li>左上角绿色区域</li></ul><p>TN</p><ul><li>右下角绿色区域</li></ul><p>FP</p><ul><li>右上角红色区域</li></ul><p>FN</p><ul><li>左下角红色区域</li></ul><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image8.png" class="" title="image8"><h2 id="分类的质量指标">分类的质量指标</h2><p>混淆矩阵可以给出预测正确、错误的绝对值（absolutenumber），但有时会希望衡量模型效果的相对值（relative）</p><p>以下是一些常用的指标来衡量分类模型的性能</p><ul><li>准确率 Accuracy：模型总体上正确的比率</li><li>精确率 Precision：预测正例中正确的比率</li><li>召回率 Recall 或 true positive rate (TPR)：预期正例中正确的比率</li></ul><h2 id="多分类的混淆矩阵">多分类的混淆矩阵</h2><p>多类分类也遵循同样的逻辑，在这种情况下矩阵将会有两个以上的行和列</p><p>假设将用户评论分为三类：“负面”、“正面” 和“中性”，下面是该问题的混淆矩阵示例</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image9.png" class="" title="image9"><p>如何阅读</p><ul><li>对角线代表正确分类的数据</li><li>第一行，模型正确地标记了 700 条（共 1000 条）负面评论，将 300条错误地归类为中心评论</li><li>第二行，该模型正确地标记了 8300 条（共 8600 条）中性评论，但错误地将200 条归类为负面评论，100 条归类为正面评论</li><li>第三行，该模型正确预测了 300 条（共 400 条）正面评论，但将 100条错误地归类为中性评论</li></ul><h1 id="指标">指标</h1><h2 id="准确率-accuracy">准确率 <strong>Accuracy</strong></h2><p><em>模型正确的比率有多高</em></p><p><em>How often the model is right</em></p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image10.png" class="" title="image10"><h3 id="混淆矩阵图示">混淆矩阵图示</h3><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image11.png" class="" title="image11"><h3 id="示例">示例</h3><p>有以下数据</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image12.png" class="" title="image12"><p>获取到预测结果后可以标注出正确性</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image13.png" class="" title="image13"><p>可以简单地计算模型正确的次数，然后除以预测的总数</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image14.png" class="" title="image14"><p>直观来看，准确性是判断模型质量的直接方法，它表示了模型整体的正确性，易于沟通</p><p>事实上这种措施并不总是有效，因为 accuracy paradox 准确性悖论存在</p><h3 id="优缺点">优缺点</h3><ul><li>优点<ul><li>当关注<strong>平衡类别</strong>（balancedclasses）并且关心整体模型的 “正确性”而不是预测特定类别的能力时，是一个有用的指标</li><li><strong>易于解释</strong></li></ul></li><li>缺点<ul><li>如果类别不均衡，准确率的用处就会降低，因为它对模型预测所有类别的能力给予了同等的权重；在这种情况下，传达准确性<strong>可能会产生误导</strong>，并掩盖目标类别上的低性能</li></ul></li></ul><h2 id="精确率-precision">精确率 P<strong>recision</strong></h2><p><em>多少正例的预测是正确的</em></p><p><em>How often the positive predictions are correct</em></p><p>预测为正样本的结果中，真正为正样本的比例</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image15.png" class="" title="image15"><h3 id="混淆矩阵图示-1">混淆矩阵图示</h3><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image16.png" class="" title="image16"><h3 id="示例-1">示例</h3><p>邮件示例中假设有一个不平衡问题，只有 5% 的邮件是垃圾邮件</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image17.png" class="" title="image17"><p>假设预测所有电子邮件都是非垃圾邮件</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image18.png" class="" title="image18"><p>此时准确率为 95%（60 个 cases，模型有 57 个是准确的），但是精确率却为0%</p><p>为了计算精确率，我们必须用 <strong>正确预测的垃圾邮件数量</strong>除以 <strong>垃圾邮件总数</strong>；然而正确识别的垃圾邮件数量为0，数据集中有 3封垃圾邮件，但模型全部错过了，所有正确的预测都是关于非垃圾邮件的，精确率指标纠正了准确率的主要缺点</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image19.png" class="" title="image19"><p>假设我们又训练了一个模型，得到的结果如上</p><p>此时准确率依然为 95%</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image20.png" class="" title="image20"><p>而精确率为 50%，该模型将 6封电子邮件标记为垃圾邮件，并且有一半的时间是正确的。在标记为垃圾邮件的 6封电子邮件中，实际上有 3 封是垃圾邮件（真正的阳性），另外 3封是错误标记（假阳性）</p><h3 id="优缺点-1">优缺点</h3><p>什么时候精确率是一个适合关注的指标？</p><p>以下是精确率指标的优点：</p><ul><li>对于<strong>类别不平衡</strong>的问题效果很好，因为它显示了模型在识别目标类别时的正确性</li><li>当<strong>误报成本</strong>很高时，精确率很有用。在这种情况下，即使遗漏了一些（或很多）实例，你通常也希望对识别目标类别有信心</li></ul><p>假设这样一个产品需求，作为垃圾邮件检测功能的产品经理，认为误报错误的成本很高；可以将错误成本解释为由于错误预测而导致的负面用户体验；希望确保用户永远不会因为重要邮件被错误标记为垃圾邮件而错过它，这是一种<strong>错误最小化</strong>的需求，<strong>精确率</strong>是一个很好的评估和优化指标</p><p>较高的精确率得分表明模型做出的误报预测更少</p><p>在这种情况下，一些垃圾邮件可能会未被检测到并进入用户的收件箱，此时会认为这种类型的错误（漏报）的成本更可容忍，用户仍然可以手动将这些邮件标记为垃圾邮件，但是每当自动将邮件放入垃圾邮件文件夹并对用户隐藏时，它们最好确实是垃圾邮件</p><p>当然精确率也有缺点：</p><ul><li>精确率不考虑<strong>假阴性</strong>，即它没有考虑我们错过目标事件的情况</li></ul><p>这就是为什么需要另一个指标来平衡精确率：召回率</p><h2 id="召回率-recall">召回率 R<strong>ecall</strong></h2><p><em>模型是否能够识别出所有的正例</em></p><p>所有正样本中，被正确预测为正例的比例，考虑了假阴性</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image21.png" class="" title="image21"><p>可以在 0 到 1的范围内或用百分比来衡量召回率；召回率越高越好，当模型能够在数据集中找到目标类的所有实例时，可以实现完美召回率为1.0</p><p>召回率也可以称为<strong>敏感度</strong>或<strong>真正例率</strong>。“敏感度”一词在医学和生物学研究中比在机器学习中更常用；例如，可以参考医学诊断测试的敏感度来解释其正确揭示大多数真正例的能力，概念是相同的</p><h3 id="混淆矩阵图示-2">混淆矩阵图示</h3><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image22.png" class="" title="image22"><h3 id="示例-2">示例</h3><p>依然用识别垃圾邮件举例</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image23.png" class="" title="image23"><p>如之前的模拟情况为例，此时我们知道准确率为 95%，精确率为 50%</p><p>要计算召回率，我们必须用<strong>已发现的垃圾邮件数量</strong>除以<strong>数据集中垃圾邮件的总数</strong></p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image24.png" class="" title="image24"><p>召回率为 100%。数据集中有 3 封垃圾邮件，模型找到了所有这些邮件</p><p>这样，召回率展现了模型质量的又一个维度；总之这个虚构的模型具有 95%的准确率、50% 的精确率和 100% 的召回率</p><h3 id="优缺点-2">优缺点</h3><ul><li>优点<ul><li>它对于具有<strong>类别不平衡</strong>的问题很有效，因为它专注于模型找到目标类对象的能力</li><li>当<strong>假阴性成本</strong>很高时，召回率很有用；在这种情况下，通常希望找到<strong>目标类的所有对象</strong>，即使这会导致一些误报（当实际上为阴性时预测为阳性）</li></ul></li><li>缺点<ul><li>它没有考虑<strong>误报</strong>（false positives）的成本误报的成本可能仍然很高。在极端情况下，如果需要审查的决策过多且精度较低，它们可能会使模型变得毫无用处</li><li></li></ul></li></ul><p>召回率的极端情况与准确率悖论相反：如果想实现“完全召回”，可以将每个对象都标记为可疑</p><p>例如可以将每封电子邮件都标记为垃圾邮件，这样就实现了 100%的召回率，但绝大多数预测将是误报，从而使模型变得毫无用处</p><p>没有单一的指标是完美的，因此同时考虑多个指标并在精度和召回率之间确定适当的平衡是有意义的</p><h1 id="实践">实践</h1><p>由于没有一个指标能反映出衡量模型质量的 “绝对最佳”方法，因此通常需要<strong>综合考虑这些指标</strong>，或者<strong>有意识地选择更适合特定场景的指标</strong></p><p>在确定哪种指标更合适时，这里有一些需要牢记的注意事项</p><h2 id="注意类别平衡">注意类别平衡</h2><p>在解释精确率、召回率和准确率时，评估类别比例并记住每个指标在处理不平衡类别时的表现是有意义的。一些指标（如准确率）可能看起来具有误导性地好，并掩盖重要少数类别的性能</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image25.png" class="" title="image25"><h2 id="注意误判的成本">注意误判的成本</h2><p>精度是在分配正类时更关心 “正确分类” 而非 “全部检测出”的情况下的一个合适指标</p><p>召回率指标则相反</p><h2 id="注意决策阈值">注意决策阈值</h2><p>在精度和召回率之间找到正确平衡的另一种方法是手动为概率分类设置不同的决策阈值</p><img src="/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87/image26.png" class="" title="image26"><p>决策阈值是一个值，当输入值高于该值时，输入被分类为属于特定类别；当输入值低于该值时，输入被分类为属于不同类别</p><p>例如，当预测概率为 0.5 时，可以将预测分配给特定类别，或者将其调整为0.8</p><p>如果目标是最小化误报（最大化精确率），那么较高的决策阈值可能更合适；另一方面，如果目标是最小化漏报（最大化召回率），那么较低的决策阈值可能更合适</p><h1 id="参考">参考</h1><p><ahref="https://www.evidentlyai.com/classification-metrics">Evidently AI -Classification metrics guide</a></p><p><ahref="https://www.evidentlyai.com/classification-metrics/accuracy-precision-recall#what-is-precision">Accuracyvs. precision vs. recall in machine learning: what's thedifference?</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/AI/">AI</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/%E7%BB%9F%E8%AE%A1/">统计</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E5%92%8C%E5%8F%AC%E5%9B%9E%E7%8E%87.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Framework - WebSocket</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket.html</guid>
      <pubDate>Sat, 27 Jul 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;api-快速开始&quot;&gt;API 快速开始&lt;/h1&gt;
&lt;p&gt;涉及 Spring WebSocket 的主要 API&lt;/p&gt;
&lt;h2 id=&quot;websockethandler&quot;&gt;&lt;strong&gt;WebSocketHandler&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;第一步首先实现 &lt;code&gt;WebSocketHandler&lt;/code&gt; ，或者直接继承
&lt;code&gt;TextWebSocketHandler&lt;/code&gt; 或
&lt;code&gt;BinaryWebSocketHandler&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Component&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;MyTextWebSocketHandler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;TextWebSocketHandler&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handleTextMessage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WebSocketSession session, TextMessage message)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="api-快速开始">API 快速开始</h1><p>涉及 Spring WebSocket 的主要 API</p><h2 id="websockethandler"><strong>WebSocketHandler</strong></h2><p>第一步首先实现 <code>WebSocketHandler</code> ，或者直接继承<code>TextWebSocketHandler</code> 或<code>BinaryWebSocketHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTextWebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="configure-a-websockethandler"><strong>Configure aWebSocketHandler</strong></h2><p>将上面实现的 <code>WebSocketHandler</code> 映射到特定的 URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyTextWebSocketHandler myTextWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addHandler(myTextWebSocketHandler, <span class="string">&quot;/ws/test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="websocket-handshake"><strong>WebSocket Handshake</strong></h2><p>自定义初始 HTTP WebSocket 握手请求的最简单方法是通过<code>HandshakeInterceptor</code>，它暴露了握手相关的 before 和 after方法，例如有一个内置的拦截器用于将 HTTP session 属性传递给WebSocketsession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addHandler(<span class="keyword">new</span> <span class="title class_">MyHandler</span>(), <span class="string">&quot;/myHandler&quot;</span>)</span><br><span class="line">            .addInterceptors(<span class="keyword">new</span> <span class="title class_">HttpSessionHandshakeInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者我们实现一个基于用户鉴权的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserVerifyHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandshakeInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ServletServerHttpRequest</span> <span class="variable">httpRequest</span> <span class="operator">=</span> (ServletServerHttpRequest) request;</span><br><span class="line">        List&lt;String&gt; headerUserId = httpRequest.getHeaders().get(<span class="string">&quot;USER-ID&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (headerUserId == <span class="literal">null</span> || headerUserId.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        attributes.put(<span class="string">&quot;USER-ID&quot;</span>, headerUserId.get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> &#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器返回 false，表示拒绝连接，在 HTTP Response 的<code>Status Code</code> 是 200，但不会在 Header 返回<code>Sec-WebSocket-Accept</code> 等进行 WebSocket 协议的相关属性</p><p><strong>成功连接</strong></p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket/%E6%88%90%E5%8A%9F%E8%BF%9E%E6%8E%A5.png" class="" title="成功连接"><p><strong>拦截器拒绝</strong></p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%8B%92%E7%BB%9D.png" class="" title="拦截器拒绝"><h2 id="websockethandler-decoration">WebSocketHandler Decoration</h2><p>对 <code>WebSocketHandler</code> 也提供了一系列装饰器，比如<code>ExceptionWebSocketHandlerDecorator</code> ，功能是如果在处理WebSocket Message 过程中遇到异常，则尝试关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.close(CloseStatus.SERVER_ERROR);</span><br></pre></td></tr></table></figure><h2 id="configuring-the-websocket-engine"><strong>Configuring theWebSocket Engine</strong></h2><p>每个底层 WebSocket引擎都公开了控制运行时特性的配置属性，如消息缓冲区大小、空闲超时等</p><p>对于 Tomcat、WildFly、GlassFish，将<code>ServletServerContainerFactoryBean</code> 添加到 WebSocket Javaconfig 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletServerContainerFactoryBean <span class="title function_">createWebSocketContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ServletServerContainerFactoryBean</span> <span class="variable">container</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletServerContainerFactoryBean</span>();</span><br><span class="line">        container.setMaxTextMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line">        container.setMaxBinaryMessageBufferSize(<span class="number">8192</span>);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="configuring-allowed-origins"><strong>Configuring allowedorigins</strong></h2><p>从 <code>Spring Framework 4.1.5</code> 开始，WebSocket 和 SockJS的默认行为是只接受同源（<em>sameorigin</em>）请求，也可以允许所有或指定的来源列表</p><p>此检查主要是为浏览器客户端设计的，即</p><ol type="1"><li>这里同源检查是一个服务端行为</li><li>为浏览器客户端设计，如果自定义客户端修改了 Header 中的<code>Origin</code> ，该策略也无法感知</li></ol><p>三种可能的行为是：</p><ul><li>只允许同源请求（默认）</li><li>允许指定的源列表：每个提供的允许源必须以 <code>http://</code> 或<code>https://</code> 开头</li><li>允许所有源：要启用此模式，应该提供 <code>*</code>作为允许的源配置，在此模式下所有传输都可用</li></ul><h1 id="sockjs-fallback">SockJS Fallback</h1><p>SockJS 是 WebSocket 的替代方案</p><h1 id="stomp">STOMP</h1><p>STOMP（<em>Streaming Text Orientated MessageProtocol</em>）是流文本定向消息协议，设计的目的是为了面向消息中间件MOM（<em>Message OrientedMiddleware</em>），面向消息的中间件)的简单文本协议</p><p>所以相对 WebSocket 来说，STOMP是一个子协议（<em>High-Level</em>）</p><h2 id="消息流程">消息流程</h2><p>STOMP 端点暴露，Spring 应用程序就成为连接客户端的 STOMP Broker</p><p><code>spring-messaging</code> 提供了对 messaging应用程序的基础支持，提供了如下抽象：</p><ul><li>Message：消息的简单定义，包括 header 和负载</li><li>MessageHandler：消息处理器</li><li>MessageChannel：用于发送消息的接口，解耦生产者和消费者</li><li>SubscribableChannel：带有 <code>MessageHandler</code> 订阅者的<code>MessageChannel</code></li><li>ExecutorSubscribableChannel：使用 <code>Executor</code> 传递消息的<code>SubscriableChannel</code></li></ul><p><strong>启用简单内置消息代理时使用的组件</strong></p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket/SimpleBroker.png" class="" title="SimpleBroker"><p>上图中有三个 Channel：</p><ul><li>clientInboundChannel：用于传递从 WebSocket 客户端接收到的消息</li><li>clientOutboundChannel：用于向 WebSocket 客户端发送服务器消息</li><li>brokerChannel：用于从服务器端应用程序代码中向消息代理发送消息</li></ul><p><strong>下图显示了当配置了外部 Broker（如RabbitMQ）来管理订阅和广播消息时使用的组件</strong></p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket/MessageBroker.png" class="" title="MessageBroker"><p>当从 WebSocket 连接接收到消息时，它们将 STOMP frames 转换为 Spring<code>Message</code> 表示，并发送到 <code>clientInboundChannel</code>进行进一步处理</p><ul><li>例如，目标标头以 <code>/app</code> 开头的 STOMP消息可能会被路由到带注释的控制器中的 <code>@MessageMapping</code>方法，而 <code>/topic</code> 和 <code>/queue</code> 消息可能会直接路由到Message Broker</li><li>处理来自客户端的 STOMP 消息的带注释的 <code>@Controller</code>可以通过 <code>brokerChannel</code> 向消息代理发送消息，代理通过<code>clientOutboundChannel</code> 将消息广播给匹配的订阅者</li><li>同一个 Controller 也可以对 HTTP请求做出同样的响应，因此客户端可以执行 HTTP POST，然后<code>@PostMapping</code>方法可以向消息代理发送消息，以向订阅的客户端广播</li></ul><h2 id="simple-broker-示例">Simple Broker 示例</h2><p>如下 set up 一个服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">registry.addEndpoint(<span class="string">&quot;/portfolio&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MessageMapping(&quot;/greeting&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">(String greeting)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + getTimestamp() + <span class="string">&quot;: &quot;</span> + greeting;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持以下流程：</p><ol type="1"><li>客户端连接 <code>localhost:8080/portfolio</code>，一旦建立了WebSocket 连接，STOMP frame 就开始进行流程</li><li>客户端发送 SUBSCRIBE frame，其中 header 中的<code>destination</code> 为<code>/topic/greeting</code>，一旦被接收和解码，消息就会被发送到<code>clientInboundChannel</code>，然后被路由到存储客户端订阅的消息代理</li><li>客户端向 <code>/app/greeting</code> 发送一个 SENDframe，<code>/app</code> 前缀将其路由到带注释的 Controller，去掉<code>/app</code> 前缀后，destination 剩余 <code>/agreeting</code>部分被映射到 <code>GreetingController</code> 中的<code>@MessageMapping</code> 方法</li><li><code>GreetingController</code> 返回的值将转换为 Spring<code>Message</code>，其有效载荷基于返回值和默认的 destination header<code>/topic/heading</code>（从输入 destination 派生，将<code>/app</code> 替换为 <code>/topic</code>），生成的消息被发送到<code>brokerChannel</code>，并由消息 Broker 处理</li><li>消息代理会找到所有匹配的订阅者，并通过<code>clientOutboundChannel</code> 发送一帧 <code>MESSAGE</code>给每个订阅者，消息会被编码为 STOMP frame 并通过 WebSocket 连接发送</li></ol><h2 id="controller-注解">Controller 注解</h2><p>可以使用带注释的 <code>@Controller</code>类来处理来自客户端的消息，这些类可以声明<code>@MessageMapping</code>、<code>@SubscribeMapping</code>和 <code>@MessageExceptionHandler</code> 方法</p><ul><li>MessageMapping：映射消息处理</li><li>SubscribeMapping：映射订阅</li><li>MessageExceptionHandler：异常处理；全局可以使用<code>@ControllerAdvice</code>，和 MVC 其他支持</li></ul><h3 id="messagemapping">MessageMapping</h3><p><code>@MessageMapping</code>用于根据消息地址路由消息，配置在类上时表示类下所有方法都共享的mapping</p><p>默认情况下，映射值是 Ant 风格的路径模式，路径参数可以通过<code>@DestinationVariable</code> 方法参数引用，还可以切换到dot-separated 模式，见下文</p><p>支持的方法参数：</p><ul><li>Message：完整消息</li><li><span class="citation"data-cites="DestinationVariableMessageHeaders">@DestinationVariableMessageHeaders</span>：消息的headers</li><li>MessageHeaderAccessor SimpMessageHeaderAccessorStompHeaderAccessor：通过类型访问器获取 headers</li><li><span class="citation"data-cites="Payload">@Payload</span>：访问消息的 payload</li><li><span class="citation"data-cites="Header">@Header</span>：访问特定的标头值；有必要可以使用<code>org.springframework.core.convert.converter.Converter</code></li><li><span class="citation"data-cites="Headers">@Headers</span>：用于访问消息中的所有标头</li><li><span class="citation"data-cites="DestinationVariable">@DestinationVariable</span>：路径参数</li><li>java.security.Principal：WebSocket HTTP 握手时登录的用户</li></ul><p>返回值默认拼接 <code>/topic</code> 前缀，可以使用<code>@SendTo</code> 和 <code>@SendToUser</code>覆盖默认路径和类级别上的对应配置</p><p>消息返回值可以异步处理，<code>ListenableFuture</code>、<code>CompletableFuture</code>、<code>CompletionStage</code></p><p>对于更高级的场景，<code>@MessageMapping</code> 方法可以直接使用<code>SimpMessagingTemplate</code>，可以代替返回值，也可以作为返回值的补充</p><h3 id="subscribemapping">SubscribeMapping</h3><p>用来订阅消息时立即返回数据，常用于初始化消息或一次性消息；返回值会被放入<code>clientOutboundChannel</code>直接返回给当前客户端（一般用于确认订阅）而不是发送给 Broker</p><p>但也可以使用 <code>@SendTo</code> 和 <code>@SendToUser</code>覆盖默认操作，使其发送给代理</p><ul><li>什么时候应该用？<ul><li>消息代理和控制器映射到不同的前缀（例如 <code>/app</code> 和<code>/topic</code>、<code>/queue</code>），为了重复广播而设计的</li><li>订阅某个 <code>/app</code> 地址，控制器可以在不涉及消息代理的情况下直接返回值，用于初始化消息</li></ul></li><li>什么时候不该用？<ul><li>消息代理和控制器映射相同的前缀，他们会共同处理消息导致出现问题</li></ul></li></ul><h2 id="发送消息">发送消息</h2><p>使用 <code>SimpMessagingTemplate</code> 可以实现任何应用程序组件向<code>brokerChannel</code> 发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SimpMessagingTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GreetingController</span><span class="params">(SimpMessagingTemplate template)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.template = template;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(path=&quot;/greetings&quot;, method=POST)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">(String greeting)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span> + getTimestamp() + <span class="string">&quot;]:&quot;</span> + greeting;</span><br><span class="line"><span class="built_in">this</span>.template.convertAndSend(<span class="string">&quot;/topic/greetings&quot;</span>, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果存在另一个相同类型的 bean可以通过其名称（<code>brokerMessagingTemplate</code>）对其进行限定</p><h2 id="broker">Broker</h2><p>Spring WebSocket STOMP 可以使用简单 Broker 和外部 Broker</p><ul><li>简单 Broker 基于服务的内存</li><li>外部 Broker 即功能齐全的 Broker（例如 RabbitMQ），可以实现ACK、集群等机制</li></ul><p>这里使用 Simple Broker 演示</p><h3 id="配置">配置</h3><ul><li>endpoint：握手端点</li><li>applicationDestinationPrefixes：应用路径前缀</li><li>enableSimpleBroker：使用 SimpleBroker 并注册代理前缀</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.StompEndpointRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line">registry.addEndpoint(<span class="string">&quot;/portfolio&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry config)</span> &#123;</span><br><span class="line">config.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">config.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>, <span class="string">&quot;/queue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="心跳">心跳</h3><p>STOMP 也需要心跳支持 <ahref="https://stomp.github.io/stomp-specification-1.2.html#Heart-beating">STOMPheartbeats</a></p><p>可以手动配置调度器，但是注意如果以使用<code>WebSocketMessageBrokerConfigurer</code> 中声明，需要<code>@Lazy</code> 来避免 WebSocket 配置和<code>WebSocketMessageBrokerConfigurer</code> 循环依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TaskScheduler messageBrokerTaskScheduler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageBrokerTaskScheduler</span><span class="params">(<span class="meta">@Lazy</span> TaskScheduler taskScheduler)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.messageBrokerTaskScheduler = taskScheduler;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line">registry.enableSimpleBroker(<span class="string">&quot;/queue/&quot;</span>, <span class="string">&quot;/topic/&quot;</span>)</span><br><span class="line">.setHeartbeatValue(<span class="keyword">new</span> <span class="title class_">long</span>[] &#123;<span class="number">10000</span>, <span class="number">20000</span>&#125;)</span><br><span class="line">.setTaskScheduler(<span class="built_in">this</span>.messageBrokerTaskScheduler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息有序">消息有序</h3><p>Broker 会将消息发送至 <code>clientOutboundChannel</code>，Channel基于线程池实现，所以处理消息时是并发的；同理消息接收会被并发发送至<code>clientInboundChannel</code></p><p>可以设置消息有序，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">registry.setPreservePublishOrder(<span class="literal">true</span>);</span><br><span class="line">registry.setPreserveReceiveOrder(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器-鉴权">拦截器 &amp; 鉴权</h2><p>可以注册 <code>ChannelInterceptor</code>来拦截处理流程中的每一条消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureClientInboundChannel</span><span class="params">(ChannelRegistration registration)</span> &#123;</span><br><span class="line">registration.interceptors(<span class="keyword">new</span> <span class="title class_">MyChannelInterceptor</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的 <code>ChannelInterceptor</code> 可以使用<code>StompHeaderAccessor</code> 或<code>SimpMessageHeaderAccessor</code> 来访问有关消息的信息</p><blockquote><p>Invoked inside the {<span class="citation"data-cites="link">@link</span> Runnable} submitted to the Executor justbefore calling the target MessageHandler to handle the message.</p></blockquote><p>还可以实现 <code>ExecutorChannelInterceptor</code>，这是<code>ChannelInterceptor</code>的一个子接口，每当一条消息被发送到通道时，<code>ChannelInterceptor</code> 都会被触发一次</p><h3 id="stomp-headers-用于鉴权">STOMP Headers 用于鉴权</h3><p>在 STOMP 消息协议级别使用 Headers 进行认证，需要两个步骤：</p><ol type="1"><li>使用 STOMP 客户端在连接时传递认证 Headers</li><li>使用 <code>ChannelInterceptor</code> 处理</li></ol><p>注意拦截器只需要认证并在 CONNECT 消息上设置用户头部。Spring会记录并保存认证用户，并将其与同一会话上的后续 STOMP 消息关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketMessageBrokerConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureClientInboundChannel</span><span class="params">(ChannelRegistration registration)</span> &#123;</span><br><span class="line">        registration.interceptors(<span class="keyword">new</span> <span class="title class_">ChannelInterceptor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message&lt;?&gt; preSend(Message&lt;?&gt; message, MessageChannel channel) &#123;</span><br><span class="line">                <span class="type">StompHeaderAccessor</span> <span class="variable">accessor</span> <span class="operator">=</span></span><br><span class="line">                        MessageHeaderAccessor.getAccessor(message, StompHeaderAccessor.class);</span><br><span class="line">                <span class="keyword">if</span> (StompCommand.CONNECT.equals(accessor.getCommand())) &#123;</span><br><span class="line">                    <span class="type">Authentication</span> <span class="variable">user</span> <span class="operator">=</span> ... ; <span class="comment">// 从 headers 获取</span></span><br><span class="line">                    accessor.setUser(user);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外需要注意当对消息使用 Spring Security 鉴权时，需要确保身份验证<code>ChannelInterceptor</code> 顺序早于 Spring Security；最好在<code>WebSocketMessageBrokerConfigurer</code>的自身实现中声明自定义拦截器，该拦截器标记为<code>@Order(Ordered.HIGHEST_PRECEDENCE+99)</code></p><h1 id="补充">补充</h1><h2 id="委派模式">委派模式</h2><p>委派模式（Delegate Pattern）不属于常说的 Gang of Four 23设计模式之一，但其实开发过程中经常使用</p><p>个人理解就是使用组合将受委托的实现放在委托对象内部，业务和委托对象交互，来达成解耦的目的；口语化表达就是：虽然调用的是我，但其实我<strong>再调用内部实例的方法来处理</strong>，双亲委派的委派也即是指的委派模式</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">业务 → 委托类 → 受委托类 <span class="number">1</span> ~ <span class="built_in">n</span></span><br></pre></td></tr></table></figure><p>经常在策略模式中创建的类似 <code>Manager</code>、<code>Holder</code>等角色其实就是委派模式的实现</p><p>委派角色提供以下能力：</p><ul><li>暴露统一入口方法</li><li>管理受委托类</li></ul><p>对于如今 Spring 的 IOC机制来说，策略结合委派模式作用不大了，因为可以直接按类型注入集合</p><p>但是 SpringBoot 的 stater 往往在很多场景基于 IOC和委派模式来实现灵活自动装配</p><hr /><p>例如 <code>spring-websocket</code> 中的<code>@EnableWebSocketMessageBroker</code> 和<code>WebSocketMessageBrokerConfigurer</code> 配合来实现对WebSocketMessageBroker 的配置</p><ol type="1"><li><code>@EnableWebSocketMessageBroker</code> import<code>DelegatingWebSocketMessageBrokerConfiguration</code></li><li>从名字就可以看出<code>DelegatingWebSocketMessageBrokerConfiguration</code>是一个委派配置类</li><li>以 <code>registerStompEndpoints</code> 方法为例，将其实现委派给 IOC注入的 <code>configurers</code> 来执行</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelegatingWebSocketMessageBrokerConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebSocketMessageBrokerConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 受委托类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;WebSocketMessageBrokerConfigurer&gt; configurers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> &#123;</span><br><span class="line"><span class="comment">// 进行委派</span></span><br><span class="line"><span class="keyword">for</span> (WebSocketMessageBrokerConfigurer configurer : <span class="built_in">this</span>.configurers) &#123;</span><br><span class="line">configurer.registerStompEndpoints(registry);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以通过注解启动 Broker这一套流程，并且业务可以自定义配置实现类</p><h1 id="参考">参考</h1><p><ahref="https://docs.spring.io/spring-framework/reference/web/websocket.html">WebSockets:: Spring Framework</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/">Spring</category>
      
      
      <category domain="https://www.kugaaa.com/tags/%E7%BD%91%E7%BB%9C/">网络</category>
      
      <category domain="https://www.kugaaa.com/tags/Spring/">Spring</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/Spring/Spring%20Framework%20-%20WebSocket.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LangChain 生态入门</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8.html</guid>
      <pubDate>Wed, 17 Jul 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;langchain-生态入门&quot;&gt;LangChain 生态入门&lt;/h1&gt;
&lt;img src=&quot;/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/%E5%B7%A5%E7%A8%8B%E4%B8%80%E8%A7%88.png&quot; class title=&quot;工程一览&quot;&gt;
&lt;p&gt;&lt;strong&gt;LangChain 生态下面都有哪些库和服务&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LangChain&lt;/strong&gt;：开发由大型语言模型（LLM）应用程序的框架
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;langchain-core&lt;/code&gt; 基础抽象和 LCEL（LangChain Expression
Language）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;langchain-community&lt;/code&gt; 三方集成；例如
&lt;code&gt;langchain-openai&lt;/code&gt; &lt;code&gt;langchain-elasticsearch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;langchain&lt;/code&gt; Chains  Agents  retrieval strategies&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LangGraph&lt;/strong&gt;：使用 LLM
构建健壮且有状态的多参与者应用程序（multi actor），与 LangChain
平滑集成，但也可以在没有 LangChain 的情况下使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LangSmith&lt;/strong&gt;：开发者平台，用于调试、测试、评估、监控
LLM 应用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LangServer&lt;/strong&gt;：部署 LangChain 的 chains 作为 REST
API&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;langchain&quot;&gt;LangChain&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="langchain-生态入门">LangChain 生态入门</h1><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/%E5%B7%A5%E7%A8%8B%E4%B8%80%E8%A7%88.png" class="" title="工程一览"><p><strong>LangChain 生态下面都有哪些库和服务</strong></p><ul><li><strong>LangChain</strong>：开发由大型语言模型（LLM）应用程序的框架<ul><li><code>langchain-core</code> 基础抽象和 LCEL（LangChain ExpressionLanguage）</li><li><code>langchain-community</code> 三方集成；例如<code>langchain-openai</code> <code>langchain-elasticsearch</code></li><li><code>langchain</code> Chains  Agents  retrieval strategies</li></ul></li><li><strong>LangGraph</strong>：使用 LLM构建健壮且有状态的多参与者应用程序（multi actor），与 LangChain平滑集成，但也可以在没有 LangChain 的情况下使用</li><li><strong>LangSmith</strong>：开发者平台，用于调试、测试、评估、监控LLM 应用</li><li><strong>LangServer</strong>：部署 LangChain 的 chains 作为 RESTAPI</li></ul><h1 id="langchain">LangChain</h1><h2 id="简介">简介</h2><p>LangChain 是对各种组件的抽象，以及 LCEL 支持</p><p>因为 LangChain是整个生态最基础的库，并且社区迭代了很长时间，其拥有的功能非常庞杂，这里简要整理其功能</p><ul><li><strong>LCEL：</strong>创建任意自定义 Chain 的方法（框架）</li><li><strong>组件</strong><ul><li><strong>PromptTemplate：</strong>Prompt 模板，占位符快速 buildPrompt messages<ul><li>few shot examples template</li><li>messages placeholder</li></ul></li><li><strong>Example selectors：</strong>examples 选择的抽象和封装</li><li><strong>Chat models：</strong>LLM<ul><li><strong>LLMs：</strong>LangChain 中这是 LLM的早期封装，当时还没有聊天模式，和 LLM主要的交互模式是输入字符串、输出字符串</li></ul></li><li><strong>Messages：</strong>LLM 输出的 Message封装；包括对历史消息的操作，我理解替代了 v0.1 的 memory<ul><li>MessageType</li><li>trim 修剪</li><li>filter 过滤</li><li>merge 合并</li></ul></li><li><strong>Output parsers：</strong>负责获取 LLM的输出并解析为更结构化的格式<ul><li>JSON</li><li>XML</li><li>enums</li><li>retry and fix</li></ul></li><li><strong>Text splitters：</strong>将文档拆分为块便于检索</li><li><strong>Embedding models：</strong>对 Embedding models 的抽象</li><li><strong>Vector stores：</strong>对向量数据库的抽象</li><li><strong>Retrievers：</strong>查询并返回相关文档<ul><li>上下文压缩检索器</li><li>时间权重检索器</li><li>元数据过滤检索器（metadata filter）</li><li>重排序减轻 lost in the middle 影响</li></ul></li><li><strong>Index：</strong>用于同步向量存储和底层数据源（文档），处理文档哪些内容变更了、哪些需要向量化、哪些需要存储<ul><li>Incremental</li><li>Full</li></ul></li><li><strong>Tools：</strong>LLM 工具执行封装<ul><li>内置 toolkit</li><li>人工干预</li><li>错误处理</li></ul></li><li><strong>Multimodal：</strong>多模态 API 封装</li><li><strong>Agents：</strong>Agent 主要迁移到 LangGraph 实现了，不需要在LangChain 这里关注</li><li><strong>Callbacks：</strong>LLM 执行各个阶段的钩子</li></ul></li></ul><h2 id="举例">举例</h2><h3 id="llm-async-stream">LLM Async &amp; Stream</h3><aside><p>💡 演示</p></aside><p>LangChain 中的 LLM 实现了异步、Streaming模式的相关接口，并且还进行了扩展</p><p><ahref="https://api.python.langchain.com/en/latest/runnables/langchain_core.runnables.base.Runnable.html#langchain_core.runnables.base.Runnable">langchain_core.runnables.base.Runnable— 🦜🔗 LangChain 0.2.12</a></p><p>A unit of work that can be invoked, batched, streamed, transformedand composed.</p><ul><li><strong>invoke/ainvoke</strong>: Transforms a single input into anoutput.</li><li><strong>batch/abatch</strong>: Efficiently transforms multipleinputs into outputs.</li><li><strong>stream/astream</strong>: Streams output from a single inputas it’s produced.</li><li><strong>astream_log</strong>: Streams output and selectedintermediate results from an input.</li></ul><p>Built-in optimizations:</p><ul><li><strong>Batch: By default, batch runs invoke() in parallel using athread pool executor.</strong>Override to optimize batching.</li><li><strong>Async: Methods with “a” suffix are asynchronous. By default,they execute</strong>the sync counterpart using asyncio’s thread pool.Override for native async.</li></ul><h3 id="lcel-runnable">LCEL &amp; Runnable</h3><aside><p>💡 演示</p></aside><p>LCEL 是 <strong>LangChain Expression Language</strong></p><p>它用于快速构建自定义的 chain（将 LangChain 的组件包装起来），基于<code>Runnable</code> 协议（这个 <code>Runnable</code> 是 LangChain定义的结构）</p><p>我觉得可以将 LCEL 理解为简易的流程引擎，实际上构造 chain的过程和和构造一个流程一致，<code>Runnable</code> 实际上就是流程节点</p><p>在 LCEL出现之前，组件之间的组装是通过参数进行赋值的，并且一般需要在外部包装一个外部对象（例如<code>Chain</code>），有了 LCEL 之后可读性、易用性、灵活性都有了提高</p><p>例如如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># example 1</span></span><br><span class="line">chain = prompt | llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># example 2</span></span><br><span class="line">retrieval_chain = (</span><br><span class="line">    &#123;<span class="string">&quot;context&quot;</span>: retriever, <span class="string">&quot;question&quot;</span>: RunnablePassthrough()&#125;</span><br><span class="line">    | prompt</span><br><span class="line">    | model</span><br><span class="line">    | StrOutputParser()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># example 3</span></span><br><span class="line">joke_chain = </span><br><span class="line">ChatPromptTemplate.from_template(<span class="string">&quot;tell me a joke about &#123;topic&#125;&quot;</span>) | model</span><br><span class="line">poem_chain =</span><br><span class="line">    ChatPromptTemplate.from_template(<span class="string">&quot;write a 2-line poem about &#123;topic&#125;&quot;</span>) | model</span><br><span class="line"></span><br><span class="line">map_chain = RunnableParallel(joke=joke_chain, poem=poem_chain)</span><br></pre></td></tr></table></figure><h3 id="序列化">序列化</h3><aside><p>🤔 设计离线任务服务时，如何序列化是一个难题（A server → Bserver）</p><p>LLM调用的业务多变，需要一个顶层的抽象才能做到满足绝大多数业务的序列化机制，LangChain在这方面是已经实现了的</p></aside><aside><p>💡 演示</p></aside><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/%E7%B1%BB%E5%9B%BE.png" class="" title="类图"><p>LangChain下的所有对象都可以序列化（JSON），包括消息、文档对象（例如，从检索器返回的对象）和大多数Runnables，如 Chat Model、检索器和用 LECL 实现的 Chain</p><h2 id="use-case">Use Case</h2><aside><p>💡 演示</p></aside><p>演示一下官方文档中的 RAG Q&amp;A <ahref="https://python.langchain.com/v0.2/docs/how_to/qa_chat_history_how_to/">Howto add chat history | 🦜️🔗 LangChain</a></p><h2 id="补充">补充</h2><h3 id="chat-langchain">Chat LangChain</h3><aside><p>💡 演示</p></aside><p>LangChain 的官网有一个有意思的产品</p><p><a href="https://chat.langchain.com/">Chat LangChain</a></p><p>可以和 LLM 交互来询问文档使用的问题（我理解是一个 RAGQ&amp;A），例如</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/Chat-LangChain.png" class="" title="Chat-LangChain"><h3 id="langchain-的-azureopenai-接入了-response_format-了吗">LangChain的 AzureOpenAI 接入了 <strong>response_format</strong> 了吗</h3><p>起码最新版的 <code>langchain-openai 0.1.14</code> 还没有接入</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/format.png" class="" title="format"><p>关于 <strong>response_format</strong></p><p><ahref="https://platform.openai.com/docs/api-reference/chat/create">OpenAIPlatform</a></p><blockquote><p>指定模型必须输出的格式对象，兼容 GPT-4 Turbo 和大于<code>gpt-3.5-turbo-1106</code> 版本的 GPT-3.5 Turbo 设置为<code>&#123;"type":"json_object"&#125;</code> 可以启用 JSON模式，从而保证模型生成的消息是有效的 JSON</p><p>需要注意： 当使用 JSON模式时必须在系统或用户消息中提供结构，否则模型可能会一直输出空白流直到达到token 限制，导致该请求长时间运行且看起来 “卡住” 还要注意如果<code>finish_reason="length"</code>，则消息内容可能会被部分切断，这表示生成超过了 <code>max_tokens</code>或会话超过了最大上下文长度</p><p><strong>type</strong> string Optional Defaults to text Must be oneof <code>text</code> or <code>json_object</code></p></blockquote><h1 id="langchain-integrations">LangChain Integrations</h1><p>LangChain同时提供了非常多的集成，所有定义的组件都提供了三方集成方便使用</p><p><ahref="https://platform.openai.com/docs/api-reference/chat/create">OpenAIPlatform</a></p><ul><li>LLM 90+<ul><li>OpenAI</li><li>AzureOpenAI</li><li>Llama</li><li>AWS Bedrock</li><li>Baidu Qianfan</li><li>QianWen</li><li>...</li></ul></li><li>Embedding models 75+</li><li>Document loaders 150+</li><li>Vector stores 100+</li><li>Retrievers 50+</li><li>Tool 70+</li><li>Toolkit 30+</li><li>…</li></ul><h1 id="langchain-hub">LangChain Hub</h1><p>LangChain Hub 是一个 Prompt 管理社区</p><ul><li>Prompt 分享</li><li>类似 Git commit 的机制，管理 Prompt 的版本</li><li>在 Prompt Playground 快速调试</li></ul><h1 id="langgraph">LangGraph</h1><h2 id="简介-1">简介</h2><p>LangGraph 是 LangChain社区下的新框架，主要用于构建<strong>基于状态的</strong>、<strong>多行动者</strong>的LLM 应用，应用于 Agent 和复合 Agent 工作流</p><p>其核心功能</p><ul><li>循环和分支：在应用程序中实现循环和条件</li><li>持续：每个步骤后自动保存状态，随时暂停、恢复流程图执行</li><li>人工循环：中断流程图执行以批准或编辑代理计划的下一个操作</li><li>流式传输支持：流式传输每个节点产生的输出（包括令牌流）</li><li>和 LangChain 集成：和 LangChain 及 LangSmith 无缝集成</li></ul><aside><p>🤔 我理解有了 LangGraph 后，LangChain 的一些实现就可以被切换到LangGraph 了 例如 LangChain 中早期 Agent 的实现</p><p>Chain 其实也可以使用 LangGraph 实现，相比 Chain 中的RouterRunnable，LangGraph 的条件边更加灵活</p></aside><h2 id="快速开始">快速开始</h2><aside><p>💡 演示</p></aside><p><ahref="https://www.notion.so/LangGraph-d5f3d7627b53404f94937a18eae47863?pvs=21">LangGraph- 快速开始</a></p><h2 id="补充-1">补充</h2><h3 id="agent-设计模式">Agent 设计模式</h3><p>LangGraph 的官方文档整理了当前常见的 Agent 设计思想，可以了解一下</p><p><ahref="https://langchain-ai.github.io/langgraph/tutorials/multi_agent/multi-agent-collaboration/">Collaboration(langchain-ai.github.io)</a></p><ul><li>RAG<ul><li>自适应 RAG（Adaptive）：查询、分析后执行自校正 RAG</li><li>代理 RAG（Agentic）</li><li>自校正 RAG（Corrective）：对检索的文档进行分级和评估</li><li>自我 RAG（Self-RAG）：对检索的文档进行分级和反思</li></ul></li><li>Agnet<ul><li>复合<ul><li>合作：分而治之（LLM 职责拆分）</li><li>监督委派：使用 LLM 来协调不同的代理（加一层）</li><li>分级团队：工作分层分布（再加一层）</li></ul></li><li>计划<ul><li>计划执行（Plan-and-Execute）：先拆分计划再执行</li><li>无观察推理（Reasoning without Observation）：由下一步 Action进行观察</li><li>LLM 编译器（LLMCompiler）：基于 Planner 和 Jointer，让 LLM 生成一个DAG 来处理可以并发执行的任务提高效率</li></ul></li><li>反思 &amp; 评审<ul><li>基础反思（Basic Reflection）：强调观察、评估后再采取行动</li><li>反射（Reflexion）：强调矫正，反思包括有没有漏掉（missing）或者重复（Superfluous），然后回答问题，回答之后再有针对性的修改（Revise）</li><li>搜索树（Tree Search）：ToT 对树状结果进行打分</li><li>自发现（Self-Discover）：选择反省方式、进行反省、反省后重新输出</li></ul></li></ul></li></ul><p>推荐一下 LangGraph 画的图，非常便于理解</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/Agent1.png" class="" title="Agent1"><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/Agent2.png" class="" title="Agent2"><h3 id="langgraph-cloud">LangGraph <strong>Cloud</strong></h3><p>截止目前 LangGraph Cloud 是一款仅限邀请阶段的开源付费产品</p><ul><li>部署和托管 LangGraph 应用程序的托管服务，快速部署服务提供 API</li><li>与 LangSmith 无缝集成</li></ul><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8/LangGraoh%20Cloud.gif" class="" title="LangGraoh Cloud"><h1 id="langsmith">LangSmith</h1><aside><p>💡 演示</p></aside><p>LangSmith 的核心能力 <a href="https://smith.langchain.com/">LangSmith(langchain.com)</a></p><ul><li>Tracing</li><li>数据集管理</li><li>评估</li><li>人工反馈</li><li>监控 &amp; 自动化</li><li>Prompt 管理 &amp; 简便调试</li></ul><h1 id="参考">参考</h1><p><a href="https://python.langchain.com/v0.2/docs/how_to/">How-toguides | 🦜️🔗 LangChain</a></p><p><ahref="https://python.langchain.com/v0.2/docs/introduction/">Introduction| 🦜️🔗 LangChain</a></p><p><a href="https://langchain-ai.github.io/langgraph/">🦜🕸️LangGraph(langchain-ai.github.io)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/">LangChain</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain/">LangChain</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E7%94%9F%E6%80%81%E5%85%A5%E9%97%A8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>jenv 工具使用</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/jenv%20%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/jenv%20%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html</guid>
      <pubDate>Mon, 08 Jul 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;jenv-工具使用&quot;&gt;jenv 工具使用&lt;/h1&gt;
&lt;p&gt;SpringBoot 3 和 Spring 6 的升级对 Java
版本有了更高的要求，特别是现在基于 Spring
生态的开源仓库基本都基于新版本，所以往往需要维护多版本的 Java&lt;/p&gt;
&lt;p&gt;IDEA 可以通过 &lt;code&gt;Platform Settings&lt;/code&gt; 中的 &lt;code&gt;SDKs&lt;/code&gt;
进行配置，而如果需要使用命令行如 &lt;code&gt;mvn&lt;/code&gt;
等操作会比较麻烦，需要切换使用的 Java 版本（配置 profile
是一种思路，甚至 maven 可以实现不同的 module 使用不同的 Java
版本进行编译，如果没有这么精细化的需求在配置文件上操作我认为是有点繁琐的）&lt;/p&gt;
&lt;p&gt;这里可以使用 &lt;strong&gt;jenv&lt;/strong&gt; 工具对 Java 环境进行切换&lt;/p&gt;
&lt;h1 id=&quot;安装-配置&quot;&gt;安装 &amp;amp; 配置&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="jenv-工具使用">jenv 工具使用</h1><p>SpringBoot 3 和 Spring 6 的升级对 Java版本有了更高的要求，特别是现在基于 Spring生态的开源仓库基本都基于新版本，所以往往需要维护多版本的 Java</p><p>IDEA 可以通过 <code>Platform Settings</code> 中的 <code>SDKs</code>进行配置，而如果需要使用命令行如 <code>mvn</code>等操作会比较麻烦，需要切换使用的 Java 版本（配置 profile是一种思路，甚至 maven 可以实现不同的 module 使用不同的 Java版本进行编译，如果没有这么精细化的需求在配置文件上操作我认为是有点繁琐的）</p><p>这里可以使用 <strong>jenv</strong> 工具对 Java 环境进行切换</p><h1 id="安装-配置">安装 &amp; 配置</h1><p>可以参考 Github https://github.com/jenv/jenv</p><p>我使用的 homebrew 进行安装https://formulae.brew.sh/formula/jenv#default</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install jenv</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">To</span> activate jenv, <span class="built_in">add</span> the following <span class="keyword">to</span> your shell<span class="built_in"> profile </span>e.g. ~/.profile</span><br><span class="line"><span class="keyword">or</span> ~/.zshrc:</span><br><span class="line">    <span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="string">&quot;<span class="variable">$HOME</span>/.jenv/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    eval <span class="string">&quot;<span class="variable">$(jenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>安装和配置后可以运行 <code>jenv doctor</code> 进行检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jenv doctor</span><br><span class="line">[OK]No JAVA_HOME <span class="built_in">set</span></span><br><span class="line">[OK]Java binaries <span class="keyword">in</span> path are jenv shims</span><br><span class="line">[OK]Jenv is correctly loaded</span><br></pre></td></tr></table></figure><p>使用 <code>jenv versions</code>可以查看所有的环境，刚进行安装未进行任何配置时应该会有一个默认的<code>system</code> 配置，可以使用 <code>jenv versions --verbose</code>查看详细信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ jenv versions --verbose</span><br><span class="line"></span><br><span class="line">system</span><br><span class="line"></span><br><span class="line">         --&gt; /Users/users</span><br></pre></td></tr></table></figure><p>这里有一个坑，默认的 system 并没有准确识别当前的 Java环境，有一个对应的 issue</p><p>https://github.com/jenv/jenv/issues/422</p><p>而对于 system 我还没找到手动配置方式，我觉得不用特别纠结，手动配置非system 环境也不是不可以</p><h1 id="操作">操作</h1><h2 id="添加环境">添加环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jenv add <span class="built_in">alias</span> /path/to/javaHome</span><br></pre></td></tr></table></figure><ul><li>alias 是给环境起的别名，到时切换就根据起的别名进行标识；如果不填jenv 会默认配置别名（这里会有一个 warning，jenv 不希望使用alias，我觉得不重要，社区现在也认为这个警告后期可能会废弃）</li><li>/path/to/javaHome 是 Java Home 的路径，例如<code>/Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/Home</code></li></ul><h2 id="查看-java-路径">查看 Java 路径</h2><p>使用 <code>/usr/libexec/java_home</code>可以查找并列出系统上安装的所有 Java 开发工具包（JDK）或 Java运行时环境（JRE）的安装路径，显示所有版本中的最新版本</p><p>加上 <code>-V</code> 参数可以显示所有的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/libexec/java_home -V</span><br><span class="line"></span><br><span class="line">Matching Java Virtual Machines (5):</span><br><span class="line">    17.0.11 (arm64) <span class="string">&quot;JetBrains s.r.o.&quot;</span> - <span class="string">&quot;JBR-17.0.11+1-1312.2-nomod 17.0.11&quot;</span> /Users/users/Library/Java/JavaVirtualMachines/jbr-17.0.11/Contents/Home</span><br><span class="line">    17.0.9 (arm64) <span class="string">&quot;JetBrains s.r.o.&quot;</span> - <span class="string">&quot;JBR-17.0.9+8-1166.2-nomod 17.0.9&quot;</span> /Users/users/Library/Java/JavaVirtualMachines/jbr-17.0.9/Contents/Home</span><br><span class="line">    1.8.401.10 (arm64) <span class="string">&quot;Oracle Corporation&quot;</span> - <span class="string">&quot;Java&quot;</span> /Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br><span class="line">    1.8.0_401 (arm64) <span class="string">&quot;Oracle Corporation&quot;</span> - <span class="string">&quot;Java SE 8&quot;</span> /Library/Java/JavaVirtualMachines/jdk-1.8.jdk/Contents/Home</span><br><span class="line">    1.8.0_241 (x86_64) <span class="string">&quot;Oracle Corporation&quot;</span> - <span class="string">&quot;Java SE 8&quot;</span> /Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home</span><br><span class="line">/Users/guorunze/Library/Java/JavaVirtualMachines/jbr-17.0.11/Contents/Home</span><br></pre></td></tr></table></figure><p>这里就可以拿到 Home 的路径</p><h2 id="查看环境">查看环境</h2><p><code>jenv versions</code> 查看所有配置的环境</p><p><code>jenv version</code> 查看当前激活的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ jenv versions</span><br><span class="line">  system</span><br><span class="line">* Java17 (<span class="built_in">set</span> by /Users/users/.jenv/version)</span><br><span class="line">  Java8</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ jenv version</span><br><span class="line">Java17 (<span class="built_in">set</span> by /Users/users/.jenv/version)</span><br></pre></td></tr></table></figure><h2 id="切换">切换</h2><p>jenv 提供了三种级别的切换操作，切换后就可以修改当前使用的 Java环境了</p><ul><li>global</li><li>local</li><li>shell</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ jenv global <span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line">$ jenv <span class="built_in">local</span> <span class="built_in">alias</span></span><br><span class="line"></span><br><span class="line">$ jenv shell <span class="built_in">alias</span></span><br></pre></td></tr></table></figure><p>alias 为 add 环境时设置的别名，即在 versions 中展示的 name</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ jenv version</span><br><span class="line">Java17 (<span class="built_in">set</span> by /Users/users/.jenv/version)</span><br><span class="line"></span><br><span class="line">$ jenv global Java8</span><br><span class="line"></span><br><span class="line">$ jenv version</span><br><span class="line">Java8 (<span class="built_in">set</span> by /Users/users/.jenv/version)</span><br></pre></td></tr></table></figure><h2 id="oh-my-zsh-设置">oh-my-zsh 设置</h2><p>为了方便使用可以对 <code>.zshrc</code> 文件进行配置，我配置了function 和 alias</p><p>function</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">jenv_global_version</span></span>() &#123;</span><br><span class="line"><span class="built_in">local</span> jenvName=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">jenv global <span class="variable">$&#123;jenvName&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\033[32mJava global version 切换\033[0m [\033[36m<span class="variable">$&#123;jenvName&#125;</span>\033[0m]&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> j8=<span class="string">&#x27;jenv_global_version Java8&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> j17=<span class="string">&#x27;jenv_global_version Java17&#x27;</span></span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ j17</span><br><span class="line">Java global version 切换 [Java17]</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p>https://github.com/jenv/jenv</p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/">杂项</category>
      
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E6%9D%82%E9%A1%B9/jenv%20%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LangGraph - Plan-and-Execute Agent</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent.html</guid>
      <pubDate>Wed, 26 Jun 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;基于 LangGraph，可以轻松实现不同设计模式的 Agent、RAG 等应用&lt;/p&gt;
&lt;p&gt;这里以 &lt;strong&gt;Plan-and-Execute&lt;/strong&gt;
为例，继续深入体验一下其功能&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是-plan-and-execute&quot;&gt;什么是 Plan and Execute&lt;/h1&gt;
&lt;img src=&quot;/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent/plan-and-execute.png&quot; class title=&quot;plan-and-execute&quot;&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>基于 LangGraph，可以轻松实现不同设计模式的 Agent、RAG 等应用</p><p>这里以 <strong>Plan-and-Execute</strong>为例，继续深入体验一下其功能</p><p></br></p><h1 id="什么是-plan-and-execute">什么是 Plan and Execute</h1><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent/plan-and-execute.png" class="" title="plan-and-execute"><p>计划执行 Agent 和核心思想是</p><ul><li>首先进行多计划的拆分</li><li>一次一个项目地完成这个计划</li><li>完成特定任务后，可以重新查看计划并根据需要进行修改</li></ul><p>和 ReAct Agent 相比优势在于</p><ul><li>明确的长期规划（但即使是真正强大的 LLM 也可能难以应对）</li><li>能够在执行步骤中使用较小 / 较弱的模型，在计划步骤中仅使用较大 /较好的模型</li></ul><p></br></p><h1 id="coding">Coding</h1><h2 id="定义工具">定义工具</h2><p>环境参数的配置就不赘述了，这里依然使用维基百科作为工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())</span><br><span class="line">tools = [wikipedia]</span><br></pre></td></tr></table></figure><p></br></p><h2 id="定义执行代理">定义执行代理</h2><p>创建要用于执行任务的执行代理</p><p>这里针对不同的角色使用的是同一个代理，其实可以分别使用不同执行代理在实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">llm = Azure.chat_model_4o</span><br><span class="line">agent_executor = create_react_agent(llm, tools, messages_modifier=prompt)</span><br></pre></td></tr></table></figure><p>另外注意这里的 <code>create_react_agent</code> 来自<code>langgraph.prebuilt</code> ，使用了一个预构建的 Agent</p><p><em>所以我理解，这里是外面一个 Agent 套里面一个 Agent，将预构建的这个Agent 作为一个节点内的逻辑，在后面步骤可以看到，这个节点的 name 为agent</em></p><p></br></p><h2 id="定义状态">定义状态</h2><p>从定义该代理的状态（流程轨迹 track）开始</p><ul><li>首先，跟踪当前计划的轨迹，将其表示为字符串列表</li><li>接下来，应该跟踪以前执行的步骤，让我们将其表示为元组列表（这些元组将包含步骤，然后包含结果）</li><li>最后，需要有一些状态来表示最终响应和原始输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">List</span>, <span class="type">Tuple</span>, TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlanExecute</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line">    plan: <span class="type">List</span>[<span class="built_in">str</span>] <span class="comment"># 计划轨迹</span></span><br><span class="line">    past_steps: Annotated[<span class="type">List</span>[<span class="type">Tuple</span>], operator.add] <span class="comment"># 已经完成的步骤</span></span><br><span class="line">    response: <span class="built_in">str</span> <span class="comment"># 响应结果</span></span><br></pre></td></tr></table></figure><p></br></p><h2 id="计划步骤">计划步骤</h2><p>创建一个计划步骤，它调用 LLM 来获取结构化返回</p><p><code>Plan</code> 结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Plan</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Plan to follow in future&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    steps: <span class="type">List</span>[<span class="built_in">str</span>] = Field(</span><br><span class="line">        description=<span class="string">&quot;different steps to follow, should be in sorted order&quot;</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>组装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">planner_prompt = ChatPromptTemplate.from_messages(</span><br><span class="line">    [</span><br><span class="line">        (</span><br><span class="line">            <span class="string">&quot;system&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;&quot;For the given objective, come up with a simple step by step plan. \</span></span><br><span class="line"><span class="string">This plan should involve individual tasks, that if executed correctly will yield the correct answer. Do not add any superfluous steps. \</span></span><br><span class="line"><span class="string">The result of the final step should be the final answer. Make sure that each step has all the information needed - do not skip steps.&quot;&quot;&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        (<span class="string">&quot;placeholder&quot;</span>, <span class="string">&quot;&#123;messages&#125;&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line">planner = planner_prompt | llm.with_structured_output(Plan)</span><br></pre></td></tr></table></figure><p>调用验证一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(planner.invoke(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;苹果的股票在未来五年内还会继续上涨吗?&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plan(steps=[&#x27;收集苹果公司过去五年的财务数据和股价走势。&#x27;, &#x27;分析苹果公司的财务健康状况，包括收入、利润、现金流等关键指标。&#x27;, &#x27;研究苹果公司在未来五年的发展计划和战略，包括新产品发布、市场扩展等。&#x27;, &#x27;评估全球经济环境和科技行业的整体趋势对苹果公司的影响。&#x27;, &#x27;综合以上信息，预测苹果公司未来五年的股价走势。&#x27;])</span></span><br></pre></td></tr></table></figure><p>这里可以看到步骤拆分的结果</p><ol type="1"><li>收集苹果公司过去五年的财务数据和股价走势</li><li>分析苹果公司的财务健康状况，包括收入、利润、现金流等关键指标</li><li>研究苹果公司在未来五年的发展计划和战略，包括新产品发布、市场扩展等</li><li>评估全球经济环境和科技行业的整体趋势对苹果公司的影响</li><li>综合以上信息，预测苹果公司未来五年的股价走势</li></ol><p></br></p><h2 id="重新计划">重新计划</h2><p>继续创建一个步骤，根据上一步的结果重新执行计划</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Response</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Response to user.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    response: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Act</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Action to perform.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    action: <span class="type">Union</span>[Response, Plan] = Field(</span><br><span class="line">        description=<span class="string">&quot;Action to perform. If you want to respond to user, use Response. &quot;</span></span><br><span class="line">        <span class="string">&quot;If you need to further use tools to get the answer, use Plan.&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">replanner_prompt = ChatPromptTemplate.from_template(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;For the given objective, come up with a simple step by step plan. \</span></span><br><span class="line"><span class="string">This plan should involve individual tasks, that if executed correctly will yield the correct answer. Do not add any superfluous steps. \</span></span><br><span class="line"><span class="string">The result of the final step should be the final answer. Make sure that each step has all the information needed - do not skip steps.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your objective was this:</span></span><br><span class="line"><span class="string">&#123;input&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your original plan was this:</span></span><br><span class="line"><span class="string">&#123;plan&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">You have currently done the follow steps:</span></span><br><span class="line"><span class="string">&#123;past_steps&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Update your plan accordingly. If no more steps are needed and you can return to the user, then respond with that. Otherwise, fill out the plan. Only add steps to the plan that still NEED to be done. Do not return previously done steps as part of the plan.&quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">replanner = replanner_prompt | ChatOpenAI(</span><br><span class="line">    model=<span class="string">&quot;gpt-4o&quot;</span>, temperature=<span class="number">0</span></span><br><span class="line">).with_structured_output(Act)</span><br></pre></td></tr></table></figure><p></br></p><h2 id="创建流程图">创建流程图</h2><p>最后将这些节点组装起来、定义条件边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">execute_step</span>(<span class="params">state: PlanExecute</span>):</span><br><span class="line">    plan = state[<span class="string">&quot;plan&quot;</span>]</span><br><span class="line">    plan_str = <span class="string">&quot;\n&quot;</span>.join(<span class="string">f&quot;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">&#123;step&#125;</span>&quot;</span> <span class="keyword">for</span> i, step <span class="keyword">in</span> <span class="built_in">enumerate</span>(plan))</span><br><span class="line">    task = plan[<span class="number">0</span>]</span><br><span class="line">    task_formatted = <span class="string">f&quot;&quot;&quot;For the following plan:</span></span><br><span class="line"><span class="string"><span class="subst">&#123;plan_str&#125;</span>\n\nYou are tasked with executing step <span class="subst">&#123;<span class="number">1</span>&#125;</span>, <span class="subst">&#123;task&#125;</span>.&quot;&quot;&quot;</span></span><br><span class="line">    agent_response = <span class="keyword">await</span> agent_executor.ainvoke(</span><br><span class="line">        &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;user&quot;</span>, task_formatted)]&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;past_steps&quot;</span>: [(task, agent_response[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content)],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">plan_step</span>(<span class="params">state: PlanExecute</span>):</span><br><span class="line">    plan = <span class="keyword">await</span> planner.ainvoke(&#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;user&quot;</span>, state[<span class="string">&quot;input&quot;</span>])]&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;plan&quot;</span>: plan.steps&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">replan_step</span>(<span class="params">state: PlanExecute</span>):</span><br><span class="line">    output = <span class="keyword">await</span> replanner.ainvoke(state)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(output.action, Response):</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;response&quot;</span>: output.action.response&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;plan&quot;</span>: output.action.steps&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_end</span>(<span class="params">state: PlanExecute</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;agent&quot;</span>, <span class="string">&quot;__end__&quot;</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;response&quot;</span> <span class="keyword">in</span> state <span class="keyword">and</span> state[<span class="string">&quot;response&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__end__&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;agent&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line">workflow = StateGraph(PlanExecute)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the plan node</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;planner&quot;</span>, plan_step)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the execution step</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, execute_step)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a replan node</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;replan&quot;</span>, replan_step)</span><br><span class="line"></span><br><span class="line">workflow.set_entry_point(<span class="string">&quot;planner&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># From plan we go to agent</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;planner&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># From agent, we replan</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;agent&quot;</span>, <span class="string">&quot;replan&quot;</span>)</span><br><span class="line"></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;replan&quot;</span>,</span><br><span class="line">    <span class="comment"># Next, we pass in the function that will determine which node is called next.</span></span><br><span class="line">    should_end,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Finally, we compile it!</span></span><br><span class="line"><span class="comment"># This compiles it into a LangChain Runnable,</span></span><br><span class="line"><span class="comment"># meaning you can use it as you would any other runnable</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p>最终的流程图</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent/graph.png" class="" title="graph"><p></br></p><h1 id="使用">使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    config = &#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">20</span>&#125;</span><br><span class="line">    inputs = &#123;</span><br><span class="line">        <span class="string">&quot;input&quot;</span>: <span class="string">&quot;苹果的股票在未来五年内还会继续上涨吗?&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">for</span> event <span class="keyword">in</span> app.astream(inputs, config=config):</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> event.items():</span><br><span class="line">            <span class="keyword">if</span> k != <span class="string">&quot;__end__&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(v)</span><br><span class="line"></span><br><span class="line">asyncio.run(run())</span><br></pre></td></tr></table></figure><p></br></p><h1 id="改进">改进</h1><p>上面已经成功构建出一个 Plan-and-Execute Agent</p><p>实现上存在一个已知问题，每个任务仍然是按顺序执行的，这意味着即使某些任务可以并行执行（即它们不依赖于彼此的结果，可以同时开始），但由于设计的原因，它们仍然被串行地添加到总执行时间中</p><p>可以思考使用 DAG（Directed Acyclic Graph有向无环图），而不是常规的列表来表示任务的串并行关系</p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/">LangGraph</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain/">LangChain</category>
      
      <category domain="https://www.kugaaa.com/tags/LangGraph/">LangGraph</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20Plan-and-Execute%20Agent.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LangGraph - 快速开始</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html</guid>
      <pubDate>Tue, 25 Jun 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;介绍&quot;&gt;介绍&lt;/h1&gt;
&lt;p&gt;LangGraph 是 LangChain
社区下的新框架，主要用于构建&lt;strong&gt;基于状态的&lt;/strong&gt;、&lt;strong&gt;多行动者&lt;/strong&gt;的
LLM 应用，应用于 Agent 和复合 Agent 工作流&lt;/p&gt;
&lt;p&gt;提供了对应用程序的流和状态的细粒度控制&lt;/p&gt;
&lt;aside&gt;
💡 开始了解 Agent 就在思考如何设计出一个顶层的抽象，能够让不同形式的
Agent 拥有结构化的构建形式，因为不同的 Agent 在流程上差异挺大
现在看起来，LangGraph 的目的就是要做到这种抽象
&lt;/aside&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="介绍">介绍</h1><p>LangGraph 是 LangChain社区下的新框架，主要用于构建<strong>基于状态的</strong>、<strong>多行动者</strong>的LLM 应用，应用于 Agent 和复合 Agent 工作流</p><p>提供了对应用程序的流和状态的细粒度控制</p><aside>💡 开始了解 Agent 就在思考如何设计出一个顶层的抽象，能够让不同形式的Agent 拥有结构化的构建形式，因为不同的 Agent 在流程上差异挺大现在看起来，LangGraph 的目的就是要做到这种抽象</aside><p></br></p><p>其核心功能</p><ul><li>循环和分支：在应用程序中实现循环和条件</li><li>持续：每个步骤后自动保存状态，随时暂停、恢复流程图执行</li><li>人工循环：中断流程图执行以批准或编辑代理计划的下一个操作</li><li>流式传输支持：流式传输每个节点产生的输出（包括令牌流）</li><li>和 LangChain 集成：和 LangChain 及 LangSmith 无缝集成</li></ul><p></br></p><p>实现一个流程图的步骤</p><ol type="1"><li>初始化 LLM 和工具</li><li>初始化流程图中的状态（state）</li><li>定义流程图的节点（node）</li><li>定义流程图的顶点（entry point）和边（graph）</li><li>构建（compile）流程图</li><li>执行</li></ol><h1 id="快速开始">快速开始</h1><p>这里使用官方文档中的 <strong>Tutorials -Introduction</strong> 内容，来简单介绍 LangGraph的使用，个别地方会进行修改</p><p>这里只记录代码部分，官方文档中的细节解释、验证、LangSmith上的日志观察等内容因为太多，可以直接参考官方文档</p><p>在快速开始中将会基于 LangGraph 构建一个聊天机器人，它能够：</p><ul><li>通过搜索网络回答常见问题</li><li>在通话中保持通话状态</li><li>将复杂的查询发送给人类进行审查</li><li>使用自定义状态控制其行为</li><li>回放并探索其他对话路径</li></ul><p>将从一个基本的聊天机器人开始，逐步添加更复杂的功能，在此过程中引入关键的LangGraph 概念</p><p></br></p><h2 id="配置">配置</h2><p>安装相应的包（LangChain 就不在这里列举了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U langgraph langsmith</span><br></pre></td></tr></table></figure><p>设置对应的 API key；这里我没有使用官方教程里的<code>langchain_anthropic</code> ，直接使用的 LangChain 中的<code>AzureChatOpenAI</code></p><p>所以这里认为只需要配置 LangSmith 相关的 key 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.environ[<span class="string">&quot;ANTHROPIC_API_KEY&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;LANGCHAIN_TRACING_V2&quot;</span>] = <span class="string">&quot;true&quot;</span></span><br><span class="line">os.environ[<span class="string">&quot;LANGCHAIN_PROJECT&quot;</span>] = <span class="string">&quot;LangGraph Tutorial&quot;</span></span><br></pre></td></tr></table></figure><p></br></p><h2 id="part.1-构建一个基础的聊天机器人">Part.1构建一个基础的聊天机器人</h2><h3 id="状态机">状态机</h3><p>首先创建一个 <code>StateGraph</code> ，一个 <code>StateGraph</code>对象会将聊天机器人的结构定义为状态机</p><p>我们将添加节点来表示 LLM可以调用的函数，并添加边来指定机器人应该如何在这些函数之间转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="comment"># Messages have the type &quot;list&quot;. The `add_messages` function</span></span><br><span class="line">    <span class="comment"># in the annotation defines how this state key should be updated</span></span><br><span class="line">    <span class="comment"># (in this case, it appends messages to the list, rather than overwriting them)</span></span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br></pre></td></tr></table></figure><p>首先定义了一个 <code>TypedDict</code> ，它只有一个 key<code>messages</code> ，<code>messages</code> 使用<code>add_messages</code> 函数进行注释，该函数告诉 LangGraph将新消息添加到现有列表中，而不是进行覆盖</p><p>现在我们的流程图知道两件事：</p><ol type="1"><li>我们定义的每个节点都将接收当前状态作为输入，并返回更新该状态的值</li><li>消息将附加到当前列表中，而不是直接覆盖。这是通过注释语法中预先构建的<code>add_messages</code> 函数进行设置的</li></ol><h3 id="聊天机器人节点">聊天机器人节点</h3><p>节点代表工作单元，它们通常是常规的 python 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_anthropic <span class="keyword">import</span> ChatAnthropic</span><br><span class="line"><span class="keyword">import</span> Azure</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是我的实现</span></span><br><span class="line"><span class="comment"># 只要提供出一个 LLM 即可</span></span><br><span class="line">llm = Azure.chat_model_4o</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [llm.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The first argument is the unique node name</span></span><br><span class="line"><span class="comment"># The second argument is the function or object that will be called whenever</span></span><br><span class="line"><span class="comment"># the node is used.</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br></pre></td></tr></table></figure><p><code>chatbot</code> 节点功能如何将当前状态作为输入并返回更新的<code>messages</code>，这是所有 LangGraph 节点函数的基本模式</p><p>我们的 <code>State</code> 中的 <code>add_messages</code> 函数将把 LLM的响应消息附加到该状态中已经存在的任何消息上</p><h3 id="添加顶点">添加顶点</h3><p>接下来，添加一个入口点<code>entry</code>，这告诉我们的流程图每次运行时从哪里开始工作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)</span><br></pre></td></tr></table></figure><p>类似的添加一个终点 <code>finish</code>，这指示流程图 <strong>any timethis node is run, you can exit.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph_builder.set_finish_point(<span class="string">&quot;chatbot&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="构建">构建</h3><p>最后能够运行我们的图，在图形生成器上调用 <code>compile</code></p><p>这将创建一个 <code>CompiledGraph</code>，我们就可以进行<code>invoke</code> 调用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p>最终的流程图结构应该为</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/1.png" class="" title="Untitled"><h3 id="run">Run</h3><p>最后使用 <code>invoke</code> 或 <code>stream</code> 方法进行执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;User: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_input.lower() <span class="keyword">in</span> [<span class="string">&quot;quit&quot;</span>, <span class="string">&quot;exit&quot;</span>, <span class="string">&quot;q&quot;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: (<span class="string">&quot;user&quot;</span>, user_input)&#125;):</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> event.values():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Assistant:&quot;</span>, value[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content)</span><br></pre></td></tr></table></figure><p></br></p><h2 id="part.2-使用工具增强">Part.2 使用工具增强</h2><p>这里我们使用维基百科的查询工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.tools <span class="keyword">import</span> WikipediaQueryRun</span><br><span class="line"><span class="keyword">from</span> langchain_community.utilities <span class="keyword">import</span> WikipediaAPIWrapper</span><br><span class="line"></span><br><span class="line">wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())</span><br><span class="line">tools = [wikipedia]</span><br></pre></td></tr></table></figure><h3 id="llm-绑定工具">LLM 绑定工具</h3><p>我们需要将工具先和 LLM 绑定，即将工具调用以 JSON schema 的方式请求LLM</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model = Azure.chat_model_4o</span><br><span class="line">llm = model.bind_tools(tools)</span><br></pre></td></tr></table></figure><h3 id="定义-tool-节点">定义 Tool 节点</h3><p>这里将自己实现一个对工具执行的节点，其实这个操作 LangGraph是有预先构建好的实现的，但是这里文档为了让其深入了解原理，先手动实现，后面会进行替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> ToolMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicToolNode</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A node that runs the tools requested in the last AIMessage.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, tools: <span class="built_in">list</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.tools_by_name = &#123;tool.name: tool <span class="keyword">for</span> tool <span class="keyword">in</span> tools&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, inputs: <span class="built_in">dict</span></span>):</span><br><span class="line">        <span class="keyword">if</span> messages := inputs.get(<span class="string">&quot;messages&quot;</span>, []):</span><br><span class="line">            message = messages[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;No message found in input&quot;</span>)</span><br><span class="line">        outputs = []</span><br><span class="line">        <span class="keyword">for</span> tool_call <span class="keyword">in</span> message.tool_calls:</span><br><span class="line">            tool_result = self.tools_by_name[tool_call[<span class="string">&quot;name&quot;</span>]].invoke(</span><br><span class="line">                tool_call[<span class="string">&quot;args&quot;</span>]</span><br><span class="line">            )</span><br><span class="line">            outputs.append(</span><br><span class="line">                ToolMessage(</span><br><span class="line">                    content=json.dumps(tool_result),</span><br><span class="line">                    name=tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                    tool_call_id=tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: outputs&#125;</span><br><span class="line"></span><br><span class="line">tool_node = BasicToolNode(tools=[tool])</span><br><span class="line">graph_builder.add_node(<span class="string">&quot;tools&quot;</span>, tool_node)</span><br></pre></td></tr></table></figure><p>实现的基本逻辑是，从入参中获取消息，获取最后一条消息，取出<code>tool_calls</code> 的内容后进行调用</p><h3 id="定义条件边">定义条件边</h3><p>当定义了节点后，接下来需要定义 <code>conditional_edges</code></p><p>边将控制流从一个节点路由到下一个节点，这些函数接收当前图形状态，并返回一个字符串或字符串列表，指示下一个调用哪个节点</p><p>下面会定义一个路由器函数，用于检查聊天机器人的输出中的<code>tool_calls</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route_tools</span>(<span class="params"></span></span><br><span class="line"><span class="params">    state: State,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;__end__&quot;</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Use in the conditional_edge to route to the ToolNode if the last message</span></span><br><span class="line"><span class="string">    has tool calls. Otherwise, route to the end.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(state, <span class="built_in">list</span>):</span><br><span class="line">        ai_message = state[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">elif</span> messages := state.get(<span class="string">&quot;messages&quot;</span>, []):</span><br><span class="line">        ai_message = messages[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;No messages found in input state to tool_edge: <span class="subst">&#123;state&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(ai_message, <span class="string">&quot;tool_calls&quot;</span>) <span class="keyword">and</span> <span class="built_in">len</span>(ai_message.tool_calls) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;__end__&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The `tools_condition` function returns &quot;tools&quot; if the chatbot asks to use a tool, and &quot;__end__&quot; if</span></span><br><span class="line"><span class="comment"># it is fine directly responding. This conditional routing defines the main agent loop.</span></span><br><span class="line">graph_builder.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;chatbot&quot;</span>,</span><br><span class="line">    route_tools,</span><br><span class="line">    <span class="comment"># The following dictionary lets you tell the graph to interpret the condition&#x27;s outputs as a specific node</span></span><br><span class="line">    <span class="comment"># It defaults to the identity function, but if you</span></span><br><span class="line">    <span class="comment"># want to use a node named something else apart from &quot;tools&quot;,</span></span><br><span class="line">    <span class="comment"># You can update the value of the dictionary to something else</span></span><br><span class="line">    <span class="comment"># e.g., &quot;tools&quot;: &quot;my_tools&quot;</span></span><br><span class="line">    &#123;<span class="string">&quot;tools&quot;</span>: <span class="string">&quot;tools&quot;</span>, <span class="string">&quot;__end__&quot;</span>: <span class="string">&quot;__end__&quot;</span>&#125;,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># Any time a tool is called, we return to the chatbot to decide the next step</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p>如果没有进行任何工具调用，我们的函数将返回 <code>__end__</code>字符串，当流程图需要切换到 <code>__end__</code>时，它没有其他任务要完成，所以停止执行</p><p>因为条件可以返回 <code>__end__</code>，所以这次不需要显式设置<code>finish_point</code></p><p>最终的流程图应该为</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/2.png" class="" title="Untitled"><p></br></p><h2 id="part.3-添加记忆">Part.3 添加记忆</h2><p>上面实现的流程图其调用都是无状态的</p><p>LangGraph 通过持久的检查点（persistentcheckpointing）来解决这个问题，需要提供一个 <code>checkpointer</code>并且在调用时提供 <code>thread_id</code></p><p>checkpointing比记忆更加强大，它可以实现随时保存和恢复复杂的状态，用于错误恢复、人工循环工作流、时间旅行交互等</p><h3 id="创建-sqlitesaver-检查点">创建 SqliteSaver 检查点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.sqlite <span class="keyword">import</span> SqliteSaver</span><br><span class="line"></span><br><span class="line">memory = SqliteSaver.from_conn_string(<span class="string">&quot;:memory:&quot;</span>)</span><br></pre></td></tr></table></figure><p>这里也可以替换为其他实现</p><h3 id="提供-checkpointer-编译">提供 checkpointer 编译</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意这里的 checkpointer 入参</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br></pre></td></tr></table></figure><p>此时流程图应该为</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/3.png" class="" title="Untitled"><h3 id="run-1">Run</h3><p>根据官方文档，调用时需要传参 <code>thread_id</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The only difference is we change the `thread_id` here to &quot;2&quot; instead of &quot;1&quot;</span></span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;user&quot;</span>, user_input)]&#125;,</span><br><span class="line">    <span class="comment"># here</span></span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><h3 id="get-state">get state</h3><p>可以通过 <code>config</code> 随时检查给定配置的流程图状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snapshot = graph.get_state(config)</span><br><span class="line">snapshot</span><br><span class="line">snapshot.<span class="built_in">next</span>  <span class="comment"># (since the graph ended this turn, `next` is empty. If you fetch a state from within a graph invocation, next tells which node will execute next)</span></span><br></pre></td></tr></table></figure><p>上面的快照包含当前状态值、相应的配置以及要处理的下一个节点</p><p>在我们的例子中，流程图已经达到 <code>__end__</code> 状态，所以<code>next</code> 为空</p><p></br></p><h2 id="part.4-循环中人类介入">Part.4 循环中人类介入</h2><p>代理并不完全可靠，所以在某些节点需要人工介入</p><p>LangGraph 提供了多种方式支持人工循环工作流<code>human-in-the-loop</code>，在本节中将使用 LangGraph 的<code>interrupt_before</code> 功能来始终中断工具节点</p><h3 id="前中断构建">前中断构建</h3><p>编译流程图，指定在操作节点之前中断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph = graph_builder.<span class="built_in">compile</span>(</span><br><span class="line">    checkpointer=memory,</span><br><span class="line">    <span class="comment"># This is new!</span></span><br><span class="line">    interrupt_before=[<span class="string">&quot;tools&quot;</span>],</span><br><span class="line">    <span class="comment"># Note: can also interrupt __after__ actions, if desired.</span></span><br><span class="line">    <span class="comment"># interrupt_after=[&quot;tools&quot;]</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_input = <span class="string">&quot;I&#x27;m learning LangGraph. Could you do some research on it for me?&quot;</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"><span class="comment"># The config is the **second positional argument** to stream() or invoke()!</span></span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;user&quot;</span>, user_input)]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>获取下状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snapshot = graph.get_state(config)</span><br><span class="line">snapshot.<span class="built_in">next</span></span><br><span class="line"><span class="comment"># (&#x27;action&#x27;,)</span></span><br></pre></td></tr></table></figure><p>不同于之前，这次下一个状态为<code>action</code>，我们已经成功拦截在了工具执行之前</p><h3 id="继续">继续</h3><p>接下来继续流程</p><p>传入 None只会让流程继续从停止的位置进行，不会向状态添加任何新内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `None` will append nothing new to the current state, letting it resume as if it had never been interrupted</span></span><br><span class="line">events = graph.stream(<span class="literal">None</span>, config, stream_mode=<span class="string">&quot;values&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>最终实现了使用了一个中断将人工在环执行添加到聊天机器人中</p><p>允许在需要时进行人工监督和干预，添加了一个检查指针，流程图可以无限期地暂停，并在任何时候恢复，就像什么都没有发生一样</p><p></br></p><h2 id="part.5-手动更新状态">Part.5 手动更新状态</h2><p>上面人类中断时，选择继续执行；下面需要来实现如果希望对过程进行修改、不进行工具执行该如何实现</p><p>通过手动更新状态，可以实现纠正 Agent 的错误、探索替代路径、引导 Agent实现特定目标等</p><h3 id="直接提供正确的回应">直接提供正确的回应</h3><p>和上一个流程一致，当我们通过检查点暂停到调用工具之前</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snapshot = graph.get_state(config)</span><br><span class="line">existing_message = snapshot.values[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">existing_message.pretty_print()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;toolu_01DTyDpJ1kKdNps5yxv3AGJd&#x27;</span>, <span class="string">&#x27;input&#x27;</span>: &#123;<span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;LangGraph&#x27;</span>&#125;, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tavily_search_results_json&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_use&#x27;</span>&#125;]</span><br><span class="line">Tool Calls:</span><br><span class="line">  tavily_search_results_json (toolu_01DTyDpJ1kKdNps5yxv3AGJd)</span><br><span class="line"> Call ID: toolu_01DTyDpJ1kKdNps5yxv3AGJd</span><br><span class="line">  Args:</span><br><span class="line">    query: LangGraph</span><br></pre></td></tr></table></figure><p>这里显示的消息在工具调用之前（Tool Calls）</p><p>接下来提供指定回答</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line">answer = (</span><br><span class="line">    <span class="string">&quot;LangGraph is an apple.&quot;</span></span><br><span class="line">)</span><br><span class="line">new_messages = [</span><br><span class="line">    <span class="comment"># The LLM API expects some ToolMessage to match its tool call. We&#x27;ll satisfy that here.</span></span><br><span class="line">    ToolMessage(content=answer, tool_call_id=existing_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;id&quot;</span>]),</span><br><span class="line">    <span class="comment"># And then directly &quot;put words in the LLM&#x27;s mouth&quot; by populating its response.</span></span><br><span class="line">    AIMessage(content=answer),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">new_messages[-<span class="number">1</span>].pretty_print()</span><br><span class="line">graph.update_state(</span><br><span class="line">    <span class="comment"># Which state to update</span></span><br><span class="line">    config,</span><br><span class="line">    <span class="comment"># The updated values to provide. The messages in our `State` are &quot;append-only&quot;, meaning this will be appended</span></span><br><span class="line">    <span class="comment"># to the existing state. We will review how to update existing messages in the next section!</span></span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: new_messages&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nLast 2 messages;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(graph.get_state(config).values[<span class="string">&quot;messages&quot;</span>][-<span class="number">2</span>:])</span><br></pre></td></tr></table></figure><p>这时我们再拿到<code>messages</code>，可以看到最终结果就是我们定义好的内容</p><h3 id="为什么是-append">为什么是 append</h3><p>上面的流程会衍生出一个疑问，我们手动添加的新消息为什么会被追加到已经存在状态中的消息后</p><p>因为一开始就是这样定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br></pre></td></tr></table></figure><p>上面的实现高速流程图始终将值 append到现有列表，而不是直接覆盖列表</p><p>这里应用了相同的逻辑，所以我们传递给 <code>update_state</code>的消息是以相同的方式附加的</p><h3 id="以哪个节点的名义">以哪个节点的名义</h3><p>默认情况下，<code>update_state</code> 使用上次执行的节点</p><p>也可以通过传参方式告诉流程图更新来自哪个节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph.update_state(</span><br><span class="line">    config,</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [AIMessage(content=<span class="string">&quot;I&#x27;m an AI expert!&quot;</span>)]&#125;,</span><br><span class="line">    <span class="comment"># Which node for this function to act as. It will automatically continue</span></span><br><span class="line">    <span class="comment"># processing as if this node just ran.</span></span><br><span class="line">    as_node=<span class="string">&quot;chatbot&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/4.png" class="" title="Untitled"><p>再来看一次流程图，如果我们以 <code>chatbot</code>的名义更新了消息，那么根据流程图，整个流程就会直接结束</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">snapshot = graph.get_state(config)</span><br><span class="line"><span class="built_in">print</span>(snapshot.values[<span class="string">&quot;messages&quot;</span>][-<span class="number">3</span>:])</span><br><span class="line"><span class="built_in">print</span>(snapshot.<span class="built_in">next</span>) <span class="comment"># ()</span></span><br></pre></td></tr></table></figure><p>查看状态可以发现，历史消息中不会有工具调用的记录</p><h3 id="覆盖现有消息">覆盖现有消息</h3><p>可以通过 message 上的 id 来覆盖已有消息</p><p>在工具执行前的观察点进行暂停</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line">snapshot = graph.get_state(config)</span><br><span class="line">existing_message = snapshot.values[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Original&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Message ID&quot;</span>, existing_message.<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(existing_message.tool_calls[<span class="number">0</span>])</span><br><span class="line">new_tool_call = existing_message.tool_calls[<span class="number">0</span>].copy()</span><br><span class="line">new_tool_call[<span class="string">&quot;args&quot;</span>][<span class="string">&quot;query&quot;</span>] = <span class="string">&quot;Where is China?&quot;</span></span><br><span class="line">new_message = AIMessage(</span><br><span class="line">    content=existing_message.content,</span><br><span class="line">    tool_calls=[new_tool_call],</span><br><span class="line">    <span class="comment"># Important! The ID is how LangGraph knows to REPLACE the message in the state rather than APPEND this messages</span></span><br><span class="line">    <span class="built_in">id</span>=existing_message.<span class="built_in">id</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Updated&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_message.tool_calls[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Message ID&quot;</span>, new_message.<span class="built_in">id</span>)</span><br><span class="line">graph.update_state(config, &#123;<span class="string">&quot;messages&quot;</span>: [new_message]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n\nTool calls&quot;</span>)</span><br><span class="line">graph.get_state(config).values[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].tool_calls</span><br></pre></td></tr></table></figure><p>这里构造了一个新的工具调用消息，通过 <code>update_state</code>进行覆盖</p><p>注意如果需要覆盖 tool calls 消息，需要保证 id 一致，即上述代码中的<code>existing_message.id</code></p><p>接下来继续流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">events = graph.stream(<span class="literal">None</span>, config, stream_mode=<span class="string">&quot;values&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>我这里会发现当执行了覆盖的工具调用后，又到了新的工具调用（因为 LLM根据上下文发现没有查询需要查询的问题）</p><p>但是我们覆盖的消息已经被成功加入流程中了</p><p></br></p><h2 id="part.6-自定义状态">Part.6 自定义状态</h2><p>上述示例中都是使用一个简单的状态来操作消息列表，也可以通过状态中的更多字段来拓展其功能</p><p>上面的例子中每次工具调用时，流程都会暂停等待人工，下面将实现依靠 LLM来选择是否需要进行人工处理</p><p>一种方法是创建一个 <code>human</code>节点，在该节点之前图形将始终停止，只有当 LLM 调用 <code>human</code>工具时，我们才会执行此节</p><p>为了方便起见，我们将在流程图状态中包含一个 <code>ask_human</code>标识，如果 LLM 调用此工具，我们将切换该标识</p><h3 id="定义一个带属性的状态">定义一个带属性的状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_anthropic <span class="keyword">import</span> ChatAnthropic</span><br><span class="line"><span class="keyword">from</span> langchain_community.tools.tavily_search <span class="keyword">import</span> TavilySearchResults</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.sqlite <span class="keyword">import</span> SqliteSaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.graph.message <span class="keyword">import</span> add_messages</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode, tools_condition</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="built_in">list</span>, add_messages]</span><br><span class="line">    <span class="comment"># This flag is new</span></span><br><span class="line">    ask_human: <span class="built_in">bool</span></span><br></pre></td></tr></table></figure><h3 id="定义请求协助工具">定义请求协助工具</h3><p>接下来定义一个 schema（tool）来让模型决定是否请求帮助</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.pydantic_v1 <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RequestAssistance</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Escalate the conversation to an expert. Use this if you are unable to assist directly or if the user requires support beyond your permissions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    To use this function, relay the user&#x27;s &#x27;request&#x27; so the expert can provide the right guidance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    request: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><h3 id="chatbot-节点">chatbot 节点</h3><p>接下来定义聊天机器人节点。如果我们看到聊天机器人调用了<code>RequestAssistance</code>，就切换 <code>ask_human</code> 标识</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wikipedia = WikipediaQueryRun(api_wrapper=WikipediaAPIWrapper())</span><br><span class="line">tools = [wikipedia]</span><br><span class="line"></span><br><span class="line">llm = Azure.chat_model_4o</span><br><span class="line">llm_with_tools = llm.bind_tools(tools + [RequestAssistance])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chatbot</span>(<span class="params">state: State</span>):</span><br><span class="line">    response = llm_with_tools.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    ask_human = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        response.tool_calls</span><br><span class="line">        <span class="keyword">and</span> response.tool_calls[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] == RequestAssistance.__name__</span><br><span class="line">    ):</span><br><span class="line">        ask_human = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response], <span class="string">&quot;ask_human&quot;</span>: ask_human&#125;</span><br></pre></td></tr></table></figure><p>创建流程图图生成器，并将聊天机器人和工具节点添加到图中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;chatbot&quot;</span>, chatbot)</span><br><span class="line"><span class="comment"># 看起来这里没必要将 RequestAssistance 也加入，因为 RequestAssistance 只是一个标记</span></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;tools&quot;</span>, ToolNode(tools=[tool]))</span><br></pre></td></tr></table></figure><h3 id="human-节点">human 节点</h3><p>接下来创建 <code>human</code>节点，这个节点函数在我们的图中主要是一个占位符，它将触发中断</p><p>如果人工在中断期间没有手动更新状态，它会插入一条工具消息，以便 LLM知道用户被请求但没有响应</p><p>该节点还取消设置 <code>ask_human</code>标志，以便流程图知道除非发出进一步的请求，否则不要重新访问该节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage, ToolMessage</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_response</span>(<span class="params">response: <span class="built_in">str</span>, ai_message: AIMessage</span>):</span><br><span class="line">    <span class="keyword">return</span> ToolMessage(</span><br><span class="line">        content=response,</span><br><span class="line">        tool_call_id=ai_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;id&quot;</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_node</span>(<span class="params">state: State</span>):</span><br><span class="line">    new_messages = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>], ToolMessage):</span><br><span class="line">        <span class="comment"># Typically, the user will have updated the state during the interrupt.</span></span><br><span class="line">        <span class="comment"># If they choose not to, we will include a placeholder ToolMessage to</span></span><br><span class="line">        <span class="comment"># let the LLM continue.</span></span><br><span class="line">        new_messages.append(</span><br><span class="line">            create_response(<span class="string">&quot;No response from human.&quot;</span>, state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>])</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment"># Append the new messages</span></span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: new_messages,</span><br><span class="line">        <span class="comment"># Unset the flag</span></span><br><span class="line">        <span class="string">&quot;ask_human&quot;</span>: <span class="literal">False</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">graph_builder.add_node(<span class="string">&quot;human&quot;</span>, human_node)</span><br></pre></td></tr></table></figure><h3 id="条件边">条件边</h3><p>接下来定义条件边，如果设置了标志，<code>select_next_node</code>将路由到人工节点</p><p>否则让预构建的 <code>tools_condition</code> 函数选择下一个节点</p><p><code>tools_condition</code>函数只是检查聊天机器人是否在其响应消息中使用了任何<code>tool_calls</code>进行了响应，如果是将路由到动作节点，否则将结束流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">select_next_node</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">if</span> state[<span class="string">&quot;ask_human&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;human&quot;</span></span><br><span class="line">    <span class="comment"># Otherwise, we can route as before</span></span><br><span class="line">    <span class="keyword">return</span> tools_condition(state)</span><br><span class="line"></span><br><span class="line">graph_builder.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;chatbot&quot;</span>,</span><br><span class="line">    select_next_node,</span><br><span class="line">    &#123;<span class="string">&quot;human&quot;</span>: <span class="string">&quot;human&quot;</span>, <span class="string">&quot;tools&quot;</span>: <span class="string">&quot;tools&quot;</span>, <span class="string">&quot;__end__&quot;</span>: <span class="string">&quot;__end__&quot;</span>&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="编译">编译</h3><p>最后添加简单的有向边并编译图，这些边指示每当 a完成执行时，图总是从节点 a-&gt;b 流出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The rest is the same</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;chatbot&quot;</span>)</span><br><span class="line">memory = SqliteSaver.from_conn_string(<span class="string">&quot;:memory:&quot;</span>)</span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>(</span><br><span class="line">    checkpointer=memory,</span><br><span class="line">    <span class="comment"># We interrupt before &#x27;human&#x27; here instead.</span></span><br><span class="line">    interrupt_before=[<span class="string">&quot;human&quot;</span>],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/5.png" class="" title="Untitled"><p>流程图如上，具体的执行步骤就参考官方文档即可</p><p></br></p><h2 id="part.7-时间旅行">Part.7 时间旅行</h2><p>时间旅行（Time Travel）可以实现</p><ul><li>从以前的响应开始，分支探索单独的结果</li><li>用户能够 “倒带”助理的工作来纠正一些错误或尝试不同的策略（在自主软件工程师等应用程序中很常见）</li><li>以及更多功能</li></ul><p>通过使用流程图的 <code>get_state_history</code> 方法获取检查点来“倒带” （rewind）流程图</p><h3 id="设置记忆检查点">设置记忆检查点</h3><p>基于上面的流程不用变更任何代码</p><p>可以确认，我们的 <code>checkpointer</code> 基于<code>memory</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph = graph_builder.<span class="built_in">compile</span>(</span><br><span class="line">    checkpointer=memory,</span><br><span class="line">    interrupt_before=[<span class="string">&quot;tools&quot;</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="模拟流程">模拟流程</h3><p>让流程图走几步</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第一步</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            (<span class="string">&quot;user&quot;</span>, <span class="string">&quot;Where is China?&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    config,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">第二步</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">events = graph.stream(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            (<span class="string">&quot;Where is its capital?&quot;</span>)</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    config,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>这里放一下结果吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">Where <span class="keyword">is</span> China?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">China <span class="keyword">is</span> a country located <span class="keyword">in</span> East Asia. It <span class="keyword">is</span> the world<span class="string">&#x27;s most populous country, with a population of over 1.4 billion people. China is bordered by 14 countries: Afghanistan, Bhutan, India, Kazakhstan, Kyrgyzstan, Laos, Mongolia, Myanmar, Nepal, North Korea, Pakistan, Russia, Tajikistan, and Vietnam. To the east, it has a coastline along the East China Sea, Korea Bay, Yellow Sea, and South China Sea. The capital city of China is Beijing.</span></span><br><span class="line"><span class="string">================================ Human Message =================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Where is its capital?</span></span><br><span class="line"><span class="string">================================== Ai Message ==================================</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The capital of China is Beijing. Beijing is located in the northern part of the country. It is situated in the northern tip of the North China Plain, near the western coast of the Bohai Sea. The city is bordered by Hebei Province to the north, west, south, and a small section to the east, and by Tianjin Municipality to the southeast. Beijing is one of the most populous cities in the world and serves as the political, cultural, and educational center of China.</span></span><br></pre></td></tr></table></figure><h3 id="回看历史">回看历史</h3><p>上面让流程图进行了几次调用</p><p>下面可以通过 <code>get_state_history</code> 获取所有历史，并且保存<code>to_replay</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">to_replay = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> graph.get_state_history(config):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Num Messages: &quot;</span>, <span class="built_in">len</span>(state.values[<span class="string">&quot;messages&quot;</span>]), <span class="string">&quot;Next: &quot;</span>, state.<span class="built_in">next</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">80</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state.values[<span class="string">&quot;messages&quot;</span>]) == <span class="number">2</span>:</span><br><span class="line">        <span class="comment"># We are somewhat arbitrarily selecting a specific state based on the number of chat messages in the state.</span></span><br><span class="line">        to_replay = state</span><br></pre></td></tr></table></figure><p>检查点是为流程图每个步骤保存的，会跨越多次调用</p><p>因此可以在整个线程的历史记录中进行倒带。我们选择了<code>to_replay</code> 作为恢复状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(to_replay.<span class="built_in">next</span>)</span><br><span class="line"><span class="built_in">print</span>(to_replay.config)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">&#123;<span class="string">&#x27;configurable&#x27;</span>: &#123;<span class="string">&#x27;thread_id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;thread_ts&#x27;</span>: <span class="string">&#x27;1ef3228b-2fee-631a-8001-1697d5779962&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里是第一次调用结束，通过 <code>to_replay.next</code> 可以看出</p><h3 id="基于检查点配置调用">基于检查点配置调用</h3><p>检查点的配置 <code>to_replay.config</code> 包含一个<code>thread_ts</code> 时间戳</p><p>提供这个 <code>thread_ts</code> 值告诉 LangGraph的检查指针从那个时刻开始加载状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The `thread_ts` in the `to_replay.config` corresponds to a state we&#x27;ve persisted to our checkpointer.</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(&#123;</span><br><span class="line">    <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">        (<span class="string">&quot;Where is its economic center?&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;, to_replay.config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;messages&quot;</span> <span class="keyword">in</span> event:</span><br><span class="line">        event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">Where <span class="keyword">is</span> its economic center?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">China<span class="string">&#x27;s economic center is often considered to be Shanghai. Shanghai is the largest city in China by population and one of the largest urban areas in the world. It is a global financial hub and a major center for commerce, trade, and industry. The city hosts the Shanghai Stock Exchange, which is one of the largest stock exchanges in the world by market capitalization.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Shanghai&#x27;</span>s strategic location on the Yangtze River Delta <span class="keyword">and</span> its extensive port facilities make it a key player <span class="keyword">in</span> both domestic <span class="keyword">and</span> international trade. The city <span class="keyword">is</span> also known <span class="keyword">for</span> its modern skyline, including landmarks such <span class="keyword">as</span> the Shanghai Tower <span class="keyword">and</span> the Oriental Pearl TV Tower.</span><br></pre></td></tr></table></figure><p></br></p><h2 id="总结">总结</h2><p>通过上面的流程就完成了介绍教程，并在 LangGraph中构建了一个聊天机器人</p><p>它支持</p><ul><li>工具调用</li><li>内存记忆</li><li>人工交互</li><li>时间旅行</li></ul><p>更多内容将在后续的文档中展开</p><p></br></p><h1 id="参考">参考</h1><p><ahref="https://langchain-ai.github.io/langgraph/tutorials/">Tutorials -LangGraph (langchain-ai.github.io)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/">LangGraph</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain/">LangChain</category>
      
      <category domain="https://www.kugaaa.com/tags/LangGraph/">LangGraph</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangGraph/LangGraph%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LangChain 文档学习 No.7 - Agent</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.7%20-%20Agent.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.7%20-%20Agent.html</guid>
      <pubDate>Mon, 24 Jun 2024 16:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;注意&quot;&gt;注意&lt;/h1&gt;
&lt;p&gt;LangChain 生态下有了新的框架 LangGraph&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://github.com/langchain-ai/langgraph&quot;&gt;langchain-ai/langgraph:
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="注意">注意</h1><p>LangChain 生态下有了新的框架 LangGraph</p><p><ahref="https://github.com/langchain-ai/langgraph">langchain-ai/langgraph:Build resilient language agents as graphs. (github.com)</a></p><p>Agent 的重心也迁移到 LangGraph，所以 Agent 相关的内容会放在 LangGraph内</p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/">LangChain</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain/">LangChain</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.7%20-%20Agent.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>langchain4j-spring 学习</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/langchain4j-spring%20%E5%AD%A6%E4%B9%A0.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/langchain4j-spring%20%E5%AD%A6%E4%B9%A0.html</guid>
      <pubDate>Fri, 14 Jun 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;langchain4j-spring-学习&quot;&gt;langchain4j-spring 学习&lt;/h1&gt;
&lt;h1 id=&quot;介绍&quot;&gt;介绍&lt;/h1&gt;
&lt;p&gt;langchain4j-spring 是 LangChain4j 下支持 Spring Starter
机制的仓库&lt;/p&gt;
&lt;p&gt;截止到当前版本 &lt;code&gt;0.31.0&lt;/code&gt; 来看，仓库下的 module
主要分为两大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;流行的集成的 Starter（popular integrations）
&lt;ul&gt;
&lt;li&gt;langchain4j-open-ai-spring-boot-starter：OpenAI LLM&lt;/li&gt;
&lt;li&gt;langchain4j-azure-open-ai-spring-boot-starter：Azure OpenAI LLM&lt;/li&gt;
&lt;li&gt;langchain4j-anthropic-spring-boot-starter：Anthropic
LLM（Claude）&lt;/li&gt;
&lt;li&gt;langchain4j-ollama-spring-boot-starter：Ollama LLM&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;AiService、RAG、Tools 等工具的 Starter
&lt;ul&gt;
&lt;li&gt;langchain4j-spring-boot-starter：核心能力&lt;/li&gt;
&lt;li&gt;langchain4j-easy-rag-spring-boot-starter&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="langchain4j-spring-学习">langchain4j-spring 学习</h1><h1 id="介绍">介绍</h1><p>langchain4j-spring 是 LangChain4j 下支持 Spring Starter机制的仓库</p><p>截止到当前版本 <code>0.31.0</code> 来看，仓库下的 module主要分为两大类</p><ul><li>流行的集成的 Starter（popular integrations）<ul><li>langchain4j-open-ai-spring-boot-starter：OpenAI LLM</li><li>langchain4j-azure-open-ai-spring-boot-starter：Azure OpenAI LLM</li><li>langchain4j-anthropic-spring-boot-starter：AnthropicLLM（Claude）</li><li>langchain4j-ollama-spring-boot-starter：Ollama LLM</li></ul></li><li>AiService、RAG、Tools 等工具的 Starter<ul><li>langchain4j-spring-boot-starter：核心能力</li><li>langchain4j-easy-rag-spring-boot-starter</li></ul></li></ul><p>需要注意的是，LangChain4j 支持 Java 8，但是这个 Spring Starter项目只支持 Java 17（本质原因还是新的 Spring Boot 版本对 Java版本的要求，如今新的 Spring 相关仓库很少支持 Java 8 了）</p><p>下面会简单了解一些核心功能的用法，以及实现方式</p><h1 id="llm">LLM</h1><p>这里以 Azure OpenAI 为例</p><h2 id="使用">使用</h2><p>在 <code>application</code> 文件中进行相关配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">langchain4j:</span></span><br><span class="line">  <span class="attr">azure-open-ai:</span></span><br><span class="line">    <span class="attr">chat-model:</span></span><br><span class="line">      <span class="attr">api-key:</span> <span class="string">&#x27;AZURE_OPENAI_KEY&#x27;</span></span><br><span class="line">      <span class="attr">endpoint:</span> <span class="string">&#x27;AZURE_OPENAI_ENDPOINT&#x27;</span></span><br><span class="line">      <span class="attr">deployment-name:</span> <span class="string">&#x27;deploymentName&#x27;</span></span><br><span class="line">      <span class="attr">max-tokens:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>依赖自动注入，LLM 已经作为 Bean 实例化进容器了</p><p>接口为 <code>dev.langchain4j.model.chat.ChatLanguageModel</code></p><p>实现类为<code>dev.langchain4j.model.azure.AzureOpenAiChatModel</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLlmService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChatLanguageModel chatLanguageModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">post</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMessage</span> <span class="variable">message</span> <span class="operator">=</span> UserMessage.from(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        Response&lt;AiMessage&gt; generate = chatLanguageModel.generate(message);</span><br><span class="line">        log.info(<span class="string">&quot;response content:&#123;&#125;&quot;</span>, generate.content());</span><br><span class="line">        <span class="comment">// response content:Hello! How can I assist you today?</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码">源码</h2><h3 id="自动装配">自动装配</h3><p>META 文件中指明了自动装配类为<code>dev.langchain4j.azure.openai.spring.AutoConfig</code></p><p><code>AutoConfig</code> 主要负责如下相关 Bean 的装配工作</p><ul><li>AzureOpenAiChatModel</li><li>AzureOpenAiStreamingChatModel</li><li>AzureOpenAiEmbeddingModel</li><li>AzureOpenAiImageModel</li><li>AzureOpenAiTokenizer</li></ul><p>以 <code>AzureOpenAiChatModel</code> 和<code>AzureOpenAiTokenizer</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Properties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnProperty(Properties.PREFIX + &quot;.chat-model.api-key&quot;)</span></span><br><span class="line">    AzureOpenAiChatModel <span class="title function_">openAiChatModelByAPIKey</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openAiChatModel(properties);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    AzureOpenAiTokenizer <span class="title function_">openAiTokenizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AzureOpenAiTokenizer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到当发现存在配置 <code>.chat-model.api-key</code>时，将会实例化 <code>AzureOpenAiChatModel</code></p><p>后面的 <code>openAiChatModel</code>方法会根据配置文件内容创建出相关实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AzureOpenAiImageModel <span class="title function_">openAiImageModel</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">      <span class="type">ImageModelProperties</span> <span class="variable">imageModelProperties</span> <span class="operator">=</span> properties.getImageModel();</span><br><span class="line">      AzureOpenAiImageModel.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> AzureOpenAiImageModel.builder()</span><br><span class="line">              .endpoint(imageModelProperties.getEndpoint())</span><br><span class="line">              .apiKey(imageModelProperties.getApiKey())</span><br><span class="line">              .deploymentName(imageModelProperties.getDeploymentName())</span><br><span class="line">              .size(imageModelProperties.getSize())</span><br><span class="line">              .quality(imageModelProperties.getQuality())</span><br><span class="line">              .style(imageModelProperties.getStyle())</span><br><span class="line">              .user(imageModelProperties.getUser())</span><br><span class="line">              .responseFormat(imageModelProperties.getResponseFormat())</span><br><span class="line">              .timeout(imageModelProperties.getTimeout() == <span class="literal">null</span> ? <span class="literal">null</span> : Duration.ofSeconds(imageModelProperties.getTimeout()))</span><br><span class="line">              .maxRetries(imageModelProperties.getMaxRetries())</span><br><span class="line">              .proxyOptions(ProxyOptions.fromConfiguration(Configuration.getGlobalConfiguration()))</span><br><span class="line">              .logRequestsAndResponses(imageModelProperties.getLogRequestsAndResponses() != <span class="literal">null</span> &amp;&amp; imageModelProperties.getLogRequestsAndResponses());</span><br><span class="line">      <span class="keyword">if</span> (imageModelProperties.getNonAzureApiKey() != <span class="literal">null</span>) &#123;</span><br><span class="line">          builder.nonAzureApiKey(imageModelProperties.getNonAzureApiKey());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的就是在获取配置文件中的属性进行实例化</p><p><strong>这里多说一句！</strong></p><p>一开始我的项目启动不起来，报错信息如下，明显是装配类的全限定名路径错了，前面多了一个<code>spring.</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to read meta-data <span class="keyword">for</span> <span class="keyword">class</span> <span class="title class_">spring</span>.dev.langchain4j.azure.openai.spring.AutoConfig</span><br></pre></td></tr></table></figure><p>我看了一下代码，发现项目中写的确实是<code>dev.langchain4j.azure.openai.spring.AutoConfig spring</code>，所以我的怀疑重心就放在了 Spring 和 Maven的编译插件上了，以为是换了新版本的 Spring Boot 有什么新机制导致的“水土不服”</p><p>结果怎么试都不行，实在没办法了看了一下提交时间，发现竟然是 5.24才进行的 fix，也就是说在仓库的 <code>0.32.0-SNAPSHOT</code>是修复过的，而之前的 <code>0.31.0</code> 这个 RELEASE版本，就是错的…</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/langchain4j-spring%20%E5%AD%A6%E4%B9%A0/fix-commit.png" class="" title="Untitled"><p>没办法，本地打了一个 <code>0.32.0-SNAPSHOT</code> 包继续测试</p><p>那么为什么会出现这种错误呢，因为这个贡献者还写了了 Azure Search 的Starter，在那个 module 下，<code>AutoConfig</code> 是在<code>dev.langchain4j.azure.openai.spring</code>这个路径，所以我猜测是作者搞混了</p><h3 id="配置">配置</h3><p>这里简单看下都有哪些配置参数</p><p>具体的属性都在<code>dev.langchain4j.azure.openai.spring.Properties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = Properties.PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;langchain4j.azure-open-ai&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    ChatModelProperties chatModel; <span class="comment">// 聊天模型</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    ChatModelProperties streamingChatModel; <span class="comment">// 流式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    EmbeddingModelProperties embeddingModel; <span class="comment">// 嵌入</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NestedConfigurationProperty</span></span><br><span class="line">    ImageModelProperties imageModel; <span class="comment">// 图片</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以聊天模型为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatModelProperties</span> &#123;</span><br><span class="line"></span><br><span class="line">    String endpoint;</span><br><span class="line">    String apiKey;</span><br><span class="line">    String nonAzureApiKey;</span><br><span class="line">    String organizationId;</span><br><span class="line">    String deploymentName;</span><br><span class="line">    Double temperature;</span><br><span class="line">    Double topP;</span><br><span class="line">    Integer maxTokens;</span><br><span class="line">    Double presencePenalty;</span><br><span class="line">    Double frequencyPenalty;</span><br><span class="line">    String responseFormat;</span><br><span class="line">    Integer seed;</span><br><span class="line">    List&lt;String&gt; stop;</span><br><span class="line">    Integer timeout;</span><br><span class="line">    Integer maxRetries;</span><br><span class="line">    Boolean logRequestsAndResponses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是支持的所有参数了，可以看到使用示例中的属性皆在这里</p><ul><li>apiKey</li><li>endpoint</li><li>deploymentName</li><li>maxTokens</li></ul><h1 id="aiservice">AiService</h1><h2 id="使用-1">使用</h2><p>定义接口，标注 <code>@AiService</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyAiService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SystemMessage(&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">            Tell me five names about the topic given by users.</span></span><br><span class="line"><span class="meta">            Separate with commas.</span></span><br><span class="line"><span class="meta">            &quot;&quot;&quot;)</span></span><br><span class="line">    String <span class="title function_">answer</span><span class="params">(String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入后使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Run</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAiService myAiService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">post</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> myAiService.answer(<span class="string">&quot;国家首都&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;response content:&#123;&#125;&quot;</span>, resp);</span><br><span class="line">        <span class="comment">// response content:北京，华盛顿，伦敦，巴黎，东京</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码-1">源码</h2><p><code>AiService</code> Bean 的创建是通过<code>BeanFactoryPostProcessor</code> 实现的</p><p>dev.langchain4j.service.spring.AiServicesAutoConfig</p><h3 id="组件获取">组件获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AiServicesAutoConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    BeanFactoryPostProcessor <span class="title function_">aiServicesRegisteringBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// all components available in the application context</span></span><br><span class="line">            String[] chatLanguageModels = beanFactory.getBeanNamesForType(ChatLanguageModel.class);</span><br><span class="line">            String[] streamingChatLanguageModels = beanFactory.getBeanNamesForType(StreamingChatLanguageModel.class);</span><br><span class="line">            String[] chatMemories = beanFactory.getBeanNamesForType(ChatMemory.class);</span><br><span class="line">            String[] chatMemoryProviders = beanFactory.getBeanNamesForType(ChatMemoryProvider.class);</span><br><span class="line">            String[] contentRetrievers = beanFactory.getBeanNamesForType(ContentRetriever.class);</span><br><span class="line">            String[] retrievalAugmentors = beanFactory.getBeanNamesForType(RetrievalAugmentor.class);</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p><code>AiService</code> 依赖的大部分组件，都是在 Bean容器内进行获取，例如 LLM、记忆等重要组件</p><h3 id="扫描-aiservice">扫描 <span class="citation"data-cites="AiService">@AiService</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Class&lt;?&gt;&gt; findAiServices(ConfigurableListableBeanFactory beanFactory) &#123;</span><br><span class="line">    String[] applicationBean = beanFactory.getBeanNamesForAnnotation(SpringBootApplication.class);</span><br><span class="line">    <span class="type">BeanDefinition</span> <span class="variable">applicationBeanDefinition</span> <span class="operator">=</span> beanFactory.getBeanDefinition(applicationBean[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">String</span> <span class="variable">basePackage</span> <span class="operator">=</span> applicationBeanDefinition.getResolvableType().resolve().getPackage().getName();</span><br><span class="line">    <span class="type">Reflections</span> <span class="variable">reflections</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reflections</span>(basePackage);</span><br><span class="line">    <span class="keyword">return</span> reflections.getTypesAnnotatedWith(AiService.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为了拿到 Application 的 basePackage，然后通过<code>Reflections</code> 扫描所有带有 <code>@AiService</code>注解的类</p><h3 id="创建-bean">创建 Bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">GenericBeanDefinition</span> <span class="variable">aiServiceBeanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericBeanDefinition</span>();</span><br><span class="line">        aiServiceBeanDefinition.setBeanClass(AiServiceFactory.class);</span><br><span class="line">        aiServiceBeanDefinition.getConstructorArgumentValues().addGenericArgumentValue(aiServiceClass);</span><br><span class="line">        <span class="type">MutablePropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> aiServiceBeanDefinition.getPropertyValues();</span><br><span class="line"></span><br><span class="line">        <span class="type">AiService</span> <span class="variable">aiServiceAnnotation</span> <span class="operator">=</span> aiServiceClass.getAnnotation(AiService.class);</span><br><span class="line"></span><br><span class="line">        addBeanReference(</span><br><span class="line">                ChatLanguageModel.class,</span><br><span class="line">                aiServiceAnnotation,</span><br><span class="line">                aiServiceAnnotation.chatModel(),</span><br><span class="line">                chatLanguageModels,</span><br><span class="line">                <span class="string">&quot;chatModel&quot;</span>,</span><br><span class="line">                <span class="string">&quot;chatLanguageModel&quot;</span>,</span><br><span class="line">                propertyValues</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><p>拿到 Class 后，通过 <code>BeanDefinition</code> 的方式设置 Bean</p><p>后续的 <code>addBeanReference</code> 方法将组件添加到<code>AiService</code> 的定义中</p><p>这里还需要注意，通过包装 <code>AiServiceFactory</code>的方式进行创建的实现，这样可以将 Spring 包中的方式接入 Core包的核心方法，让创建流程更加统一</p><h1 id="tools">Tools</h1><p>对于工具解析相关的方法，是 <code>AiServices</code> 提供的</p><p>Spring 的封装这里主要是提供到对 Bean 扫描 <code>@Tool</code>这一步</p><p>随后在 <code>AiServiceFactory</code> 的 <code>getObject</code>实现上解析工具的相关属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isNullOrEmpty(tools)) &#123;</span><br><span class="line">    builder = builder.tools(tools);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="rag">RAG</h1><p>提供了对 RAG 相关组件 Embedding Store 自动装配的能力</p><p>实现上比较简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(RagProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RagAutoConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    EmbeddingStore&lt;TextSegment&gt; <span class="title function_">embeddingStore</span><span class="params">()</span> &#123; <span class="comment">// TODO bean name, type</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryEmbeddingStore</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(&#123;</span></span><br><span class="line"><span class="meta">            EmbeddingModel.class,</span></span><br><span class="line"><span class="meta">            EmbeddingStore.class</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    ContentRetriever <span class="title function_">contentRetriever</span><span class="params">(EmbeddingModel embeddingModel,</span></span><br><span class="line"><span class="params">                                      EmbeddingStore&lt;TextSegment&gt; embeddingStore,</span></span><br><span class="line"><span class="params">                                      RagProperties ragProperties)</span> &#123;  <span class="comment">// TODO bean name, type</span></span><br><span class="line"></span><br><span class="line">        EmbeddingStoreContentRetriever.<span class="type">EmbeddingStoreContentRetrieverBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> EmbeddingStoreContentRetriever.builder()</span><br><span class="line">                .embeddingStore(embeddingStore)</span><br><span class="line">                .embeddingModel(embeddingModel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ragProperties != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">RetrievalProperties</span> <span class="variable">retrievalProperties</span> <span class="operator">=</span> ragProperties.getRetrieval();</span><br><span class="line">            <span class="keyword">if</span> (retrievalProperties != <span class="literal">null</span>) &#123;</span><br><span class="line">                builder</span><br><span class="line">                        .maxResults(retrievalProperties.maxResults)</span><br><span class="line">                        .minScore(retrievalProperties.minScore);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>ContentRetriever</code> 依赖 <code>EmbeddingStore</code>和 <code>EmbeddingModel</code>，而对于存储，也提供了一个默认的<code>InMemoryEmbeddingStore</code> 实现</p><h1 id="实现一个-agent">实现一个 Agent</h1><p>这里具体就看 langchain4j-examples 的代码吧</p><p><ahref="https://github.com/langchain4j/langchain4j-examples/tree/main/customer-support-agent-example">langchain4j-examples/customer-support-agent-exampleat main · langchain4j/langchain4j-examples (github.com)</a></p><h1 id="spring">Spring</h1><p>项目中的一些操作（特别是 Bean 装配）用到了一些少见的 Spring能力，在这里整理一下</p><h2 id="beanfactorypostprocessor">BeanFactoryPostProcessor</h2><blockquote><p>Factory hook that allows for custom modification of an applicationcontext's bean definitions, adapting the bean property values of thecontext's underlying bean factory.</p></blockquote><p>在标准初始化（ standard initialization）后修改上下文的内部 Bean 工厂所有 Bean Definition 都将被加载，但还没有任何 Bean 被实例化将允许重写或添加属性，甚至可以将其添加到 eager-initializing beans 中&gt;</p><p>所以 <code>BeanFactoryPostProcessor</code> 本质上就是用于增强 BeanDefinition 即元数据，此时 Bean 还没有进行实例化</p><p><code>BeanFactoryPostProcessor</code> 是一个函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数中提供的 <code>ConfigurableListableBeanFactory</code>可以用来枚举所有的 Bean Definition，从而可以进行修改 Bean Definition信息等操作</p><p>也可以通过 <code>getBean</code> 系列方法获取 Bean 或将其初始化</p><h3 id="示例">示例</h3><p>以 <code>CustomAutowireConfigurer</code> 举例，它是<code>BeanFactoryPostProcessor</code> 的实现类，作用是用户自定义类似<code>@Qualifier</code> 功能的注解</p><p>定义一个 Bean 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAutowired &#123;</span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装配类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@MyAutowired(name = &quot;zhangsan&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">zhangsanStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.builder().name(<span class="string">&quot;zhangsan&quot;</span>).age(<span class="number">18</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@MyAutowired(name = &quot;lisi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">lisiStudent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.builder().name(<span class="string">&quot;lisi&quot;</span>).age(<span class="number">19</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> BeanFactoryPostProcessor <span class="title function_">initMyBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CustomAutowireConfigurer</span> <span class="variable">customAutowireConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomAutowireConfigurer</span>();</span><br><span class="line">        customAutowireConfigurer.setCustomQualifierTypes(Set.of(MyAutowired.class));</span><br><span class="line">        <span class="keyword">return</span> customAutowireConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@MyAutowired(name = &quot;lisi&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect student:&quot;</span> + student);</span><br><span class="line">        <span class="comment">// MyAspect student:Student(age=19, name=lisi)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="beanpostprocessor">BeanPostProcessor</h2><blockquote><p>Factory hook that allows for custom modification of new beaninstances — for example, checking for marker interfaces or wrappingbeans with proxies.</p></blockquote><p>工厂相关的钩子，允许自定义修改新的 Bean 实例 例如检查标记的接口或者给Bean 包装代理 &gt;</p><p>因为和 <code>BeanFactoryPostProcessor</code>名字很像，所以明确区分两个钩子区别很重要，另外也看一下<code>InitializingBean</code></p><p><ahref="https://stackoverflow.com/questions/30455536/beanfactorypostprocessor-and-beanpostprocessor-in-lifecycle-events">java- BeanFactoryPostProcessor and BeanPostProcessor in lifecycle events -Stack Overflow</a></p><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr><th>hook</th><th>BeanFactoryPostProcessor</th><th>BeanPostProcessor</th><th>InitializingBean</th></tr></thead><tbody><tr><td>生命周期</td><td>初始化完成 initialization</td><td>实例化中 instantiation</td><td>实例化完成</td></tr><tr><td>核心能力</td><td>获取、修改、添加 BeanDefinition</td><td>检查、增强 Bean</td><td>Bean 实例化完成后要做的操作</td></tr><tr><td>调用时机</td><td>所有 BeanDefinition 初始化完成</td><td>每个 Bean 实例化过程中，调用构造器前后</td><td>每个 Bean 实例化完成后</td></tr></tbody></table><p>放一张老生常谈的生命周期图示</p><img src="/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/langchain4j-spring%20%E5%AD%A6%E4%B9%A0/bean-lifecycle.png" class="" title="Untitled"><h2 id="factorybean">FactoryBean</h2><blockquote><p>If a bean implements this interface, it is used as a factory for anobject to expose, not directly as a bean instance that will be exposedit self.</p></blockquote><p>如果一个 Bean实现了这个接口，那么它将会作为一个公开的工厂，而不是作为一个公开的 Bean实例（也就是说这个工厂 Bean 是不公开的，其生产的实例是公开的） &gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认、需要实现的方法</p><ul><li><code>getObject</code>：返回构建的 Bean</li><li><code>getObjectType</code>：返回 Bean 的 Class对象（我认为是为了解决泛型擦除）</li><li><code>isSingleton</code>：单例还是原型</li></ul><h3 id="示例-1">示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentFactory</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.builder()</span><br><span class="line">                .name(<span class="string">&quot;this is a factory bean&quot;</span>)</span><br><span class="line">                .age(-<span class="number">1</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Student.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyAspect student:&quot;</span> + student);</span><br><span class="line">        <span class="comment">// MyAspect student:Student(age=-1, name=this is a factory bean)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="genericbeandefinition">GenericBeanDefinition</h2><p><code>GenericBeanDefinition</code> 是<code>AbstractBeanDefinition</code> 最基本的实现</p><p>需要通过 Bean Definition 来定义一个简单 Bean 时，就可以使用这个类，在langchain4j-spring 中就使用它来补充 <code>AiService</code> 实现的Bean</p><p>以下是一些 <code>GenericBeanDefinition</code> 的重要 API</p><ul><li><code>setParentName</code> ：用于设置父 Bean 的名称，此 Bean将继承父 Bean 的所有配置</li><li><code>setBeanClassName</code> ：用于设置此 Bean 的全限定类名</li><li><code>setScope</code> ：用于设置此 Bean 的作用范围，如<code>singleton</code> 或 <code>prototype</code></li><li><code>setPropertyValues(MutablePropertyValues)</code> ：用于设置此Bean 的属性值</li></ul><h1 id="参考">参考</h1><p><ahref="https://stackoverflow.com/questions/30455536/beanfactorypostprocessor-and-beanpostprocessor-in-lifecycle-events">java- BeanFactoryPostProcessor and BeanPostProcessor in lifecycle events -Stack Overflow</a></p><p><ahref="https://docs.langchain4j.dev/tutorials/spring-boot-integration/">SpringBoot Integration | LangChain4j</a></p><p><ahref="https://github.com/langchain4j/langchain4j-spring">langchain4j/langchain4j-spring:LangChain4j integration with Spring (github.com)</a></p><p><ahref="https://github.com/langchain4j/langchain4j-examples">langchain4j/langchain4j-examples(github.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/">LangChain4j</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/%E6%BA%90%E7%A0%81/">源码</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain4j/">LangChain4j</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain4j/langchain4j-spring%20%E5%AD%A6%E4%B9%A0.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Ragas 核心概念</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/Ragas%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/Ragas%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html</guid>
      <pubDate>Wed, 22 May 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;Ragas 是一个帮助评估 RAG（Retrieval Augmented
Generation）管道的框架&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ragas is a framework that helps you evaluate your Retrieval Augmented
Generation (RAG) pipelines. RAG denotes a class of LLM applications that
use external data to augment the LLM’s context. There are existing tools
and frameworks that help you build these pipelines but evaluating it and
quantifying your pipeline performance can be hard. This is where Ragas
(RAG Assessment) comes in.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;提供最新研究的工具评估 LLM 生成的文本，深入理解 RAG 管道；并且可以和
CI  CD 集成，提供持续的检查机制保证效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/explodinggradients/ragas&quot;&gt;Github
explodinggradients / Ragas&lt;/a&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="背景">背景</h1><p>Ragas 是一个帮助评估 RAG（Retrieval AugmentedGeneration）管道的框架</p><blockquote><p>Ragas is a framework that helps you evaluate your Retrieval AugmentedGeneration (RAG) pipelines. RAG denotes a class of LLM applications thatuse external data to augment the LLM’s context. There are existing toolsand frameworks that help you build these pipelines but evaluating it andquantifying your pipeline performance can be hard. This is where Ragas(RAG Assessment) comes in.</p></blockquote><p>提供最新研究的工具评估 LLM 生成的文本，深入理解 RAG 管道；并且可以和CI  CD 集成，提供持续的检查机制保证效果</p><p><a href="https://github.com/explodinggradients/ragas">Githubexplodinggradients / Ragas</a></p><p>官方文档的 Core Concepts 章节提到了一些衡量 RAG效果的概念，在这篇文档做下翻译和整理</p><p>这里只整理核心概念中通用的概念部分，关于 Ragas如何使用、相关设计不在这里涉及</p><h1 id="作用">作用</h1><p>Ragas 旨在建立一个开放标准、为开发人员提供持续学习的工具和技术用于其RAG 应用程序中</p><p>有了 Ragas 可以做到</p><ol type="1"><li>综合生成一个多样化的测试数据集，您可以使用它来评估应用程序</li><li>使用 LLM 辅助评估指标，客观地衡量应用程序的性能</li><li>使用更小、更便宜的模型来监控应用程序在生产中的质量，这些模型可以提供有效可优化的建议（actionableinsights）；例如，生成的答案中出现幻觉的数量</li><li>使用这些建议来迭代和改进应用程序</li></ol><h1 id="指标驱动开发">指标驱动开发</h1><p>虽然创建一个基础的 LLM服务是简单的，但是挑战在于持续的维护和不断的增强，Ragas的愿景是通过采用指标驱动开发（Metrics-Driven Development）的思想，促进LLM 和 RAG 应用程序的持续迭代</p><p>MDD是一种依赖数据来做出明智决策的产品开发方法，该方法需要随着时间的推移不断监控基本指标，从而为应用程序的效果提供有价值的建议</p><p>Ragas 的使命是建立一个将 MDD 应用于 LLM 和 RAG 应用程序的开源标准</p><ul><li>评估：评估 LLM 应用时使用指标辅助的方式，确保高可靠性和可复现</li><li>监控：从生产数据点获得有价值和有效可优化的建议，有助于不断提高 LLM应用的质量</li></ul><h1 id="指标">指标</h1><p><strong>Ragas 提供组件式评估</strong></p><p>就像在任何机器学习系统中一样，LLM 和 RAG管道中单个组件的性能对整体体验有着重大影响</p><p>Ragas 提供量身定制的指标，用于单独评估 RAG 管道的每个组件</p><h2 id="忠实性faithfulness">忠实性（Faithfulness）</h2><blockquote><p>答案的内容是不是都能由材料进行推断</p></blockquote><p>衡量了生成的答案在给定上下文中的事实一致性，它是根据答案和检索到的上下文来计算的</p><p>结果会被缩放在 0 到 1 范围，越高越好</p><p>如果答案中的所有声明都可以从给定的上下文中推断出来，则生成的答案被视为可信的；为了计算该值首先根据生成的答案确定一组索赔。然后将这些声明中的每一个与给定的上下文进行交叉检查，以确定它是否可以从给定的上下文中推断出</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 105.694ex;"><svg style="vertical-align: -2.17ex; min-width: 105.694ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.471ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1459)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1459) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="22558.3 -1459 1 2418"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(653,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1153,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1431,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1820,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(2376,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(2682,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(3238,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3516,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4072,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(4516,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(4910,0)"></path><path data-c="20" d="" transform="translate(5304,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(5554,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(5948,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(6392,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(6892,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(7284,0)"></path></g><g data-mml-node="mo" transform="translate(8005.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9061.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(750,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1306,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(2139,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2695,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3139,0)"></path><path data-c="20" d="" transform="translate(3531,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(3781,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4281,0)"></path><path data-c="20" d="" transform="translate(4587,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(4837,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5281,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(5559,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(6059,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6337,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(7170,0)"></path><path data-c="20" d="" transform="translate(7564,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(7814,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(8092,0)"></path><path data-c="20" d="" transform="translate(8648,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(8898,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9287,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(9843,0)"></path><path data-c="20" d="" transform="translate(10287,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(10537,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(11037,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(11481,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(12037,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(12481,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(12873,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(13373,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(13762,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(14206,0)"></path><path data-c="20" d="" transform="translate(14762,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(15012,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(15512,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(16068,0)"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(16462,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(17184,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(17628,0)"></path><path data-c="20" d="" transform="translate(18020,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(18270,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(18659,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(19215,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(19715,0)"></path><path data-c="20" d="" transform="translate(20104,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(20354,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(20798,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(21298,0)"></path><path data-c="20" d="" transform="translate(21854,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(22104,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(22660,0)"></path><path data-c="20" d="" transform="translate(23104,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(23354,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(23632,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(24188,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(24494,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(24938,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(25330,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(25722,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(26166,0)"></path><path data-c="20" d="" transform="translate(26722,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(26972,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(27278,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(27670,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(28170,0)"></path><path data-c="20" d="" transform="translate(29003,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(29253,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(29753,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(30031,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(30559,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(31003,0)"></path><path data-c="20" d="" transform="translate(31559,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(31809,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(32253,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(32753,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(33309,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(33698,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(34142,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(34670,0)"></path></g><g data-mml-node="mo" transform="translate(35337,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(7517,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(722,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1222,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1611,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2111,0)"></path><path data-c="20" d="" transform="translate(2389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(2639,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(3195,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3751,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(4584,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5140,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(5584,0)"></path><path data-c="20" d="" transform="translate(5976,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(6226,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(6726,0)"></path><path data-c="20" d="" transform="translate(7032,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(7282,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(7726,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(8004,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(8504,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(8782,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(9615,0)"></path><path data-c="20" d="" transform="translate(10009,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(10259,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(10537,0)"></path><path data-c="20" d="" transform="translate(11093,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(11343,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(11732,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(12288,0)"></path><path data-c="20" d="" transform="translate(12732,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(12982,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(13482,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(13926,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(14482,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(14926,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(15318,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(15818,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(16207,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(16651,0)"></path><path data-c="20" d="" transform="translate(17207,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(17457,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(17957,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(18513,0)"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(18907,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(19629,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(20073,0)"></path></g><g data-mml-node="mo" transform="translate(20743,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="35815" height="60" x="120" y="220"></rect></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1459 1 2418"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:"><g data-mml-node="mrow"></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><h3 id="示例">示例</h3><ul><li><strong>Question</strong>: Where and when was Einstein born?</li><li><strong>Context</strong>: Albert Einstein (born 14 March 1879) was aGerman-born theoretical physicist, widely held to be one of the greatestand most influential scientists of all time</li><li><strong>High faithfulness answer</strong>: Einstein was born inGermany on 14th March 1879.</li><li><strong>Low faithfulness answer</strong>: Einstein was born inGermany on 20th March 1879.</li></ul><h3 id="计算">计算</h3><ol type="1"><li><strong>Step 1</strong> 拆分回答为多个独立的陈述<ul><li>语句<ul><li>Einstein was born in Germany.</li><li>Einstein was born on 20th March 1879.</li></ul></li></ul></li><li><strong>Step 2</strong>针对每个语句验证其是否可以由给出的上下文推断出<ul><li>Yes</li><li>No</li></ul></li><li><strong>Step 3</strong> 使用上述公式计算忠实性 faithfulness = 1 / 2= 0.5</li></ol><h2 id="答案相关性answer-relevance">答案相关性（Answer Relevance）</h2><p>答案相关性侧重评估答案和给出 Prompt之间的相关性，较低的得分表示答案不完整或者包含冗余信息</p><p>这个指标通过问题、上下文和答案来计算</p><p>答案相关性定义为原始问题与一系列基于答案生成的人工问题（逆向）的平均余弦相似度<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 42.023ex;"><svg style="vertical-align: -2.804ex; min-width: 42.023ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.74ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1739.4)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1739.4) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="8487 -1739.4 1 2978.9"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,6.5)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(500,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1056,0)"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(1450,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2172,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2616,0)"></path><path data-c="20" d="" transform="translate(3008,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3258,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3650,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(4094,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4372,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(4816,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(5344,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(5844,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(6400,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(6844,0)"></path></g><g data-mml-node="mo" transform="translate(7649.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(8705.6,0)"><g data-mml-node="mn" transform="translate(414,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><rect width="1088" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(10200.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(408,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mi" transform="translate(11810.9,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(12243.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(12728.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(13197.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(13586.9,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(14976.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(15421,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g><g data-mml-node="mo" transform="translate(16585,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1739.4 1 2978.9"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:" transform="translate(0,6.5)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,0)"><g data-mml-node="mrow"></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 41.639ex;"><svg style="vertical-align: -2.804ex; min-width: 41.639ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="6.74ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1739.4)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1739.4) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="8402.2 -1739.4 1 2978.9"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,6.5)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(500,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1056,0)"></path><path data-c="77" d="M90 368Q84 378 76 380T40 385H18V431H24L43 430Q62 430 84 429T116 428Q206 428 221 431H229V385H215Q177 383 177 368Q177 367 221 239L265 113L339 328L333 345Q323 374 316 379Q308 384 278 385H258V431H264Q270 428 348 428Q439 428 454 431H461V385H452Q404 385 404 369Q404 366 418 324T449 234T481 143L496 100L537 219Q579 341 579 347Q579 363 564 373T530 385H522V431H529Q541 428 624 428Q692 428 698 431H703V385H697Q696 385 691 385T682 384Q635 377 619 334L559 161Q546 124 528 71Q508 12 503 1T487 -11H479Q460 -11 456 -4Q455 -3 407 133L361 267Q359 263 266 -4Q261 -11 243 -11H238Q225 -11 220 -3L90 368Z" transform="translate(1450,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2172,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2616,0)"></path><path data-c="20" d="" transform="translate(3008,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3258,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3650,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(4094,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4372,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(4816,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(5344,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(5844,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(6400,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(6844,0)"></path></g><g data-mml-node="mo" transform="translate(7649.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(8705.6,0)"><g data-mml-node="mn" transform="translate(414,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><rect width="1088" height="60" x="120" y="220"></rect></g><g data-mml-node="munderover" transform="translate(10200.2,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(408,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mfrac" transform="translate(11810.9,0)"><g data-mml-node="mrow" transform="translate(858.8,755)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1611.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(2111.9,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mo"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="msub" transform="translate(500,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(1889.5,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="mo" transform="translate(2389.5,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g><g data-mml-node="msub" transform="translate(2889.5,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g><g data-mml-node="mo" transform="translate(4053.4,0)"><path data-c="2225" d="M133 736Q138 750 153 750Q164 750 170 739Q172 735 172 250T170 -239Q164 -250 152 -250Q144 -250 138 -244L137 -243Q133 -241 133 -179T132 250Q132 731 133 736ZM329 739Q334 750 346 750Q353 750 361 744L362 743Q366 741 366 679T367 250T367 -178T362 -243L361 -244Q355 -250 347 -250Q335 -250 329 -239Q327 -235 327 250T329 739Z"></path></g></g><rect width="4753.4" height="60" x="120" y="220"></rect></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1739.4 1 2978.9"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:" transform="translate(0,6.5)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,0)"><g data-mml-node="mrow"></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><p>其中</p><ul><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="3.144ex" height="2.206ex" role="img" focusable="false" viewBox="0 -680 1389.5 975"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></g></svg></mjx-container></span>​ 是生成问题 i 的embedding</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.633ex" height="1.895ex" role="img" focusable="false" viewBox="0 -680 1163.9 837.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g></g></g></g></svg></mjx-container></span> 是原始问题的 embedding</li><li><span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g></svg></mjx-container></span> 是生成的问题数量，默认为3</li></ul><p>需要注意尽管在实践中，分数大部分时间都在 0 到 1之间，但由于余弦相似度在 -1 到 1之间的性质，在数学上不能保证值一定是正数</p><p>当一个答案直接恰当地解决了原始问题时，它就被认为是相关的；重要的是，我们对答案相关性的评估没有考虑事实性，而是惩罚答案缺乏完整性或包含多余细节的情况，为了计算该分数，多次提示LLM为生成的答案生成适当的问题，并测量这些生成的问题与原始问题之间的平均余弦相似性</p><p>其基本思想是，<strong>如果生成的答案准确地解决了最初的问题，LLM应该能够从与原始问题一致的答案中生成问题</strong></p><h3 id="示例-1">示例</h3><ul><li><strong>Question</strong>: Where is France and what is it’scapital?</li><li><strong>High faithfulness answer</strong>: France is in westernEurope.</li><li><strong>Low faithfulness answer</strong>: France is in westernEurope and Paris is its capital.</li></ul><h3 id="计算-1">计算</h3><ol type="1"><li><strong>Step 1</strong> 使用 LLM 根据生成的答案生成 n个变体问题；例如对于第一个答案，LLM 可能会生成以下可能的问题<ul><li>法国位于欧洲的哪个地区？</li><li>法国在欧洲的地理位置是什么？</li><li>你能确定法国所在的欧洲地区吗？</li></ul></li><li><strong>Step 2</strong>计算生成的问题与实际问题之间的平均余弦相似度</li></ol><h2 id="上下文精确性context-precision">上下文精确性（ContextPrecision）</h2><p>评估上下文中存在的所有基本事实相关项目的排名是否更高，理想情况下，所有相关的块都必须属于最高级别</p><p>该值通过问题、基本事实、上下文计算；值在 0 到 1之间，得分越高表示精度越高 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 78.574ex;"><svg style="vertical-align: -2.425ex; min-width: 78.574ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.98ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1571.7)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1571.7) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="16564.8 -1571.7 1 2643.3"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,-191.7)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="43" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q322 658 252 588Q173 509 173 342Q173 221 211 151Q232 111 263 84T328 45T384 29T428 24Q517 24 571 93T626 244Q626 251 632 257H660L666 251V236Q661 133 590 56T403 -21Q262 -21 159 83T56 342Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(722,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1222,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1778,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2167,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(2611,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3139,0)"></path><path data-c="20" d="" transform="translate(3528,0)"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(3778,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(4459,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4851,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(5295,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(5739,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(6017,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(6411,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(6689,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(7189,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(7745,0)"></path><path data-c="4B" d="M128 622Q121 629 117 631T101 634T58 637H25V683H36Q57 680 180 680Q315 680 324 683H335V637H313Q235 637 233 620Q232 618 232 462L233 307L379 449Q425 494 479 546Q518 584 524 591T531 607V608Q531 630 503 636Q501 636 498 636T493 637H489V683H499Q517 680 630 680Q704 680 716 683H722V637H708Q633 633 589 597Q584 592 495 506T406 419T515 254T631 80Q644 60 662 54T715 46H736V0H728Q719 3 615 3Q493 3 472 0H461V46H469Q515 46 515 72Q515 78 512 84L336 351Q332 348 278 296L232 251V156Q232 62 235 58Q243 47 302 46H335V0H324Q303 3 180 3Q45 3 36 0H25V46H58Q100 47 109 49T128 61V622Z" transform="translate(8523,0)"></path></g><g data-mml-node="mo" transform="translate(9578.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(10634.6,0)"><g data-mml-node="mrow" transform="translate(5853.7,803.3)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(2577.8,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(389,0)"><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(681,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1073,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1517,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1961,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(2239,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2633,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2911,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3411,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(3967,0)"></path><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z" transform="translate(4745,0)"></path></g><g data-mml-node="mo" transform="translate(5884.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="msub" transform="translate(6884.4,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mo" transform="translate(7820.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mtext"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(722,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1222,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1611,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2111,0)"></path><path data-c="20" d="" transform="translate(2389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(2639,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(3195,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3751,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(4584,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5140,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(5584,0)"></path><path data-c="20" d="" transform="translate(5976,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(6226,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(6726,0)"></path><path data-c="20" d="" transform="translate(7032,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(7282,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(7674,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(8118,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(8396,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(8840,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(9368,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9868,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(10424,0)"></path><path data-c="20" d="" transform="translate(10813,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(11063,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(11341,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(11730,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(12174,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(13007,0)"></path><path data-c="20" d="" transform="translate(13401,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(13651,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(13929,0)"></path><path data-c="20" d="" transform="translate(14485,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(14735,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(15124,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(15680,0)"></path><path data-c="20" d="" transform="translate(16124,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(16374,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(16763,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(17263,0)"></path><path data-c="A0" d="" transform="translate(17819,0)"></path></g><g data-mml-node="mi" transform="translate(18069,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mtext" transform="translate(18958,0)"><path data-c="A0" d=""></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(250,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(642,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1086,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(1480,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2036,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2314,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(2703,0)"></path></g></g><rect width="22255" height="60" x="120" y="220"></rect></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1571.7 1 2643.3"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:" transform="translate(0,-191.7)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,0)"><g data-mml-node="mrow"></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="52.905ex" height="5.296ex" role="img" focusable="false" viewBox="0 -1381 23384 2341"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(681,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1073,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1517,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(1961,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(2239,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(2633,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2911,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3411,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(3967,0)"></path><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z" transform="translate(4745,0)"></path></g><g data-mml-node="mo" transform="translate(5550.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6606.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mtext" transform="translate(4839.7,676)"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(389,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(781,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1337,0)"></path><path data-c="20" d="" transform="translate(1781,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(2031,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2587,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3087,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3481,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3759,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4148,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(4426,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4954,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(5398,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(5792,0)"></path><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z" transform="translate(6570,0)"></path></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mtext" transform="translate(389,0)"><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(389,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(781,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1337,0)"></path><path data-c="20" d="" transform="translate(1781,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(2031,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2587,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3087,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3481,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3759,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4148,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(4426,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4954,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(5398,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(5792,0)"></path><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z" transform="translate(6570,0)"></path></g><g data-mml-node="mo" transform="translate(7709.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mtext" transform="translate(8709.4,0)"><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(306,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(806,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1084,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1478,0)"></path><path data-c="20" d="" transform="translate(1922,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(2172,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2728,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(3228,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(3622,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3900,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(4289,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(4567,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5095,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(5539,0)"></path><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z" transform="translate(5933,0)"></path><path data-c="6B" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T97 124T98 167T98 217T98 272T98 329Q98 366 98 407T98 482T98 542T97 586T97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V463L180 233L240 287Q300 341 304 347Q310 356 310 364Q310 383 289 385H284V431H293Q308 428 412 428Q475 428 484 431H489V385H476Q407 380 360 341Q286 278 286 274Q286 273 349 181T420 79Q434 60 451 53T500 46H511V0H505Q496 3 418 3Q322 3 307 0H299V46H306Q330 48 330 65Q330 72 326 79Q323 84 276 153T228 222L176 176V120V84Q176 65 178 59T189 49Q210 46 238 46H254V0H246Q231 3 137 3T28 0H20V46H36Z" transform="translate(6711,0)"></path></g><g data-mml-node="mo" transform="translate(15948.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="16537.4" height="60" x="120" y="220"></rect></g></g></g></g></svg></mjx-container></span></p><h3 id="示例-2">示例</h3><ul><li><strong>Question</strong>: Question: Where is France and what isit’s capital? Ground truth: France is in Western Europe and its capitalis Paris.</li><li><strong>High faithfulness answer</strong>: [“France, in WesternEurope, encompasses medieval cities, alpine villages and Mediterraneanbeaches. Paris, its capital, is famed for its fashion houses, classicalart museums including the Louvre and monuments like the Eiffel Tower”,“The country is also renowned for its wines and sophisticated cuisine.Lascaux’s ancient cave drawings, Lyon’s Roman theater and the vastPalace of Versailles attest to its rich history.”]</li><li><strong>Low faithfulness answer</strong>: [“The country is alsorenowned for its wines and sophisticated cuisine. Lascaux’s ancient cavedrawings, Lyon’s Roman theater and”, “France, in Western Europe,encompasses medieval cities, alpine villages and Mediterranean beaches.Paris, its capital, is famed for its fashion houses, classical artmuseums including the Louvre and monuments like the Eiffel Tower”,]</li></ul><h2 id="计算-2">计算</h2><ol type="1"><li><strong>Step 1</strong>对检索出的每一个块，判断是否和给出问题的基本事实相关（relevant）</li><li><strong>Step 2</strong> 针对上下文每一个块计算 Precision@k<ul><li>Precision@1 = 0 / 1 = 0</li><li>Precision@2 = 1 / 2 = 0.5</li></ul></li><li><strong>Step 3</strong> 计算平均值<ul><li>Context Precision = (1 + 0.5) / 1 = 0.5</li></ul></li></ol><h2 id="上下文相关性context-relevancy">上下文相关性（ContextRelevancy）</h2><p>根据问题和上下文进行计算，值的范围在 (0,1)的范围内，值越高表示相关性越好</p><p>理想情况下，检索到的上下文应该只包含处理所提供查询的基本信息，为了计算该值，首先通过识别检索到的上下文中与回答给定问题相关的句子来估算<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="2.717ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 1201 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(923,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g></g></svg></mjx-container></span> ；最终得分公式如下 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 71.474ex;"><svg style="vertical-align: -2.17ex; min-width: 71.474ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.471ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1459)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1459) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="14995.8 -1459 1 2418"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(944,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1500,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1889,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(2333,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2861,0)"></path><path data-c="20" d="" transform="translate(3250,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3500,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3892,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(4336,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4614,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(5058,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(5586,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6086,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(6642,0)"></path><path data-c="79" d="M69 -66Q91 -66 104 -80T118 -116Q118 -134 109 -145T91 -160Q84 -163 97 -166Q104 -168 111 -168Q131 -168 148 -159T175 -138T197 -106T213 -75T225 -43L242 0L170 183Q150 233 125 297Q101 358 96 368T80 381Q79 382 78 382Q66 385 34 385H19V431H26L46 430Q65 430 88 429T122 428Q129 428 142 428T171 429T200 430T224 430L233 431H241V385H232Q183 385 185 366L286 112Q286 113 332 227L376 341V350Q376 365 366 373T348 383T334 385H331V431H337H344Q351 431 361 431T382 430T405 429T422 429Q477 429 503 431H508V385H497Q441 380 422 345Q420 343 378 235T289 9T227 -131Q180 -204 113 -204Q69 -204 44 -177T19 -116Q19 -89 35 -78T69 -66Z" transform="translate(7086,0)"></path></g><g data-mml-node="mo" transform="translate(7891.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(8947.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(9921.5,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(923,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(722,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1222,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(1611,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(2111,0)"></path><path data-c="20" d="" transform="translate(2389,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(2639,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(3195,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3751,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(4584,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5140,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(5584,0)"></path><path data-c="20" d="" transform="translate(5976,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(6226,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(6726,0)"></path><path data-c="20" d="" transform="translate(7032,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(7282,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(7676,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(8120,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(8676,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(9065,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9509,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(10065,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(10509,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(10953,0)"></path><path data-c="20" d="" transform="translate(11347,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(11597,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(11875,0)"></path><path data-c="20" d="" transform="translate(12431,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(12681,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(13073,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(13517,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(13906,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(14298,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(14576,0)"></path><path data-c="76" d="M338 431Q344 429 422 429Q479 429 503 431H508V385H497Q439 381 423 345Q421 341 356 172T288 -2Q283 -11 263 -11Q244 -11 239 -2Q99 359 98 364Q93 378 82 381T43 385H19V431H25L33 430Q41 430 53 430T79 430T104 429T122 428Q217 428 232 431H240V385H226Q187 384 184 370Q184 366 235 234L286 102L377 341V349Q377 363 367 372T349 383T335 385H331V431H338Z" transform="translate(15020,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(15548,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(15992,0)"></path><path data-c="20" d="" transform="translate(16548,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(16798,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(17242,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(17742,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(18298,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(18687,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(19131,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(19659,0)"></path></g><g data-mml-node="mo" transform="translate(20326,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="20804" height="60" x="120" y="220"></rect></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1459 1 2418"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:"><g data-mml-node="mrow"></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><h3 id="示例-3">示例</h3><ul><li><strong>Question</strong>: What is the capital of France?</li><li><strong>High faithfulness answer</strong>: France, in WesternEurope, encompasses medieval cities, alpine villages and Mediterraneanbeaches. Paris, its capital, is famed for its fashion houses, classicalart museums including the Louvre and monuments like the EiffelTower.</li><li><strong>Low faithfulness answer</strong>: France, in Western Europe,encompasses medieval cities, alpine villages and Mediterranean beaches.Paris, its capital, is famed for its fashion houses, classical artmuseums including the Louvre and monuments like the Eiffel Tower. Thecountry is also renowned for its wines and sophisticated cuisine.Lascaux’s ancient cave drawings, Lyon’s Roman theater and the vastPalace of Versailles attest to its rich history.</li></ul><h2 id="上下文召回context-recall">上下文召回（Context Recall）</h2><p>上下文召回指标衡量检索到的上下文和标注答案（被视为基本事实 groundtruth）的一致程度</p><p>它是基于基本事实和检索到的上下文计算的，值的范围在 0 到 1之间，值越高表示效果越好</p><p>为了从基本事实答案中估计上下文回忆，分析基本事实答案的每一句话，以确定它是否可以归因于检索到的上下文；在理想的情况下，基本事实答案中的所有句子都应归因于检索到的上下文<span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 67.895ex;"><svg style="vertical-align: -2.17ex; min-width: 67.895ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.471ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1459)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1459) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="14204.8 -1459 1 2418"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(444,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(944,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(1500,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(1889,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(2333,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(2861,0)"></path><path data-c="20" d="" transform="translate(3250,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3500,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3892,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(4336,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(4780,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5280,0)"></path><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z" transform="translate(5558,0)"></path></g><g data-mml-node="mo" transform="translate(6113.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7169.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(220,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="47" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q401 658 376 654T316 633T254 592T205 519T177 411Q173 369 173 335Q173 259 192 201T238 111T302 58T370 31T431 24Q478 24 513 45T559 100Q562 110 562 160V212Q561 213 557 216T551 220T542 223T526 225T502 226T463 227H437V273H449L609 270Q715 270 727 273H735V227H721Q674 227 668 215Q666 211 666 108V6Q660 0 657 0Q653 0 639 10Q617 25 600 42L587 54Q571 27 524 3T406 -22Q317 -22 238 22T108 151T56 342Z"></path><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z" transform="translate(785,0)"></path><path data-c="20" d="" transform="translate(1507,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(1757,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2151,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(2595,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(3151,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3540,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(3984,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(4540,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(4984,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(5428,0)"></path><path data-c="20" d="" transform="translate(5822,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(6072,0)"></path><path data-c="68" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 124T102 167T103 217T103 272T103 329Q103 366 103 407T103 482T102 542T102 586T102 603Q99 622 88 628T43 637H25V660Q25 683 27 683L37 684Q47 685 66 686T103 688Q120 689 140 690T170 693T181 694H184V367Q244 442 328 442Q451 442 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(6461,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(7017,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(7517,0)"></path><path data-c="20" d="" transform="translate(7906,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(8156,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(8600,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9100,0)"></path><path data-c="20" d="" transform="translate(9656,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(9906,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(10462,0)"></path><path data-c="20" d="" transform="translate(10906,0)"></path><path data-c="61" d="M137 305T115 305T78 320T63 359Q63 394 97 421T218 448Q291 448 336 416T396 340Q401 326 401 309T402 194V124Q402 76 407 58T428 40Q443 40 448 56T453 109V145H493V106Q492 66 490 59Q481 29 455 12T400 -6T353 12T329 54V58L327 55Q325 52 322 49T314 40T302 29T287 17T269 6T247 -2T221 -8T190 -11Q130 -11 82 20T34 107Q34 128 41 147T68 188T116 225T194 253T304 268H318V290Q318 324 312 340Q290 411 215 411Q197 411 181 410T156 406T148 403Q170 388 170 359Q170 334 154 320ZM126 106Q126 75 150 51T209 26Q247 26 276 49T315 109Q317 116 318 175Q318 233 317 233Q309 233 296 232T251 223T193 203T147 166T126 106Z" transform="translate(11156,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(11656,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(12045,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(12434,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(12826,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(13104,0)"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(13660,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(14216,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(14605,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(15049,0)"></path><path data-c="20" d="" transform="translate(15605,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(15855,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(16244,0)"></path><path data-c="20" d="" transform="translate(16744,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(16994,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(17438,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(17938,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(18494,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(18883,0)"></path><path data-c="78" d="M201 0Q189 3 102 3Q26 3 17 0H11V46H25Q48 47 67 52T96 61T121 78T139 96T160 122T180 150L226 210L168 288Q159 301 149 315T133 336T122 351T113 363T107 370T100 376T94 379T88 381T80 383Q74 383 44 385H16V431H23Q59 429 126 429Q219 429 229 431H237V385Q201 381 201 369Q201 367 211 353T239 315T268 274L272 270L297 304Q329 345 329 358Q329 364 327 369T322 376T317 380T310 384L307 385H302V431H309Q324 428 408 428Q487 428 493 431H499V385H492Q443 385 411 368Q394 360 377 341T312 257L296 236L358 151Q424 61 429 57T446 50Q464 46 499 46H516V0H510H502Q494 1 482 1T457 2T432 2T414 3Q403 3 377 3T327 1L304 0H295V46H298Q309 46 320 51T331 63Q331 65 291 120L250 175Q249 174 219 133T185 88Q181 83 181 74Q181 63 188 55T206 46Q208 46 208 23V0H201Z" transform="translate(19327,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(19855,0)"></path></g><g data-mml-node="mo" transform="translate(20522,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(4470.5,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(750,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(1306,0)"></path><path data-c="62" d="M307 -11Q234 -11 168 55L158 37Q156 34 153 28T147 17T143 10L138 1L118 0H98V298Q98 599 97 603Q94 622 83 628T38 637H20V660Q20 683 22 683L32 684Q42 685 61 686T98 688Q115 689 135 690T165 693T176 694H179V543Q179 391 180 391L183 394Q186 397 192 401T207 411T228 421T254 431T286 439T323 442Q401 442 461 379T522 216Q522 115 458 52T307 -11ZM182 98Q182 97 187 90T196 79T206 67T218 55T233 44T250 35T271 29T295 26Q330 26 363 46T412 113Q424 148 424 212Q424 287 412 323Q385 405 300 405Q270 405 239 390T188 347L182 339V98Z" transform="translate(2139,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(2695,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(3139,0)"></path><path data-c="20" d="" transform="translate(3531,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(3781,0)"></path><path data-c="66" d="M273 0Q255 3 146 3Q43 3 34 0H26V46H42Q70 46 91 49Q99 52 103 60Q104 62 104 224V385H33V431H104V497L105 564L107 574Q126 639 171 668T266 704Q267 704 275 704T289 705Q330 702 351 679T372 627Q372 604 358 590T321 576T284 590T270 627Q270 647 288 667H284Q280 668 273 668Q245 668 223 647T189 592Q183 572 182 497V431H293V385H185V225Q185 63 186 61T189 57T194 54T199 51T206 49T213 48T222 47T231 47T241 46T251 46H282V0H273Z" transform="translate(4281,0)"></path><path data-c="20" d="" transform="translate(4587,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(4837,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(5231,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(5675,0)"></path><path data-c="74" d="M27 422Q80 426 109 478T141 600V615H181V431H316V385H181V241Q182 116 182 100T189 68Q203 29 238 29Q282 29 292 100Q293 108 293 146V181H333V146V134Q333 57 291 17Q264 -10 221 -10Q187 -10 162 2T124 33T105 68T98 100Q97 107 97 248V385H18V422H27Z" transform="translate(6231,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(6620,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(7064,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(7620,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(8064,0)"></path><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z" transform="translate(8508,0)"></path><path data-c="20" d="" transform="translate(8902,0)"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(9152,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(9430,0)"></path><path data-c="20" d="" transform="translate(9986,0)"></path><path data-c="47" d="M56 342Q56 428 89 500T174 615T283 681T391 705Q394 705 400 705T408 704Q499 704 569 636L582 624L612 663Q639 700 643 704Q644 704 647 704T653 705H657Q660 705 666 699V419L660 413H626Q620 419 619 430Q610 512 571 572T476 651Q457 658 426 658Q401 658 376 654T316 633T254 592T205 519T177 411Q173 369 173 335Q173 259 192 201T238 111T302 58T370 31T431 24Q478 24 513 45T559 100Q562 110 562 160V212Q561 213 557 216T551 220T542 223T526 225T502 226T463 227H437V273H449L609 270Q715 270 727 273H735V227H721Q674 227 668 215Q666 211 666 108V6Q660 0 657 0Q653 0 639 10Q617 25 600 42L587 54Q571 27 524 3T406 -22Q317 -22 238 22T108 151T56 342Z" transform="translate(10236,0)"></path><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z" transform="translate(11021,0)"></path></g><g data-mml-node="mo" transform="translate(12021,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="21000" height="60" x="120" y="220"></rect></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1459 1 2418"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:"><g data-mml-node="mrow"></g></g></g></svg></g></g></g></g></svg></mjx-container></span></p><h3 id="示例-4">示例</h3><ul><li><strong>Question</strong>: Where is France and what is it’scapital?</li><li><strong>Group truth</strong>: France is in Western Europe and itscapital is Paris.</li><li><strong>High faithfulness answer</strong>: France, in WesternEurope, encompasses medieval cities, alpine villages and Mediterraneanbeaches. Paris, its capital, is famed for its fashion houses, classicalart museums including the Louvre and monuments like the EiffelTower.</li><li><strong>Low faithfulness answer</strong>: France, in Western Europe,encompasses medieval cities, alpine villages and Mediterranean beaches.The country is also renowned for its wines and sophisticated cuisine.Lascaux’s ancient cave drawings, Lyon’s Roman theater and the vastPalace of Versailles attest to its rich history.</li></ul><h3 id="计算-3">计算</h3><ol type="1"><li><strong>Step 1</strong> 把基本事实答案分解成单独的陈述<ul><li>France is in Western Europe.</li><li>Its capital is Paris.</li></ul></li><li><strong>Step 2</strong>对于每个基本事实陈述，验证其是否可归因于检索到的上下文<ul><li>Yes</li><li>No</li></ul></li><li><strong>Step 3</strong> 使用上述公式进行计算 context recall = 1 / 2= 0.5</li></ol><h2 id="上下文实体召回context-entities-recall">上下文实体召回（Contextentities recall）</h2><p>// TODO</p><h2 id="回答语义相似性answer-semantic-similarity">回答语义相似性（Answersemantic similarity）</h2><p>对生成的答案与基本事实之间的语义相似性进行评估</p><p>基于答案和基本事实进行计算，值在 0 到 1之间，分数越高表示生成的答案与基本事实之间的一致性越好</p><p>测量答案语意相似性可以为生成的响应的质量提供有价值的见解，该评估利用交叉编码器模型（cross-encodermodel）来计算</p><h3 id="示例-5">示例</h3><ul><li><strong>Group truth</strong>: Albert Einstein’s theory of relativityrevolutionized our understanding of the universe.</li><li><strong>High faithfulness answer</strong>: Einstein’s groundbreakingtheory of relativity transformed our comprehension of the cosmos.</li><li><strong>Low faithfulness answer</strong>: Isaac Newton’s laws ofmotion greatly influenced classical physics.</li></ul><h3 id="计算-4">计算</h3><ol type="1"><li><strong>Step 1</strong> 使用特殊 embedding 模型将基本事实向量化</li><li><strong>Step 2</strong> 使用同样模型对给出的回答向量化</li><li><strong>Step 3</strong> 计算两者余弦相似性</li></ol><h2 id="回答正确性answer-correctness">回答正确性（AnswerCorrectness）</h2><p>答案和基本事实相比，衡量生成答案的准确性</p><p>通过答案和基本事实计算，得分在 0 到 1之间，高得分意味着给出答案和基本事实关联更紧密（closeralignment），标志着更高的正确性 <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 43.941ex;"><svg style="vertical-align: -2.171ex; min-width: 43.941ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="5.473ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -1459.5)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(800,0) translate(-800,0)"><g transform="translate(0 1459.5) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="8910.9 -1459.5 1 2419"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,0.5)"><g data-mml-node="mtd"><g data-mml-node="mtext"><path data-c="46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(653,0)"></path><path data-c="20" d="" transform="translate(1153,0)"></path><path data-c="53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z" transform="translate(1403,0)"></path><path data-c="63" d="M370 305T349 305T313 320T297 358Q297 381 312 396Q317 401 317 402T307 404Q281 408 258 408Q209 408 178 376Q131 329 131 219Q131 137 162 90Q203 29 272 29Q313 29 338 55T374 117Q376 125 379 127T395 129H409Q415 123 415 120Q415 116 411 104T395 71T366 33T318 2T249 -11Q163 -11 99 53T34 214Q34 318 99 383T250 448T370 421T404 357Q404 334 387 320Z" transform="translate(1959,0)"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(2403,0)"></path><path data-c="72" d="M36 46H50Q89 46 97 60V68Q97 77 97 91T98 122T98 161T98 203Q98 234 98 269T98 328L97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 60 434T96 436Q112 437 131 438T160 441T171 442H174V373Q213 441 271 441H277Q322 441 343 419T364 373Q364 352 351 337T313 322Q288 322 276 338T263 372Q263 381 265 388T270 400T273 405Q271 407 250 401Q234 393 226 386Q179 341 179 207V154Q179 141 179 127T179 101T180 81T180 66V61Q181 59 183 57T188 54T193 51T200 49T207 48T216 47T225 47T235 46T245 46H276V0H267Q249 3 140 3Q37 3 28 0H20V46H36Z" transform="translate(2903,0)"></path><path data-c="65" d="M28 218Q28 273 48 318T98 391T163 433T229 448Q282 448 320 430T378 380T406 316T415 245Q415 238 408 231H126V216Q126 68 226 36Q246 30 270 30Q312 30 342 62Q359 79 369 104L379 128Q382 131 395 131H398Q415 131 415 121Q415 117 412 108Q393 53 349 21T250 -11Q155 -11 92 58T28 218ZM333 275Q322 403 238 411H236Q228 411 220 410T195 402T166 381T143 340T127 274V267H333V275Z" transform="translate(3295,0)"></path></g><g data-mml-node="mo" transform="translate(4016.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(5072.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(5395.2,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(278,0)"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(722,0)"></path></g><g data-mml-node="mo" transform="translate(1681,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(220,-710)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(667,0)"><path data-c="54" d="M36 443Q37 448 46 558T55 671V677H666V671Q667 666 676 556T685 443V437H645V443Q645 445 642 478T631 544T610 593Q593 614 555 625Q534 630 478 630H451H443Q417 630 414 618Q413 616 413 339V63Q420 53 439 50T528 46H558V0H545L361 3Q186 1 177 0H164V46H194Q264 46 283 49T309 63V339V550Q309 620 304 625T271 630H244H224Q154 630 119 601Q101 585 93 554T81 486T76 443V437H36V443Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(722,0)"></path></g><g data-mml-node="mo" transform="translate(2070,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(2570.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3570.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(5070.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(6070.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(6459.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(6737.9,0)"><path data-c="46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(653,0)"></path></g><g data-mml-node="mo" transform="translate(8071.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(8572.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(9572.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mtext" transform="translate(9850.3,0)"><path data-c="46" d="M128 619Q121 626 117 628T101 631T58 634H25V680H582V676Q584 670 596 560T610 444V440H570V444Q563 493 561 501Q555 538 543 563T516 601T477 622T431 631T374 633H334H286Q252 633 244 631T233 621Q232 619 232 490V363H284Q287 363 303 363T327 364T349 367T372 373T389 385Q407 403 410 459V480H450V200H410V221Q407 276 389 296Q381 303 371 307T348 313T327 316T303 317T284 317H232V189L233 61Q240 54 245 52T270 48T333 46H360V0H348Q324 3 182 3Q51 3 36 0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="4E" d="M42 46Q74 48 94 56T118 69T128 86V634H124Q114 637 52 637H25V683H232L235 680Q237 679 322 554T493 303L578 178V598Q572 608 568 613T544 627T492 637H475V683H483Q498 680 600 680Q706 680 715 683H724V637H707Q634 633 622 598L621 302V6L614 0H600Q585 0 582 3T481 150T282 443T171 605V345L172 86Q183 50 257 46H274V0H265Q250 3 150 3Q48 3 33 0H25V46H42Z" transform="translate(653,0)"></path></g><g data-mml-node="mo" transform="translate(11253.3,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(11531.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(11920.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="12509.3" height="60" x="120" y="220"></rect></g></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="0 -1459.5 1 2419"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:" transform="translate(0,0.5)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,0)"><g data-mml-node="mrow"></g></g></g></g></svg></g></g></g></g></svg></mjx-container></span> 明确公式中的概念</p><ul><li>TP（TruePrositive）：存在于基本事实和生成答案中的事实或陈述（和事实匹配）<em>匹配</em></li><li>FP（FalsePrositive）：出现在生成的答案中但不在基本事实中的事实或陈述（比事实多的）<em>幻觉</em></li><li>FN （FalseNegative）：存在于基本事实中但不存在于生成的答案中的事实或陈述（比事实少的）<em>遗漏</em></li></ul><h3 id="示例-6">示例</h3><ul><li><strong>Group truth</strong>: Einstein was born in 1879 inGermany.</li><li><strong>High faithfulness answer</strong>: In 1879, Einstein wasborn in Germany.</li><li><strong>Low faithfulness answer</strong>: Einstein was born in Spainin 1879.</li></ul><h3 id="计算-5">计算</h3><ol type="1"><li><strong>Step 1</strong> 根据回答和事实确认 TP、FP、FN<ul><li>TP <code>[Einstein was born in 1879]</code></li><li>FP <code>[Einstein was born in Spain]</code></li><li>FN <code>[Einstein was born in Germany]</code></li></ul></li><li><strong>Step 2</strong> 计算 F1 分数<ul><li>F1 Score = 1 / (1 + 0.5 * (1 + 1)) = 0.5</li></ul></li><li><strong>Step 3</strong>结合回答语义相似性和合适的权重计算加权平均数</li></ol><h2 id="方面评估aspect-critique">方面评估（Aspect Critique）</h2><p>简而言之就是定义某一方面的评估维度（例如危害性、正确性）</p><p>使用回答通过 LLM 进行评估</p><h3 id="示例-7">示例</h3><p>SUPPORTED_ASPECTS = [ harmfulness, maliciousness, coherence,correctness, conciseness ]</p><h3 id="计算-6">计算</h3><ol type="1"><li><strong>Step 1</strong> 判断方面属于危害性，使用对应的Prompt，使用特定的查询完成<ul><li>关于危害性，问题是 Does the submission cause or have the potentialto cause harm to individuals, groups, or society at large?</li><li>使用三个不同的 LLM 进行判断<ul><li>Verdict 1: YES</li><li>Verdict 2: NO</li><li>Verdict 3: YES</li></ul></li></ul></li><li><strong>Step 2</strong> 返回多数结果 YES</li></ol><h1 id="指标总结">指标总结</h1><p>衡量指标的基础概念：</p><ul><li>question 问题</li><li>answer 回答</li><li>context 上下文</li><li>chunk 文档块</li><li>group truth 基本事实</li></ul><table><colgroup><col style="width: 26%"><col style="width: 32%"><col style="width: 6%"><col style="width: 36%"></colgroup><thead><tr><th style="text-align: center;">指标</th><th style="text-align: center;">范围</th><th style="text-align: center;">相关性</th><th style="text-align: center;">描述</th></tr></thead><tbody><tr><td style="text-align: center;">Faithfulness</td><td style="text-align: center;">(0,1)</td><td style="text-align: center;">正</td><td style="text-align: center;">生成的回答在给定上下文中的事实一致性</td></tr><tr><td style="text-align: center;">Answer Relevance</td><td style="text-align: center;">(0,1) 但因为余弦相似性特性不绝对</td><td style="text-align: center;">正</td><td style="text-align: center;">答案和给出资料之间的相关性</td></tr><tr><td style="text-align: center;">Context Precision</td><td style="text-align: center;">(0,1)</td><td style="text-align: center;">正</td><td style="text-align: center;">上下文检索的准确性</td></tr><tr><td style="text-align: center;">Context Relevancy</td><td style="text-align: center;">(0,1)</td><td style="text-align: center;">正</td><td style="text-align: center;">上下文检索的相关性</td></tr><tr><td style="text-align: center;">Context Recall</td><td style="text-align: center;">(0,1)</td><td style="text-align: center;">正</td><td style="text-align: center;">上下文检索和基础事实的一致程度</td></tr><tr><td style="text-align: center;">Context entities recall</td><td style="text-align: center;">TODO</td><td style="text-align: center;">TODO</td><td style="text-align: center;">TODO</td></tr><tr><td style="text-align: center;">Answer semantic similarity</td><td style="text-align: center;">(0,1)</td><td style="text-align: center;">正</td><td style="text-align: center;">答案与基本事实之间的语义相似性</td></tr><tr><td style="text-align: center;">Aspect Critique</td><td style="text-align: center;">/</td><td style="text-align: center;">/</td><td style="text-align: center;">基于 LLM 的投票制评估</td></tr></tbody></table><h1 id="参考">参考</h1><p><a href="https://docs.ragas.io/en/stable/concepts/metrics/index.html">Metrics| Ragas</a></p><p><a href="https://github.com/explodinggradients/ragas">explodinggradients/ragas:Evaluation framework for your Retrieval Augmented Generation (RAG)pipelines (github.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/AI/">AI</category>
      
      
      <category domain="https://www.kugaaa.com/tags/RAG/">RAG</category>
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/AI/Ragas%20%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LangChain 文档学习 No.11 - 索引</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.11%20-%20%E7%B4%A2%E5%BC%95.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.11%20-%20%E7%B4%A2%E5%BC%95.html</guid>
      <pubDate>Sun, 19 May 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;索引（Indexing）API
支持将任何来源的文档加载到向量存储中并保持同步，具体来说有助于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免重复数据写入向量数据库&lt;/li&gt;
&lt;li&gt;避免重写未更改的数据&lt;/li&gt;
&lt;li&gt;避免在未更改的内容上重新计算 embeddings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些目标可以帮助节省时间和金钱、改进矢量搜索结果&lt;/p&gt;
&lt;p&gt;重要的是，即使原始文本经过了一些转换步骤（例如文本切分
chunking）索引依然可以生效&lt;/p&gt;
&lt;h1 id=&quot;如何工作&quot;&gt;如何工作&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>索引（Indexing）API支持将任何来源的文档加载到向量存储中并保持同步，具体来说有助于：</p><ul><li>避免重复数据写入向量数据库</li><li>避免重写未更改的数据</li><li>避免在未更改的内容上重新计算 embeddings</li></ul><p>这些目标可以帮助节省时间和金钱、改进矢量搜索结果</p><p>重要的是，即使原始文本经过了一些转换步骤（例如文本切分chunking）索引依然可以生效</p><h1 id="如何工作">如何工作</h1><p>LangChain Indexing 使用记录管理器 <code>RecordManager</code>来跟踪文档写入向量存储的情况</p><p>当进行内容索引时，会计算每一个文档的哈希值，并且记录以下内容：</p><ul><li>文档的哈希值（页内容和元数据）</li><li>写入时间</li><li>资源 ID，每个文档都应该在其元数据中包含 ID信息，以便能够确定该文档的最终来源</li></ul><h1 id="删除模式">删除模式</h1><p>将文档添加到向量数据库后，可能需要删除一些已经存在的文档</p><p>有时可能希望删除与正在索引的新文档来源相同的任何现有文档（删除同源文档）</p><p>或者希望批量删除所有现有文档，API提供的删除模式提供了所需的行为：</p><table><colgroup><col style="width: 21%" /><col style="width: 15%" /><col style="width: 7%" /><col style="width: 19%" /><col style="width: 15%" /><col style="width: 19%" /></colgroup><thead><tr><th style="text-align: center;">模式</th><th style="text-align: center;">重复数据</th><th style="text-align: center;">并行</th><th style="text-align: center;">清理源文件</th><th style="text-align: center;">同源删除</th><th style="text-align: center;">删除时机</th></tr></thead><tbody><tr><td style="text-align: center;">None</td><td style="text-align: center;">✅</td><td style="text-align: center;">✅</td><td style="text-align: center;">❌</td><td style="text-align: center;">❌</td><td style="text-align: center;">/</td></tr><tr><td style="text-align: center;">Incremental</td><td style="text-align: center;">✅</td><td style="text-align: center;">✅</td><td style="text-align: center;">❌</td><td style="text-align: center;">✅</td><td style="text-align: center;">立即</td></tr><tr><td style="text-align: center;">Full</td><td style="text-align: center;">✅</td><td style="text-align: center;">❌</td><td style="text-align: center;">✅</td><td style="text-align: center;">✅</td><td style="text-align: center;">索引结束时</td></tr></tbody></table><ul><li>None 模式不会做任何自动化的清理，允许用户手动进行删除</li><li>Incremental 和 Full 将会进行自动清理<ul><li>如果源文档或派生文档的内容发生了更改，则 Incremental 或 Full模式都将清除（删除）旧版本的内容</li><li>如果源文档已被删除（意味着它不包括在当前正在索引的文档中），则 Full模式将正确地将其从向量存储中删除，但 Incremental 模式不会</li></ul></li><li>当内容发生变化时（例如，源 PDF文件被修改），在索引期间在一定时间窗口内，新版本和旧版本都可以返回给用户，这种情况发生在写入新内容之后，但在删除旧版本之前（先加后删）<ul><li>Incremental 最大限度地处理了这种情况，能够在写入时连续进行清理</li><li>Full 只能在批量写入后进行清理</li></ul></li></ul><h1 id="要求">要求</h1><p><em>从实现的功能也可以看出来，想要实现 Indexing的功能对向量存储的能力有要求</em></p><ol type="1"><li>不要对预先写入过数据的向量存储使用，因为这些旧数据没有被管理</li><li>仅适用于 LangChain 集成的 <code>vectorstore</code><ul><li>支持通过 ID 添加（<code>add_documents</code> 方法带有<code>ids</code> 参数）</li><li>支持通过 ID 删除（<code>delete</code> 方法带有 <code>ids</code>参数）</li></ul></li></ol><h1 id="注意">注意</h1><p>记录管理器基于时间来确定可以清理哪些内容（当使用 Incremental 或 Full模式时）</p><p>如果两个任务接连运行，并且第一个任务在时间更新之前完成，那么第二个任务可能无法清理内容</p><p>不过这种情况不太可能发生，因为：</p><ul><li><code>RecordManager</code> 使用更高精度（higherresolution）的时间戳</li><li>数据变更在第一个任务和第二个任务这个范围内，不太发生在很小的时间间隔内</li><li>索引任务通常需要几毫秒以上的时间</li></ul><h1 id="快速开始">快速开始</h1><p>需要用到的 API</p><ul><li>SQLRecordManager</li><li>index</li><li>Document</li><li>ElasticsearchStore</li><li>OpenAIEmbeddings</li></ul><p>初始化向量数据库并设置 embeddings</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">collection_name = <span class="string">&quot;test_index&quot;</span></span><br><span class="line"></span><br><span class="line">embedding = OpenAIEmbeddings()</span><br><span class="line"></span><br><span class="line">vectorstore = ElasticsearchStore(</span><br><span class="line">    es_url=<span class="string">&quot;http://localhost:9200&quot;</span>, index_name=<span class="string">&quot;test_index&quot;</span>, embedding=embedding</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>初始化一个记录管理器（record manage）选择合适的命名空间</p><p>建议使用一个既能表达向量存储，又能表达向量存储内集合的名字，例如<code>redis/my_docs</code>、<code>chromadb/my_docs</code> 等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">namespace = <span class="string">f&quot;elasticsearch/<span class="subst">&#123;collection_name&#125;</span>&quot;</span></span><br><span class="line">record_manager = SQLRecordManager(</span><br><span class="line">    namespace, db_url=<span class="string">&quot;sqlite:///record_manager_cache.sql&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>使用记录管理器前创建一个 schema</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">record_manager.create_schema()</span><br></pre></td></tr></table></figure><p>下面开始索引文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doc1 = Document(page_content=<span class="string">&quot;kitty&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;kitty.txt&quot;</span>&#125;)</span><br><span class="line">doc2 = Document(page_content=<span class="string">&quot;doggy&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="source">Source</h1><p>元数据属性中有一个名叫 <code>source</code>的变量，资源应该指向最终相关的文档</p><p>举一个例子，如果有一些文档都是由父文档进行拆分的，那么它们的<code>source</code> 属性应该相同并且指向相关的父文档</p><p>通常 <code>source</code> 应该是存在明确值的，在以下场景可能为<code>None</code></p><ul><li>不打算使用 Incremental 模式</li><li>因为一些原因不能明确文档的来源</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义父文档</span></span><br><span class="line">doc1 = Document(</span><br><span class="line">    page_content=<span class="string">&quot;kitty kitty kitty kitty kitty&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;kitty.txt&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line">doc2 = Document(page_content=<span class="string">&quot;doggy doggy the doggy&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分子文档</span></span><br><span class="line">new_docs = CharacterTextSplitter(</span><br><span class="line">    separator=<span class="string">&quot;t&quot;</span>, keep_separator=<span class="literal">True</span>, chunk_size=<span class="number">12</span>, chunk_overlap=<span class="number">2</span></span><br><span class="line">).split_documents([doc1, doc2])</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">Document</span>(<span class="name">page_content=</span><span class="symbol">&#x27;kitty</span> kit&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;tty</span> kitty ki&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;tty</span> kitty&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;doggy</span> doggy&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;the</span> doggy&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;)]</span><br></pre></td></tr></table></figure><p>索引文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index(</span><br><span class="line">    new_docs,</span><br><span class="line">    record_manager,</span><br><span class="line">    vectorstore,</span><br><span class="line">    cleanup=<span class="string">&quot;incremental&quot;</span>,</span><br><span class="line">    source_id_key=<span class="string">&quot;source&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;num_added&#x27;: <span class="number">5</span>, &#x27;num_updated&#x27;: <span class="number">0</span>, &#x27;num_skipped&#x27;: <span class="number">0</span>, &#x27;num_deleted&#x27;: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>模拟相同 source 的文档，必须设置 <code>source = doggy.txt</code>才能让文档替换为新版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">changed_doggy_docs = [</span><br><span class="line">    Document(page_content=<span class="string">&quot;woof woof&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;),</span><br><span class="line">    Document(page_content=<span class="string">&quot;woof woof woof&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index(</span><br><span class="line">    changed_doggy_docs,</span><br><span class="line">    record_manager,</span><br><span class="line">    vectorstore,</span><br><span class="line">    cleanup=<span class="string">&quot;incremental&quot;</span>,</span><br><span class="line">    source_id_key=<span class="string">&quot;source&quot;</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到新增了两条并且删除了两条</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;num_added&#x27;: <span class="number">2</span>, &#x27;num_updated&#x27;: <span class="number">0</span>, &#x27;num_skipped&#x27;: <span class="number">0</span>, &#x27;num_deleted&#x27;: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>做一次查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vectorstore.similarity_search(<span class="string">&quot;dog&quot;</span>, k=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">Document</span>(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;tty</span> kitty&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;tty</span> kitty ki&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;kitty</span> kit&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;kitty.txt</span>&#x27;&#125;)]</span><br></pre></td></tr></table></figure><h1 id="使用加载器loader">使用加载器（Loader）</h1><p>索引可以接受文档的 iterable，也可以接受任意的 loader</p><p><strong>需要注意：使用 loader 需要明确设置 source</strong></p><p>实现一个 <code>BaseLoader</code>，mock 加载了几个文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders.base <span class="keyword">import</span> BaseLoader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCustomLoader</span>(<span class="title class_ inherited__">BaseLoader</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">lazy_load</span>(<span class="params">self</span>):</span><br><span class="line">        text_splitter = CharacterTextSplitter(</span><br><span class="line">            separator=<span class="string">&quot;t&quot;</span>, keep_separator=<span class="literal">True</span>, chunk_size=<span class="number">12</span>, chunk_overlap=<span class="number">2</span></span><br><span class="line">        )</span><br><span class="line">        docs = [</span><br><span class="line">            Document(page_content=<span class="string">&quot;woof woof&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;),</span><br><span class="line">            Document(page_content=<span class="string">&quot;woof woof woof&quot;</span>, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;doggy.txt&quot;</span>&#125;),</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> text_splitter.split_documents(docs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(self.lazy_load())</span><br></pre></td></tr></table></figure><p>从 loader 中读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loader = MyCustomLoader()</span><br><span class="line">loader.load()</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">Document</span>(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;)]</span><br></pre></td></tr></table></figure><p>索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index(loader, record_manager, vectorstore, cleanup=<span class="string">&quot;full&quot;</span>, source_id_key=<span class="string">&quot;source&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;num_added&#x27;: <span class="number">2</span>, &#x27;num_updated&#x27;: <span class="number">0</span>, &#x27;num_skipped&#x27;: <span class="number">0</span>, &#x27;num_deleted&#x27;: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><p>查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vectorstore.similarity_search(<span class="string">&quot;dog&quot;</span>, k=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="name">Document</span>(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;),</span><br><span class="line"> Document(<span class="name">page_content=</span><span class="symbol">&#x27;woof</span> woof woof&#x27;, metadata=&#123;<span class="symbol">&#x27;source</span><span class="symbol">&#x27;:</span> <span class="symbol">&#x27;doggy.txt</span>&#x27;&#125;)]</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><ahref="https://python.langchain.com/v0.1/docs/modules/data_connection/indexing/#deletion-modes">Indexing| 🦜️🔗 LangChain</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/">LangChain</category>
      
      
      <category domain="https://www.kugaaa.com/tags/AI/">AI</category>
      
      <category domain="https://www.kugaaa.com/tags/LangChain/">LangChain</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LangChain/LangChain%20%E6%96%87%E6%A1%A3%E5%AD%A6%E4%B9%A0%20No.11%20-%20%E7%B4%A2%E5%BC%95.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>读懂 GC 日志</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97.html</guid>
      <pubDate>Fri, 10 May 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;当使用 Java 或任何其他基于 JVM
的编程语言时，其中一个核心功能是内存清理（垃圾回收）&lt;/p&gt;
&lt;p&gt;和 C 和 C++ 等语言不同，使用者不需要关注内存相关的操作，例如
&lt;code&gt;malloc&lt;/code&gt;、&lt;code&gt;calloc&lt;/code&gt;、&lt;code&gt;realloc&lt;/code&gt;、&lt;code&gt;free&lt;/code&gt;
等函数&lt;/p&gt;
&lt;p&gt;释放内存的操作就是由 JVM 中名为 &lt;strong&gt;Garbage Collector&lt;/strong&gt;
的角色完成的&lt;/p&gt;
&lt;h1 id=&quot;垃圾回收器是如何工作的&quot;&gt;垃圾回收器是如何工作的&lt;/h1&gt;
&lt;p&gt;JVM
在后台运行垃圾回收器来查找未使用的引用，这些引用占用的内存可以被释放并重新使用&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>当使用 Java 或任何其他基于 JVM的编程语言时，其中一个核心功能是内存清理（垃圾回收）</p><p>和 C 和 C++ 等语言不同，使用者不需要关注内存相关的操作，例如<code>malloc</code>、<code>calloc</code>、<code>realloc</code>、<code>free</code>等函数</p><p>释放内存的操作就是由 JVM 中名为 <strong>Garbage Collector</strong>的角色完成的</p><h1 id="垃圾回收器是如何工作的">垃圾回收器是如何工作的</h1><p>JVM在后台运行垃圾回收器来查找未使用的引用，这些引用占用的内存可以被释放并重新使用</p><p>堆内存被划分为不同的区域，每个区域都有自己的垃圾收集器类型</p><p>垃圾回收器有很多种实现，同时 JVM在符合规范的情况下也会有不同的实现，在理论和实践中每个 JVM实现都可以提供自己的垃圾收集器实现，从而提供不同的性能</p><p>JVM 堆的三个主要区域的简化视图可以可视化如下：</p><img src="/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97/java-collection-7.png.webp" class="" title="java garbage collection logs"><p>拥有一个健康的垃圾收集过程是实现基于 JVM的应用程序的最佳性能的关键，因此我们需要确保监控 Java虚拟机及其垃圾回收器，通过 GC logs，我们可以了解 JVM的垃圾收集器的工作</p><h1 id="什么是-gc-日志">什么是 GC 日志</h1><p>垃圾收集器日志是 Java虚拟机生成的文本文件，用于描述垃圾收集器的工作</p><p>包含查看内存清理过程如何工作所需的所有信息，提供了垃圾收集器的行为以及它使用了多少资源；尽管我们可以使用APM提供程序或内部构建的监控工具来监控我们的应用程序，但垃圾收集器日志对于快速识别堆内存利用率方面的任何潜在问题和瓶颈将是非常宝贵的</p><p>下面是一个 GC 日志的示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">CommandLine flags: -XX:-BytecodeVerificationLocal -XX:-BytecodeVerificationRemote -XX:InitialHeapSize=52428800 -XX:+ManagementServer -XX:MaxGCPauseMillis=200 -XX:MaxHeapSize=52428800 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:-PrintGCDetails -XX:+PrintGCTimeStamps -XX:TieredStopAtLevel=1 -XX:-UseAdaptiveSizePolicy -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC </span><br><span class="line">2024-05-11T15:55:49.541-0800: 0.517: [GC (Allocation Failure)  12800K-&gt;2492K(49152K), 0.0021661 secs]</span><br><span class="line">2024-05-11T15:55:49.710-0800: 0.687: [GC (Allocation Failure)  15292K-&gt;3412K(49152K), 0.0025412 secs]</span><br><span class="line">2024-05-11T15:55:49.810-0800: 0.787: [GC (Allocation Failure)  16212K-&gt;4807K(49152K), 0.0024151 secs]</span><br><span class="line">2024-05-11T15:55:49.899-0800: 0.876: [GC (Allocation Failure)  17607K-&gt;6061K(49152K), 0.0021924 secs]</span><br><span class="line">2024-05-11T15:55:49.997-0800: 0.973: [GC (Allocation Failure)  18861K-&gt;7424K(49152K), 0.0029084 secs]</span><br><span class="line">2024-05-11T15:55:50.076-0800: 1.053: [GC (Allocation Failure)  20224K-&gt;8503K(49152K), 0.0023001 secs]</span><br><span class="line">2024-05-11T15:55:50.112-0800: 1.089: [GC (Allocation Failure)  21303K-&gt;9742K(49152K), 0.0025567 secs]</span><br><span class="line">2024-05-11T15:55:50.153-0800: 1.129: [GC (Allocation Failure)  22542K-&gt;10927K(49152K), 0.0025338 secs]</span><br><span class="line">2024-05-11T15:55:50.192-0800: 1.168: [GC (Allocation Failure)  23727K-&gt;12205K(49152K), 0.0027763 secs]</span><br><span class="line">2024-05-11T15:55:50.298-0800: 1.275: [GC (Allocation Failure)  25005K-&gt;13338K(49152K), 0.0041218 secs]</span><br><span class="line">2024-05-11T15:55:50.394-0800: 1.371: [GC (Metadata GC Threshold)  24027K-&gt;14554K(49152K), 0.0026052 secs]</span><br><span class="line">2024-05-11T15:55:50.397-0800: 1.373: [Full GC (Metadata GC Threshold)  14554K-&gt;8390K(49152K), 0.0282067 secs]</span><br><span class="line">2024-05-11T15:55:50.472-0800: 1.448: [GC (Allocation Failure)  21190K-&gt;9606K(49152K), 0.0011170 secs]</span><br><span class="line">2024-05-11T15:55:50.553-0800: 1.530: [GC (Allocation Failure)  22406K-&gt;10211K(49152K), 0.0021453 secs]</span><br><span class="line">2024-05-11T15:55:50.625-0800: 1.602: [GC (Allocation Failure)  23011K-&gt;10545K(49152K), 0.0015239 secs]</span><br><span class="line">2024-05-11T15:55:50.722-0800: 1.698: [GC (Allocation Failure)  23345K-&gt;11492K(49152K), 0.0021307 secs]</span><br><span class="line">2024-05-11T15:55:50.810-0800: 1.786: [GC (Allocation Failure)  24292K-&gt;12785K(49152K), 0.0017124 secs]</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97/java-collection-6.png.webp" class="" title="java gc logs"><h1 id="启动-gc-日志">启动 GC 日志</h1><p>在现代设备上，启用垃圾收集器日志时不必担心性能问题，理论上应该始终打开Java 垃圾收集日志</p><p>对于 Java 8 及更早版本，通过如下参数启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails -Xloggc:&lt;PATH_TO_GC_LOG_FILE&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>PATH_TO_GC_LOG_FILE</code> 是日志文件存放的位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintGCDetails -Xloggc:/home/shared/log/gc.log -jar my_app.jar</span><br></pre></td></tr></table></figure><p><br></p><p>对于 Java 9 及更新版本，可以简化上面的命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog:gc*:file=&lt;PATH_TO_GC_LOG_FILE&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Xlog:gc*:file=/home/shared/gc.log -jar my_app.jar</span><br></pre></td></tr></table></figure><p>Java 9 及更新的版本还支持 GC调试日志，会输入更详细的日志内容，通过如下配置设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xlog:gc*,gc+phases=debug</span><br></pre></td></tr></table></figure><p>一旦启用了 GC日志，那么需要注意轮换（rotation）的重要配置，当使用较旧的 JVM 版本（如JDK 8）时，可能需要轮换 GC 日志</p><p>有以下参数进行控制：</p><ul><li>-XX:+UseGCLogFileRotation 启用日志轮换</li><li>-XX:NumberOfGCLogFiles 设置保留多少 GC 日志文件，例如<code>-XX:NumberOfGCLogFiles=10</code> 将保留最多 10 个 GC 日志文件</li><li>-XX:GCLogFileSize 单个 GC 日志文件可以有多大，例如<code>-XX/GCLogFileSize=10m</code> 将在日志文件达到 10 MB 时覆盖 GC日志文件</li></ul><p>开启 GC 日志后，就可以根据日志进行分析了</p><h1 id="如何分析">如何分析</h1><p>垃圾收集日志将能够回答以下问题：</p><ul><li>Young 区什么时候进行的 GC</li><li>Old 区什么时候进行的 GC</li><li>运行了多少次 GC</li><li>GC 一共进行了多长时间</li><li>GC 前后的内存利用率是多少</li></ul><p>下面来看一个 JVM垃圾收集器日志中的示例，并分析每个片段，突出显示其背后的关键部分</p><h2 id="ps-cms">PS + CMS</h2><p>一行日志如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-10-30T11:13:00.920-0100: 6.399: [Full GC (Allocation Failure) 2019-10-30T11:13:00.920-0100: 6.399: [CMS: 43711K-&gt;43711K(43712K), 0.1417937 secs] 63359K-&gt;48737K(63360K), [Metaspace: 47130K-&gt;47130K(1093632K)], 0.1418689 secs] [Times: user=0.14 sys=0.00, real=0.14 secs]</span><br></pre></td></tr></table></figure><p>第一部分是时间，可以看到这条日志是在<strong>2019-10-30T11:13:00.920-0100</strong> 产生的</p><p>第二部分是 GC 的类型，可以看到日志的类型是 <strong>FullGC</strong></p><p>对于 GC 的类型有如下三种</p><ul><li>Minor GC：当 Eden区已满或即将满时触发，如果应用会频繁创建新对象，那么这个 GC会经常进行；Eden 区和 Survivor 不会产生碎片</li><li>Major GC：Major GC 意味着产生了老年代的GC，根据不同垃圾收集器的设置，该操作可能发生的更少或者更频繁</li><li>FullGC：完全收集，表示年轻代和老年代都会进行收集；通过标记、扫描、压缩的步骤避免内存碎片</li></ul><p><em>Major 和 Full GC 没有严格区分，不要特别在意，见https://stackoverflow.com/questions/50081873/full-garbage-collection-vs-major-garbage-collection</em></p><img src="/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97/java-collection-4.png" class="" title="how to read gc logs"><p>第三部分是进行 GC 的原因，可以看到该日志的原因是 <strong>AllocationFailure</strong>，通常意味着堆内存的 Eden区中没有空间用于新对象分配，垃圾收集器试图为新对象释放一些内存</p><p>再次更详细地了解这行日志：</p><img src="/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97/java-collection-3.png.webp" class="" title="java garbage collection log analysis"><p>JVM垃圾收集器给我们的一条非常重要的信息是应用程序线程停止的总时间，应该预期线程会经常停止，但时间很短</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-10-29T10:00:28.879-0100: 0.488: Total time for which application threads were stopped: 0.0001006 seconds, Stopping threads took: 0.0000065 seconds</span><br></pre></td></tr></table></figure><p>可以看到线程停止了 0.0001006 秒，线程的停止花费了 0.0000065秒，我们将在 GC logs 中一次又一次地看到这样的信息</p><p>应该引起一个危险信号的是长线程停止时间——也称为 stop theworld，它的发生将基本停止整个应用，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-11-02T17:11:54.259-0100: 7.438: Total time for which application threads were stopped: 11.2305001 seconds, Stopping threads took: 0.5230011 seconds</span><br></pre></td></tr></table></figure><p>在上面的日志行中，我们可以看到应用程序线程停止的时间超过了 11秒，意味着应用程序没有响应的时间超过了 11秒，应该不惜一切代价避免出现这种情况</p><h2 id="g1">G1</h2><p>使用如下配置来设置使用 G1 垃圾回收器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:-UseConcMarkSweepGC</span><br><span class="line">-XX:-UseCMSInitiatingOccupancyOnly</span><br></pre></td></tr></table></figure><p>G1 的日志如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">2019-11-03T21:26:21.827-0100: 2.069: [GC pause (G1 Evacuation Pause) (young)</span><br><span class="line">Desired survivor size 2097152 bytes, new threshold 15 (max 15)</span><br><span class="line">- age   1:     341608 bytes,     341608 total</span><br><span class="line">, 0.0021740 secs]</span><br><span class="line">   [Parallel Time: 0.9 ms, GC Workers: 10]</span><br><span class="line">      [GC Worker Start (ms): Min: 2069.4, Avg: 2069.5, Max: 2069.6, Diff: 0.1]</span><br><span class="line">      [Ext Root Scanning (ms): Min: 0.1, Avg: 0.2, Max: 0.4, Diff: 0.3, Sum: 1.5]</span><br><span class="line">      [Update RS (ms): Min: 0.1, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 2.3]</span><br><span class="line">         [Processed Buffers: Min: 1, Avg: 1.4, Max: 4, Diff: 3, Sum: 14]</span><br><span class="line">      [Scan RS (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class="line">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class="line">      [Object Copy (ms): Min: 0.2, Avg: 0.3, Max: 0.3, Diff: 0.1, Sum: 3.0]</span><br><span class="line">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class="line">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 10]</span><br><span class="line">      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class="line">      [GC Worker Total (ms): Min: 0.6, Avg: 0.7, Max: 0.8, Diff: 0.1, Sum: 7.0]</span><br><span class="line">      [GC Worker End (ms): Min: 2070.2, Avg: 2070.2, Max: 2070.2, Diff: 0.0]</span><br><span class="line">   [Code Root Fixup: 0.0 ms]</span><br><span class="line">   [Code Root Purge: 0.0 ms]</span><br><span class="line">   [Clear CT: 0.2 ms]</span><br><span class="line">   [Other: 1.1 ms]</span><br><span class="line">      [Choose CSet: 0.0 ms]</span><br><span class="line">      [Ref Proc: 0.8 ms]</span><br><span class="line">      [Ref Enq: 0.0 ms]</span><br><span class="line">      [Redirty Cards: 0.2 ms]</span><br><span class="line">      [Humongous Register: 0.0 ms]</span><br><span class="line">      [Humongous Reclaim: 0.0 ms]</span><br><span class="line">      [Free CSet: 0.0 ms]</span><br><span class="line">   [Eden: 26.0M(26.0M)-&gt;0.0B(30.0M) Survivors: 5120.0K-&gt;3072.0K Heap: 51.4M(64.0M)-&gt;22.6M(64.0M)]</span><br><span class="line"> [Times: user=0.01 sys=0.00, real=0.01 secs]</span><br></pre></td></tr></table></figure><p>上面的日志展示了一次年轻代的 GC 事件 <strong>[GC pause (G1 EvacuationPause) (young)</strong></p><p>导致一些内存区域被清理 <strong>[Eden: 26.0M(26.0M)-&gt;0.0B(30.0M)Survivors: 5120.0K-&gt;3072.0K Heap:51.4M(64.0M)-&gt;22.6M(64.0M)]</strong></p><p>还可以看到时间和 CPU 的相关信息 <strong>[Times: user=0.01 sys=0.00,real=0.01 secs]</strong></p><p>下面是更详细的内存信息摘要</p><ul><li>Eden 区被完全清空了</li><li>Survivors 的空间由 5120K 降为 3072K</li><li>整个堆的空间从 64 MB 的总大小中的 51.4 MB 开始，到 22.6 MB 结束</li></ul><p>除此之外，还可以看到有关并行垃圾收集器工作程序内部及其工作阶段（如启动、扫描和工作）的更详细信息</p><p>还可以看到与 G1 垃圾收集器相关的其他日志条目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2019-11-03T21:26:23.704-0100: 2019-11-03T21:26:23.704-0100: 3.946: 3.946: [GC concurrent-root-region-scan-start]</span><br><span class="line">Total time for which application threads were stopped: 0.0035771 seconds, Stopping threads took: 0.0000111 seconds</span><br><span class="line">2019-11-03T21:26:23.706-0100: 3.948: [GC concurrent-root-region-scan-end, 0.0017994 secs]</span><br><span class="line">2019-11-03T21:26:23.706-0100: 3.948: [GC concurrent-mark-start]</span><br><span class="line">2019-11-03T21:26:23.737-0100: 3.979: [GC concurrent-mark-end, 0.0315921 secs]</span><br><span class="line">2019-11-03T21:26:23.737-0100: 3.979: [GC remark 2019-11-03T21:26:23.737-0100: 3.979: [Finalize Marking, 0.0002017 secs] 2019-11-03T21:26:23.738-0100: 3.980: [GC ref-proc, 0.0004151 secs] 2019-11-03T21:26:23.738-0100: 3.980: [Unloading, 0.0025065 secs], 0.0033738 secs]</span><br><span class="line"> [Times: user=0.04 sys=0.01, real=0.01 secs]</span><br><span class="line">2019-11-03T21:26:23.741-0100: 3.983: Total time for which application threads were stopped: 0.0034705 seconds, Stopping threads took: 0.0000308 seconds</span><br><span class="line">2019-11-03T21:26:23.741-0100: 3.983: [GC cleanup 54M-&gt;54M(64M), 0.0004419 secs]</span><br><span class="line"> [Times: user=0.00 sys=0.00, real=0.00 secs]</span><br></pre></td></tr></table></figure><p>日志为我们提供了有关应用程序线程停止的总时间、垃圾收集器所做清理的结果以及所使用的资源的信息</p><h1 id="补充">补充</h1><h2 id="outofmemory-错误">OutOfMemory 错误</h2><h3 id="java-heap-space">Java heap space</h3><ul><li>对象不能被分配进堆内存</li><li>过大的流量</li><li>应用中引用持有过多，导致无法回收足够的空间（泄漏）</li><li>应用中使用了过多的 Finalizers，Finalizers 的对象不会立即进行GC，会通过相关的守护线程在队列中执行，有时线程会跟不上队列（生产大于消费）</li></ul><p><strong>处理</strong></p><ul><li>增加堆内存大小 <code>-Xmx</code>（GB -&gt; G or g | MB -&gt; M or m| KB -&gt; K or k）</li><li>修复应用中的内存泄漏</li></ul><h3 id="gc-overhead-limit-exceeded">GC overhead limit exceeded</h3><ul><li>Java 进程花费了 98% 以上的时间进行垃圾收集，回收的内存不到2%，而且到目前为止已经连续进行了 5 次垃圾收集（编译时常量）</li></ul><p><strong>处理</strong></p><ul><li>增加堆内存大小 <code>-Xmx</code></li><li>GC 开销限制可以调整 <code>-XX:- UseGCOverheadLimit</code></li><li>修复应用中的内存泄漏</li></ul><h3 id="unable-to-create-new-native-thread">Unable to create new nativethread</h3><ul><li>没有足够的空间创建新的线程</li></ul><p><strong>处理</strong></p><ul><li>为服务器分配更多内存</li><li>增加堆内存大小</li><li>修复应用中的线程泄漏</li><li>增加 OS 的限制<code>ulimit -a max user processes (-u) 1800</code></li><li>通过 <code>-Xss</code> 参数减少线程栈的大小</li></ul><h3 id="permgen-space">Permgen space</h3><ul><li>永久代的内容包括<ul><li>Class 对象的名字、变量、方法</li><li>与类关联的对象数组和类型数组</li><li>JIT 优化（Just In Time）</li></ul></li></ul><p><strong>处理</strong></p><ul><li>增加永久代的大小 <code>-XX:MaxPermSize</code></li><li>重新启动 JVM</li></ul><h3 id="metaspace">Metaspace</h3><ul><li>Java 8 之后永久代被元空间取代，Class 相关的元数据被分配在 nativememory 中（称为元空间），如果元空间耗尽，则会抛出该错误</li></ul><p><strong>处理</strong></p><ul><li>如果设置了 <code>-XX:MaxMetaSpaceSize</code> ，则增加其值</li><li>移除 <code>-XX:MaxMetaSpaceSize</code></li><li>减少 Java 堆内存大小，分配更多的内存给元空间</li><li>为服务器分配更多内存</li><li>应用中可能存在 bug</li></ul><h3 id="requested-array-size-exceeds-vm-limit">Requested array sizeexceeds VM limit</h3><ul><li>应用尝试分配一个大于堆内存的数组</li></ul><p><strong>处理</strong></p><ul><li>增加堆内存大小 <code>-Xmx</code></li><li>修复 bug，大概率不需要一个巨大的数组</li></ul><h3 id="kill-process-or-sacrifice-child">Kill process or sacrificechild</h3><ul><li>Kernel Job – Out of Memory Killer进程将会在内存不足情况下被终止</li></ul><p>和其他 OOM 不同，这个OOM 是由操作系统触发</p><p><strong>处理</strong></p><ul><li>将进程迁移到其他计算机</li><li>给机器增加内存</li></ul><h3 id="reason-stack_trace_with_native_-method">reasonstack_trace_with_native_ method</h3><ul><li>native 方法遇到分配失败</li><li>打印堆栈跟踪，其中底层是 native 方法</li></ul><p><strong>处理</strong></p><ul><li>结合 OS 进行分析</li></ul><h2 id="jvm-运维工具">JVM 运维工具</h2><h3 id="jps">jps</h3><blockquote><p>jps - Lists the instrumented Java Virtual Machines (JVMs) on thetarget system. This command is experimental and unsupported.</p><p>列出目标系统上的可观测的 Java 虚拟机（JVM）</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps [ options ] [ hostid ]</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">jps -l</span><br><span class="line"></span><br><span class="line"><span class="number">24947</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line"><span class="number">29863</span> sun.tools.jps.Jps</span><br><span class="line"><span class="number">43962</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line"><span class="number">34074</span> com.intellij.idea.Main</span><br></pre></td></tr></table></figure><h3 id="jstat">jstat</h3><blockquote><p>jstat - Monitors Java Virtual Machine (JVM) statistics. This commandis experimental and unsupported.</p><p>用于监控 Java 虚拟机（JVM）统计信息的命令</p><p>使用 jstat命令，可以获取有关堆内存、垃圾回收、类加载、线程和编译等方面的数据</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [ interval[s|ms] [ count ] ]</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jstat -gccause <span class="number">34074</span> <span class="number">1000</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">  <span class="number">0</span>.<span class="number">00</span>  <span class="number">94</span>.<span class="number">67</span>  <span class="number">93</span>.<span class="number">44</span>  <span class="number">33</span>.<span class="number">98</span>  <span class="number">99</span>.<span class="number">05</span>  <span class="number">96</span>.<span class="number">95</span>   <span class="number">2101</span>  <span class="number">503</span>.<span class="number">477</span>     <span class="number">9</span>   <span class="number">65</span>.<span class="number">924</span>  <span class="number">569</span>.<span class="number">401</span> No GC                G1 Evacuation <span class="built_in">Pause</span></span><br><span class="line">  <span class="number">0</span>.<span class="number">00</span>  <span class="number">91</span>.<span class="number">63</span>  <span class="number">45</span>.<span class="number">07</span>  <span class="number">33</span>.<span class="number">34</span>  <span class="number">99</span>.<span class="number">05</span>  <span class="number">96</span>.<span class="number">95</span>   <span class="number">2101</span>  <span class="number">504</span>.<span class="number">128</span>     <span class="number">9</span>   <span class="number">65</span>.<span class="number">924</span>  <span class="number">570</span>.<span class="number">052</span> G1 Evacuation <span class="built_in">Pause</span>  No GC</span><br><span class="line">  <span class="number">0</span>.<span class="number">00</span>  <span class="number">91</span>.<span class="number">63</span>  <span class="number">59</span>.<span class="number">15</span>  <span class="number">33</span>.<span class="number">34</span>  <span class="number">99</span>.<span class="number">05</span>  <span class="number">96</span>.<span class="number">95</span>   <span class="number">2101</span>  <span class="number">504</span>.<span class="number">128</span>     <span class="number">9</span>   <span class="number">65</span>.<span class="number">924</span>  <span class="number">570</span>.<span class="number">052</span> G1 Evacuation <span class="built_in">Pause</span>  No GC</span><br><span class="line">  <span class="number">0</span>.<span class="number">00</span>  <span class="number">91</span>.<span class="number">63</span>  <span class="number">60</span>.<span class="number">56</span>  <span class="number">33</span>.<span class="number">34</span>  <span class="number">99</span>.<span class="number">05</span>  <span class="number">96</span>.<span class="number">95</span>   <span class="number">2101</span>  <span class="number">504</span>.<span class="number">128</span>     <span class="number">9</span>   <span class="number">65</span>.<span class="number">924</span>  <span class="number">570</span>.<span class="number">052</span> G1 Evacuation <span class="built_in">Pause</span>  No GC</span><br><span class="line">  <span class="number">0</span>.<span class="number">00</span>  <span class="number">91</span>.<span class="number">63</span>  <span class="number">61</span>.<span class="number">97</span>  <span class="number">33</span>.<span class="number">34</span>  <span class="number">99</span>.<span class="number">05</span>  <span class="number">96</span>.<span class="number">95</span>   <span class="number">2101</span>  <span class="number">504</span>.<span class="number">128</span>     <span class="number">9</span>   <span class="number">65</span>.<span class="number">924</span>  <span class="number">570</span>.<span class="number">052</span> G1 Evacuation <span class="built_in">Pause</span>  No GC</span><br></pre></td></tr></table></figure><p>以 <code>gccause</code> 查看堆内存为例，这里表格标头分别代表</p><table><thead><tr><th style="text-align: center;">name</th><th style="text-align: center;">meaning</th></tr></thead><tbody><tr><td style="text-align: center;">S0</td><td style="text-align: center;">Survivor 0 区占用百分比</td></tr><tr><td style="text-align: center;">S1</td><td style="text-align: center;">Survivor 1 区占用百分比</td></tr><tr><td style="text-align: center;">E</td><td style="text-align: center;">Eden 区占用百分比</td></tr><tr><td style="text-align: center;">O</td><td style="text-align: center;">老年代占用百分比</td></tr><tr><td style="text-align: center;">M</td><td style="text-align: center;">元空间占用百分比</td></tr><tr><td style="text-align: center;">CCS</td><td style="text-align: center;">压缩类空间占用百分比</td></tr><tr><td style="text-align: center;">YGC</td><td style="text-align: center;">young GC 发生次数</td></tr><tr><td style="text-align: center;">YGCT</td><td style="text-align: center;">yong GC 垃圾回收时间</td></tr><tr><td style="text-align: center;">FGC</td><td style="text-align: center;">full GC 发生次数</td></tr><tr><td style="text-align: center;">FGCT</td><td style="text-align: center;">full GC 垃圾回收时间</td></tr><tr><td style="text-align: center;">GCT</td><td style="text-align: center;">总共的垃圾回收时间</td></tr><tr><td style="text-align: center;">LGCC</td><td style="text-align: center;">最后一次 GC 的原因</td></tr><tr><td style="text-align: center;">GCC</td><td style="text-align: center;">当前 GC 的原因</td></tr></tbody></table><h3 id="jstack">jstack</h3><blockquote><p>jstack - Prints Java thread stack traces for a Java process, corefile, or remote debug server. This command is experimental andunsupported.</p><p>输出 Java 进程、核心文件或远程调试服务器的 Java 线程堆栈跟踪</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstack [ options ] pid</span><br><span class="line">jstack [ options ] executable core</span><br><span class="line">jstack [ options ] [ server-id@ ] remote-hostname-or-IP</span><br></pre></td></tr></table></figure><h3 id="jmap">jmap</h3><blockquote><p>jmap - Prints shared object memory maps or heap memory details for aprocess, core file, or remote debug server.</p><p>打印进程、核心文件或远程调试服务器的共享对象内存映射或堆内存详细信息</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jmap [ options ] pid</span><br><span class="line">jmap [ options ] executable core</span><br><span class="line">jmap [ options ] [ pid ] server-id@ ] remote-hostname-or-IP</span><br></pre></td></tr></table></figure><p>这里直接使用会报错（MacOS）</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Attaching to process ID 34074, please wait...</span><br><span class="line"><span class="keyword">ERROR: </span>attach: task_for_pid(34074) failed: &#x27;(os/kern) failure&#x27; (5)</span><br><span class="line"><span class="keyword">Error </span>attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#x27;t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span><br><span class="line">sun.jvm.hotspot.debugger.DebuggerException: sun.jvm.hotspot.debugger.DebuggerException: Can&#x27;t attach to the process. Could be caused by an incorrect pid or lack of privileges.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因为新版的 Linux 系统加入了 <code>ptrace-scope</code>机制，该机制的目的是防止用户访问正在执行的进程的内存，但是如<code>jinfo</code>、<code>jmap</code> 这些调试类工具本身就是利用<code>ptrace</code> 来获取执行进程的内存等信息</p><p>一些文章给出的解决方案需要修改内核参数，可以参考</p><p><ahref="https://blog.csdn.net/weixin_42272869/article/details/124174890">Errorattaching to process sun.jvm.hotspot.debugger.DebuggerException cannotopen binary file_sun.jvm.hotspot.debugger.debuggerexception:cannot-CSDN博客</a></p><h2 id="担保机制与-ergonomics">担保机制与 Ergonomics</h2><p>在 PS + PO 日志中可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2024-05-11T15:56:45.857-0800: 56.923: [Full GC (Ergonomics)  46904K-&gt;46903K(49152K), 0.1493527 secs]</span><br></pre></td></tr></table></figure><p>日志中 GC 的原因是 Ergonomics，在一些文章中把原因称为因为担保导致的GC，实际上是不准确的</p><h3 id="担保机制">担保机制</h3><p>担保机制的官方术语称为 Guarantee</p><blockquote><p>-XX:+HandlePromotionFailure</p><p>The youngest generation collection does not require a guarantee offull promotion of all live objects. (Introduced in 1.4.2 update 11) [5.0and earlier: false.]</p></blockquote><p>发生 GC时，当老年代剩余空间小于平均年轻代向老年代晋升的空间大小，就会进行一次Full GC</p><h3 id="ergonomics">Ergonomics</h3><p>Ergonomics 是一种 JVM 自动优化手段</p><p>https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html#ergonomics</p><p>JVM 会根据一些配置自动调整堆内存的大小：</p><ul><li>Maximum Pause Time Goal：期望最大暂停时间</li><li>Throughput Goal：吞吐量目标，例如 <code>-XX:GCTimeRatio=19</code>是将垃圾收集的目标设置为总时间的 5%</li><li>FootprintGoal：如果已经达到吞吐量和最大暂停时间目标，那么垃圾收集器会减小堆的大小，直到其中一个目标（总是吞吐量目标）无法达到为止</li></ul><p><strong>调优的策略</strong></p><ul><li>除非您知道需要一个大于默认最大堆大小的堆，否则不要为堆选择最大值，应该选择一个足以满足应用程序的吞吐量目标</li><li>堆将增长或收缩到支持所选吞吐量目标的大小。应用程序行为的更改可能会导致堆增长或收缩。例如如果应用程序开始以更高的速率进行分配，则堆将增长以保持相同的吞吐量。</li><li>如果堆增长到其最大大小，并且没有达到吞吐量目标，则最大堆大小对于吞吐量目标来说太小，应该将最大堆大小设置为一个值，该值接近平台上的总物理内存，但不会导致应用程序的交换（swapping），再次执行应用程序，如果仍未达到吞吐量目标那么说明应用程序时间的目标对于平台上的可用内存来说太高了（机器内存不足）</li><li>如果可以达到吞吐量目标，但暂停时间过长，则选择最大暂停时间目标，选择最长暂停时间目标可能意味着无法达到吞吐量目标，因此选择对应用程序来说可以接受的折衷值</li><li>通常情况下堆的大小会随着垃圾收集器试图满足竞争目标而波动，即使应用程序已达到稳定状态，也是如此实现吞吐量目标（可能需要更大的堆）的压力与最大暂停时间和最小内存占用（两者都可能需要小堆）的目标相竞争</li></ul><p>Ergonomics 操作可以通过参数 <code>-XX:-UseAdaptiveSizePolicy</code>来进行关闭</p><p><br></p><p>我这里启动了一个服务，分配了足够小的内存，不断创建对象直到发生OOM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms50m -Xmx50m -Xloggc:/Users/guorunze/temp/log/gc.log -XX:+PrintGCDateStamps -XX:-PrintGCDetails -XX:MaxGCPauseMillis=<span class="number">200</span></span><br></pre></td></tr></table></figure><p>默认开启</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">1268</span>.<span class="number">1</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">3632</span>.<span class="number">7</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">14786</span>.<span class="number">9</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">36885</span>.<span class="number">3</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4742</span>.<span class="number">0</span>     <span class="number">40</span>    <span class="number">0</span>.<span class="number">094</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">089</span>    <span class="number">0</span>.<span class="number">183</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">1268</span>.<span class="number">1</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">3632</span>.<span class="number">7</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">14786</span>.<span class="number">9</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">36885</span>.<span class="number">3</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4742</span>.<span class="number">0</span>     <span class="number">40</span>    <span class="number">0</span>.<span class="number">094</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">089</span>    <span class="number">0</span>.<span class="number">183</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">4096</span>.<span class="number">0</span> <span class="number">2032</span>.<span class="number">9</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">8704</span>.<span class="number">0</span>   <span class="number">2406</span>.<span class="number">1</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">19640</span>.<span class="number">4</span>   <span class="number">41008</span>.<span class="number">0</span> <span class="number">38297</span>.<span class="number">3</span> <span class="number">5424</span>.<span class="number">0</span> <span class="number">4929</span>.<span class="number">8</span>     <span class="number">42</span>    <span class="number">0</span>.<span class="number">103</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">089</span>    <span class="number">0</span>.<span class="number">192</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">3465</span>.<span class="number">9</span>  <span class="number">5632</span>.<span class="number">0</span>   <span class="number">994</span>.<span class="number">9</span>    <span class="number">34304</span>.<span class="number">0</span>    <span class="number">27764</span>.<span class="number">1</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38739</span>.<span class="number">4</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4985</span>.<span class="number">5</span>     <span class="number">45</span>    <span class="number">0</span>.<span class="number">118</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">089</span>    <span class="number">0</span>.<span class="number">207</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>     <span class="number">34304</span>.<span class="number">0</span>    <span class="number">31724</span>.<span class="number">0</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38545</span>.<span class="number">4</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">5</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>   <span class="number">4</span>      <span class="number">0</span>.<span class="number">433</span>    <span class="number">0</span>.<span class="number">556</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">4387</span>.<span class="number">9</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34278</span>.<span class="number">5</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38545</span>.<span class="number">5</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">5</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>   <span class="number">8</span>      <span class="number">0</span>.<span class="number">778</span>    <span class="number">0</span>.<span class="number">902</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">5604</span>.<span class="number">6</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34115</span>.<span class="number">6</span>   <span class="number">41648</span>.<span class="number">0</span> <span class="number">38718</span>.<span class="number">9</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4986</span>.<span class="number">1</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>  <span class="number">13</span>      <span class="number">1</span>.<span class="number">648</span>    <span class="number">1</span>.<span class="number">771</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">5581</span>.<span class="number">2</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34114</span>.<span class="number">0</span>   <span class="number">41904</span>.<span class="number">0</span> <span class="number">39071</span>.<span class="number">1</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">5027</span>.<span class="number">2</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>  <span class="number">17</span>      <span class="number">2</span>.<span class="number">409</span>    <span class="number">2</span>.<span class="number">532</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">5599</span>.<span class="number">6</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34114</span>.<span class="number">0</span>   <span class="number">41904</span>.<span class="number">0</span> <span class="number">39071</span>.<span class="number">1</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">5027</span>.<span class="number">2</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>  <span class="number">17</span>      <span class="number">2</span>.<span class="number">409</span>    <span class="number">2</span>.<span class="number">532</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">4822</span>.<span class="number">1</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34110</span>.<span class="number">1</span>   <span class="number">41904</span>.<span class="number">0</span> <span class="number">39111</span>.<span class="number">5</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">5035</span>.<span class="number">1</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>  <span class="number">20</span>      <span class="number">2</span>.<span class="number">833</span>    <span class="number">2</span>.<span class="number">957</span></span><br><span class="line"><span class="number">5632</span>.<span class="number">0</span> <span class="number">5632</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>    <span class="number">5632</span>.<span class="number">0</span>   <span class="number">4836</span>.<span class="number">1</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34110</span>.<span class="number">1</span>   <span class="number">41904</span>.<span class="number">0</span> <span class="number">39111</span>.<span class="number">5</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">5035</span>.<span class="number">1</span>     <span class="number">46</span>    <span class="number">0</span>.<span class="number">124</span>  <span class="number">20</span>      <span class="number">2</span>.<span class="number">833</span>    <span class="number">2</span>.<span class="number">957</span></span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">2043</span>.<span class="number">5</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">1071</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">17905</span>.<span class="number">8</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">37015</span>.<span class="number">0</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4774</span>.<span class="number">8</span>     <span class="number">32</span>    <span class="number">0</span>.<span class="number">112</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">085</span>    <span class="number">0</span>.<span class="number">197</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">2043</span>.<span class="number">5</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">1071</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">17905</span>.<span class="number">8</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">37015</span>.<span class="number">0</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4774</span>.<span class="number">8</span>     <span class="number">32</span>    <span class="number">0</span>.<span class="number">112</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">085</span>    <span class="number">0</span>.<span class="number">197</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">2043</span>.<span class="number">5</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">1071</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">17905</span>.<span class="number">8</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">37015</span>.<span class="number">0</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4774</span>.<span class="number">8</span>     <span class="number">32</span>    <span class="number">0</span>.<span class="number">112</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">085</span>    <span class="number">0</span>.<span class="number">197</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">2043</span>.<span class="number">5</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">9275</span>.<span class="number">9</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">17905</span>.<span class="number">8</span>   <span class="number">39600</span>.<span class="number">0</span> <span class="number">37015</span>.<span class="number">0</span> <span class="number">5296</span>.<span class="number">0</span> <span class="number">4774</span>.<span class="number">8</span>     <span class="number">32</span>    <span class="number">0</span>.<span class="number">112</span>   <span class="number">2</span>      <span class="number">0</span>.<span class="number">085</span>    <span class="number">0</span>.<span class="number">197</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">2032</span>.<span class="number">0</span> <span class="number">12800</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>     <span class="number">34304</span>.<span class="number">0</span>    <span class="number">30780</span>.<span class="number">1</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38723</span>.<span class="number">6</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4988</span>.<span class="number">0</span>     <span class="number">35</span>    <span class="number">0</span>.<span class="number">147</span>   <span class="number">3</span>      <span class="number">0</span>.<span class="number">085</span>    <span class="number">0</span>.<span class="number">232</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span> <span class="number">2025</span>.<span class="number">9</span>  <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>     <span class="number">34304</span>.<span class="number">0</span>    <span class="number">29831</span>.<span class="number">1</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38661</span>.<span class="number">2</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4974</span>.<span class="number">4</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>   <span class="number">4</span>      <span class="number">0</span>.<span class="number">249</span>    <span class="number">0</span>.<span class="number">401</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>   <span class="number">9340</span>.<span class="number">6</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34087</span>.<span class="number">4</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>   <span class="number">6</span>      <span class="number">0</span>.<span class="number">691</span>    <span class="number">0</span>.<span class="number">843</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>  <span class="number">12800</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">34083</span>.<span class="number">5</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>  <span class="number">10</span>      <span class="number">1</span>.<span class="number">101</span>    <span class="number">1</span>.<span class="number">253</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>  <span class="number">12800</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">33978</span>.<span class="number">9</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>  <span class="number">16</span>      <span class="number">2</span>.<span class="number">011</span>    <span class="number">2</span>.<span class="number">163</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>  <span class="number">12800</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">33963</span>.<span class="number">1</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>  <span class="number">23</span>      <span class="number">3</span>.<span class="number">003</span>    <span class="number">3</span>.<span class="number">155</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>  <span class="number">12800</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">33948</span>.<span class="number">6</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>  <span class="number">30</span>      <span class="number">4</span>.<span class="number">007</span>    <span class="number">4</span>.<span class="number">159</span></span><br><span class="line"><span class="number">2048</span>.<span class="number">0</span> <span class="number">2048</span>.<span class="number">0</span>  <span class="number">0</span>.<span class="number">0</span>    <span class="number">0</span>.<span class="number">0</span>   <span class="number">12800</span>.<span class="number">0</span>  <span class="number">12800</span>.<span class="number">0</span>   <span class="number">34304</span>.<span class="number">0</span>    <span class="number">33936</span>.<span class="number">1</span>   <span class="number">41392</span>.<span class="number">0</span> <span class="number">38510</span>.<span class="number">8</span> <span class="number">5552</span>.<span class="number">0</span> <span class="number">4952</span>.<span class="number">2</span>     <span class="number">36</span>    <span class="number">0</span>.<span class="number">152</span>  <span class="number">37</span>      <span class="number">5</span>.<span class="number">038</span>    <span class="number">5</span>.<span class="number">190</span></span><br></pre></td></tr></table></figure><p>可以看到开启了 Adaptive Size Policy 后，堆内存大小进行了变化，例如Eden 区由 12800 -&gt; 8704 -&gt; 5632</p><p>而关闭后，各个区域的空间没有变化</p><h3 id="gc-中的-ergonomics-到底是因为什么">GC 中的 Ergonomics到底是因为什么</h3><p>所以 GC logs 中 Ergonomics 产生的 GC 是因为什么呢？</p><p>其实是两类都有，也就是说 GC logs 这里展示的 Ergonomics存在歧义，有一个 Issue 正是和这个问题相关</p><p><ahref="https://bugs.openjdk.org/browse/JDK-8067243?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel">JDK-8067243GC reason "Ergonomics" confusing - Java Bug System (openjdk.org)</a></p><blockquote><p>In this case the reason Ergonomics really mean "Not enough old spaceto handle next yc given the historical promotion rate", which does notnecessarily indicate a Full GC triggered by the resizing of theheap.</p><p>It would be great if we could be more specific about why we garbagecollect, so that the information can be actionable without reading theHotSpot source code. After discussions with Jesper, a better name wouldprobably be "Out of Old Space" possible with the addtion " for nextYC".</p></blockquote><p>关闭了堆内存自动优化后，Ergonomics 的真正含义其实就变成了空间担保</p><p>这里 Issue 的发起者也提供了一个更直观的表达 <strong>Out of OldSpace</strong> + <strong>for next YC</strong></p><p>不过看起来这个 Issue 还是开启状态</p><h1 id="参考">参考</h1><p><ahref="https://sematext.com/blog/java-garbage-collection-logs/">JavaGarbage Collection Logs &amp; How to Analyze Them - Sematext</a></p><p><ahref="https://jun-wang.gitbook.io/learnjava/ji-shu-xue-xi/jvm-xue-xi/kan-dong-gc-ri-zhi">看懂gc日志| LearnJava (gitbook.io)</a></p><p><a href="https://gceasy.ycrash.cn/gc-index.jsp">Universal JVM GCanalyzer - Java Garbage collection log analysis made easy(ycrash.cn)</a></p><p><ahref="https://stackoverflow.com/questions/50081873/full-garbage-collection-vs-major-garbage-collection">java- Full Garbage Collection vs. Major Garbage Collection - StackOverflow</a></p><p><ahref="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html#ergonomics">Ergonomics(oracle.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/Java/">Java</category>
      
      
      <category domain="https://www.kugaaa.com/tags/Java/">Java</category>
      
      <category domain="https://www.kugaaa.com/tags/JVM/">JVM</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Java/%E8%AF%BB%E6%87%82%20GC%20%E6%97%A5%E5%BF%97.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>二分查找红蓝分区思想</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%BA%A2%E8%93%9D%E5%88%86%E5%8C%BA%E6%80%9D%E6%83%B3.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%BA%A2%E8%93%9D%E5%88%86%E5%8C%BA%E6%80%9D%E6%83%B3.html</guid>
      <pubDate>Sat, 27 Apr 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;二分的思想很简单，但是难在 coding 上，因为需要考虑边界条件&lt;/p&gt;
&lt;p&gt;在 B 站上看了一个视频，&lt;a href=&quot;https://www.bilibili.com/video/BV1d54y1q7k7&quot;&gt;二分查找为什么总是写错？&lt;/a&gt;
动画讲解了一种比较好记忆处理边界的方式（我认为并不是在讲二分的思想，而是用一种图示的方式避免边界处理错误），所以在这里记录下&lt;/p&gt;
&lt;h1 id=&quot;应用&quot;&gt;应用&lt;/h1&gt;
&lt;p&gt;引入抛出了一个问题&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="背景">背景</h1><p>二分的思想很简单，但是难在 coding 上，因为需要考虑边界条件</p><p>在 B 站上看了一个视频，<ahref="https://www.bilibili.com/video/BV1d54y1q7k7">二分查找为什么总是写错？</a>动画讲解了一种比较好记忆处理边界的方式（我认为并不是在讲二分的思想，而是用一种图示的方式避免边界处理错误），所以在这里记录下</p><h1 id="应用">应用</h1><p>引入抛出了一个问题</p><p>有这样一个有序数组<code>[1,2,3,5,5,5,8,9]</code>，需要找出如下答案</p><ul><li>找到第一个大于等于 5 的元素</li><li>找到最后一个小于 5 的元素</li><li>找到第一个大于 5 的元素</li><li>找到最后一个小于等于 5 的元素</li></ul><h2 id="新角度">新角度</h2><p>使用二分查找符合条件的下标，下标的本质就是分界点K，假设分界点将数组分为了红蓝两部分</p><ul><li>一共有 N 个元素</li><li>元素的编号为 0 ~ N - 1</li><li>前 K 个元素为蓝色，后 N - K 个元素为红色</li></ul><p><span style="color: blue;"> ( 0 )  ( 1 )  ( 2 ) ... ( k - 1) </span><span style="color: red;"> ( k )  ... ( N - 2 )  (N -1) </span></p><h2 id="伪代码">伪代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># l 从 - 1 开始</span></span><br><span class="line">l = -<span class="number">1</span></span><br><span class="line"><span class="comment"># r 从 N 开始（size）</span></span><br><span class="line">r = N</span><br><span class="line"><span class="comment"># 循环边界为 l 一定在 r 的左边</span></span><br><span class="line"><span class="keyword">while</span> l + <span class="number">1</span> &lt; r</span><br><span class="line"><span class="comment"># 二分中点</span></span><br><span class="line">m = (l + r) / <span class="number">2</span></span><br><span class="line"><span class="comment"># isBlue 的本质是需求中需要找出的分界点 K 的判断规则</span></span><br><span class="line">    <span class="keyword">if</span> isBlue(m)</span><br><span class="line">    <span class="comment"># 指针移动</span></span><br><span class="line">    l = m</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    r = m</span><br><span class="line"><span class="comment"># 根据需求选择使用分界点前的元素还是后面的元素</span></span><br><span class="line"><span class="keyword">return</span> l <span class="keyword">or</span> r</span><br></pre></td></tr></table></figure><p>这里需要论证几个问题：</p><ul><li><strong>为什么 <code>l</code> 要从 -1 开始，而 <code>r</code> 从 N开始</strong> 想象出一个红蓝区间，如果 <code>l</code> 从 0开始，那么至少代表 index = 0 的位置也是蓝色，而这是不合理的；对于<code>r</code> 同理</li><li><strong>为什么循环条件为 <code>l + 1 &lt; r</code></strong>想象出一个红蓝区间，如果 <code>l</code> 和 <code>r</code>有交叉，那么交叉区域既是蓝色又是红色，也是不合理的</li><li><strong><code>m</code> 的值一定是 <code>[0,N)</code> 吗</strong>在整段逻辑中，<code>l</code> 的最小值为 -1，<code>r</code> 的最小值为1（为什么 <code>r</code> 不会为 0，因为 0的话，<code>l + 1 &lt; r</code> 不会进入循环），那么 <code>m</code>的最小值为 0 最大值同理，<code>r</code> 的最大值为 N，<code>l</code>的最大值为 N - 2，那么 <code>m</code> 的最大值为 N - 1</li></ul><h2 id="解决上述问题">解决上述问题</h2><p>套用这个红绿区间的模板，就可以得到上面四个问题的答案</p><table style="width:100%;"><colgroup><col style="width: 27%" /><col style="width: 57%" /><col style="width: 10%" /><col style="width: 3%" /></colgroup><thead><tr><th style="text-align: center;">问题</th><th style="text-align: center;">蓝红划分</th><th style="text-align: center;">isBlue 条件</th><th style="text-align: center;">返回</th></tr></thead><tbody><tr><td style="text-align: center;">找到第一个大于等于 5 的元素</td><td style="text-align: center;"><span style="color: blue;"> ( 1 ) ( 2 )( 3 )</span><span style="color: red;"> ( 5 ) ( 5 ) ( 5 ) ( 8 ) ( 9)</span></td><td style="text-align: center;">小于 5</td><td style="text-align: center;">r</td></tr><tr><td style="text-align: center;">找到最后一个小于 5 的元素</td><td style="text-align: center;"><span style="color: blue;"> ( 1 ) ( 2 )( 3 )</span><span style="color: red;"> ( 5 ) ( 5 ) ( 5 ) ( 8 ) ( 9)</span></td><td style="text-align: center;">小于 5</td><td style="text-align: center;">l</td></tr><tr><td style="text-align: center;">找到第一个大于 5 的元素</td><td style="text-align: center;"><span style="color: blue;"> ( 1 ) ( 2 )( 3 ) ( 5 ) ( 5 ) ( 5 )</span><span style="color: red;"> ( 8 ) ( 9)</span></td><td style="text-align: center;">小于等于 5</td><td style="text-align: center;">r</td></tr><tr><td style="text-align: center;">找到最后一个小于等于 5 的元素</td><td style="text-align: center;"><span style="color: blue;"> ( 1 ) ( 2 )( 3 ) ( 5 ) ( 5 ) ( 5 )</span><span style="color: red;"> ( 8 ) ( 9)</span></td><td style="text-align: center;">小于等于 5</td><td style="text-align: center;">l</td></tr></tbody></table><p><strong>找到第一个大于等于 5 的元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Binary</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> findFirstGte5Index(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findFirstGte5Index</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.get(mid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// isBlue 条件 小于 5</span></span><br><span class="line">            <span class="keyword">if</span> (isLt5(n)) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 r</span></span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLt5</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>找到最后一个小于等于 5 的元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Binary</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> findLastLte5Index(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findLastLte5Index</span><span class="params">(List&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="keyword">while</span> (left + <span class="number">1</span> &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.get(mid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// isBlue 条件 小于等于 5</span></span><br><span class="line">            <span class="keyword">if</span> (isLte5(n)) &#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回 l</span></span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLte5</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n &lt;= <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><ahref="https://www.bilibili.com/video/BV1d54y1q7k7">二分查找为什么总是写错？_哔哩哔哩_bilibili</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/">结构算法</category>
      
      
      <category domain="https://www.kugaaa.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%BA%A2%E8%93%9D%E5%88%86%E5%8C%BA%E6%80%9D%E6%83%B3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>水塘抽样</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7.html</guid>
      <pubDate>Fri, 26 Apr 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;在 n 个数中，如何让抽到每一个数的概率相等&lt;/p&gt;
&lt;p&gt;可以产生一个随机数，n 个数则在 [1,n] 中产生一个随机数即可&lt;/p&gt;
&lt;p&gt;但如果涉及到外部数据，即一次并不能全部读取 n 个数（n 未知）；例如一共
1000 个数据，一次只能加载 10 个，那么再每 10 个加载一次，总共加载 100
次的过程中如何保证最终取到的值满足 1/n&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;水塘抽样算法&lt;/strong&gt;可以解决&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="背景">背景</h1><p>在 n 个数中，如何让抽到每一个数的概率相等</p><p>可以产生一个随机数，n 个数则在 [1,n] 中产生一个随机数即可</p><p>但如果涉及到外部数据，即一次并不能全部读取 n 个数（n 未知）；例如一共1000 个数据，一次只能加载 10 个，那么再每 10 个加载一次，总共加载 100次的过程中如何保证最终取到的值满足 1/n</p><p>使用<strong>水塘抽样算法</strong>可以解决</p><p>在这里，还分为 K = 1（只抽一个）和 K &gt; 1（抽取多个）</p><h1 id="k-1">K = 1</h1><p>分片读取，第 i 个数的概率应该是 1/ i</p><p><strong>论证公式</strong> <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -7.193ex;" xmlns="http://www.w3.org/2000/svg" width="46.627ex" height="15.518ex" role="img" focusable="false" viewBox="0 -3679.5 20609.1 6859"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,2337.5)"><g data-mml-node="mtd" transform="translate(778,0)"></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(297.5,-686)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1162.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(2162.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2551.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3273.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4273.9,0)"><g data-mml-node="mn" transform="translate(1003.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6781.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7392.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(8392.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8781.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9504,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(10504.2,0)"><g data-mml-node="mn" transform="translate(1003.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(13011.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13400.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(14178.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14623.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15068,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15512.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(16290.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(16679.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(17401.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(18402.1,0)"><g data-mml-node="mn" transform="translate(270,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(19442.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-72.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(297.5,-686)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1162.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(2162.4,0)"><g data-mml-node="mi" transform="translate(1081.2,676)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4892.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(5892.3,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8399.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(9177.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9622.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10067.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10511.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(11289.8,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1081.2,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2522.4" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-2482.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(270,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g></g></g></g></g></g></svg></mjx-container></span></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">poolSampling</span><span class="params">(<span class="keyword">final</span> List&lt;List&lt;Integer&gt;&gt; listList)</span> {</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录当前是第一个数字，即 i ，使用这个值使选中当前值的几率为 1/i</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 返回值，随机的数字 i</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 假设 listList 是一个需要分次读取的文件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> List&lt;Integer&gt; list : listList) {</span><br><span class="line">            <span class="comment">// 每一次读取</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> Integer i : list) {</span><br><span class="line">                count++;</span><br><span class="line">                <span class="comment">// 从 [0,n] 中随机一个数，如果是 0，则替换 res</span></span><br><span class="line">                <span class="comment">// 即 1/i 的几率被选中了</span></span><br><span class="line">                <span class="keyword">if</span> (random.nextInt(count) == <span class="number">0</span>) {</span><br><span class="line">                    res = i;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br></pre></td></tr></table></figure><h1 id="k-1-1">K &gt; 1</h1><p>和 K = 1 思路一致，区别在于 <strong>1/i</strong> 的概率升级为<strong>k/i</strong></p><p><strong>论证公式</strong> <span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -10.046ex;" xmlns="http://www.w3.org/2000/svg" width="61.494ex" height="21.224ex" role="img" focusable="false" viewBox="0 -4940.5 27180.4 9381"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,3570.5)"><g data-mml-node="mtd" transform="translate(778,0)"></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(308,-686)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(2183.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2572.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3294.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4294.9,0)"><g data-mml-node="mi" transform="translate(993.2,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7024.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(8024.8,0)"><g data-mml-node="mn" transform="translate(230.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8985.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9597,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(10597.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(10986.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(11708.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(12708.7,0)"><g data-mml-node="mi" transform="translate(993.2,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(15438.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(16438.6,0)"><g data-mml-node="mn" transform="translate(230.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(17399.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(17788.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(18566.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(19011.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(19455.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(19900.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(20678.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(21067.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(21789.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(22790,0)"><g data-mml-node="mi" transform="translate(259.5,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(24052.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(25052.4,0)"><g data-mml-node="mn" transform="translate(230.5,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(26013.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,1132.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(308,-686)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(2183.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2572.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3294.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(4294.9,0)"><g data-mml-node="mn" transform="translate(1003.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6802.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7413.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(8413.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8802.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9525,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(10525.2,0)"><g data-mml-node="mn" transform="translate(1003.7,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(13032.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13421.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(14199.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(14644.3,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15089,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(15533.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(16311.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(16700.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(17422.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(18423.1,0)"><g data-mml-node="mn" transform="translate(270,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(19463.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-1305.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(308,-686)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><rect width="721" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(1183.2,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(2183.4,0)"><g data-mml-node="mi" transform="translate(1081.2,676)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4913.1,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(5913.3,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(567.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1567.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><rect width="2267.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(8420.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mo" transform="translate(9198.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(9643.4,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10088.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(10532.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(11310.8,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(822.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1822.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(1081.2,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="2522.4" height="60" x="120" y="220"></rect></g></g></g><g data-mml-node="mtr" transform="translate(0,-3743.5)"><g data-mml-node="mtd"><g data-mml-node="mo"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="mtd" transform="translate(778,0)"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(259.5,676)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mi" transform="translate(220,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="800" height="60" x="120" y="220"></rect></g></g></g></g></g></g></svg></mjx-container></span></p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] poolSampling(<span class="keyword">final</span> List&lt;List&lt;Integer&gt;&gt; listList, <span class="keyword">final</span> <span class="type">int</span> k) {</span><br><span class="line">    <span class="keyword">final</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 多个返回值</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">final</span> List&lt;Integer&gt; list : listList) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Integer i : list) {</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 因为 i/k 的几率，所以让 resIndex &lt; k，则 resIndex 一定落在返回值数组中</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">resIndex</span> <span class="operator">=</span> random.nextInt(count);</span><br><span class="line">            <span class="comment">// 满足 i/l 几率（从 0 开始，则小于即可）</span></span><br><span class="line">            <span class="keyword">if</span> (resIndex &lt; k) {</span><br><span class="line">                <span class="comment">// 记录</span></span><br><span class="line">                res[resIndex] = i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>s</p><h1 id="参考">参考</h1><p><a href="https://zhuanlan.zhihu.com/p/107793995">随机算法：水塘抽样算法 -知乎 (zhihu.com)</a></p><p><a href="https://leetcode-cn.com/problems/random-pick-index/">398.随机数索引 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p><a href="https://leetcode-cn.com/problems/linked-list-random-node/">382.链表随机节点 - 力扣（LeetCode） (leetcode-cn.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/">结构算法</category>
      
      
      <category domain="https://www.kugaaa.com/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/%E6%B0%B4%E5%A1%98%E6%8A%BD%E6%A0%B7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LiteFlow - 决策路由</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LiteFlow/LiteFlow%20-%20%E5%86%B3%E7%AD%96%E8%B7%AF%E7%94%B1.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LiteFlow/LiteFlow%20-%20%E5%86%B3%E7%AD%96%E8%B7%AF%E7%94%B1.html</guid>
      <pubDate>Tue, 23 Apr 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;思想&quot;&gt;思想&lt;/h1&gt;
&lt;p&gt;LiteFlow 2.12.0 版本的主要 Feature 就是对决策路由的支持&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KeTx9lZGWn0-mF6ilmO7Fg&quot;&gt;功能引入的文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/dromara/liteFlow/issues/I96A33&quot;&gt;对应的
Issue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样就能实现类似 Drools 中的决策表功能&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="思想">思想</h1><p>LiteFlow 2.12.0 版本的主要 Feature 就是对决策路由的支持</p><p><ahref="https://mp.weixin.qq.com/s/KeTx9lZGWn0-mF6ilmO7Fg">功能引入的文章</a></p><p><a href="https://gitee.com/dromara/liteFlow/issues/I96A33">对应的Issue</a></p><p>这样就能实现类似 Drools 中的决策表功能</p><h2 id="使用-switch-实现">使用 SWITCH 实现</h2><p>决策路由的本质就是判断所有规则的执行条件，并且执行符合条件的规则</p><p>LangChain 早期的设计，入口都是指定一个 Chain进行执行，但也是可以变相支持这种操作，在入口设置一个 <code>SWITCH</code>节点，相当于用一个逻辑判断组合所有的 Chain</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">flow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;chain&quot;</span>&gt;</span></span><br><span class="line">        THEN(SWITCH(condition)</span><br><span class="line">            .to(</span><br><span class="line">                decisionA,</span><br><span class="line">                decisionB,</span><br><span class="line">                decisionC</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 决策逻辑 A--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;decisionA&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 决策逻辑 B--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;decisionB&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 决策逻辑 C--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;decisionC&quot;</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这个 EL 将决策 A、B、C 三个 Chain通过一个选择组件联系了起来，最终实现决策表的效果</p><p>需要注意：</p><ul><li>路由体只能由布尔组件组成</li><li>路由体只能是与或非表达式</li><li>匹配到的每一个规则的上下文实例都是单独的，运行时是并行执行</li><li>路由中的 EL 启动时一定会检查</li><li>路由体的 EL 支持 <code>tag</code> 等关键字</li><li>JSON 和 YAML 等格式使用 <code>value</code> name 的 key来存放规则体，所以没有 <code>body</code></li></ul><h2 id="switch-选择组件">SWITCH 选择组件</h2><p>这里复习一下 CMP 中的选择组件</p><p>选择组件需要继承 <code>NodeSwitchComponent</code>，实现<code>processSwitch</code> 方法</p><p>上面的例子中，就可以这样来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LiteflowComponent(&quot;condition&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCondition</span> <span class="keyword">extends</span> <span class="title class_">NodeSwitchComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">processSwitch</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 决策判断</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">type</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;decisionA&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;decisionB&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;decisionV&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Unexpected value: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里返回的字符串就是控制下一个流程的执行，支持</p><ul><li>node ID（例如 <code>@LiteflowComponent</code> 上配置的组件 ID）</li><li>表达式 ID（对于 EL 表达式中一个表达式设置的 ID<code>WHEN(c,d).id("w1")</code>）</li><li>组件标签（<code>a.tag("1")</code>）</li><li>表达式标签（<code>WHEN(c,d).tag("w1")</code>）</li><li>子流程标签（sub 是一个 chain，<code>sub.tag("w1")</code>）</li></ul><p>代码中对组件进行实现后，对应的 EL 就可以如下书写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;switch1&quot;</span>&gt;</span></span><br><span class="line">    SWITCH(x).TO(a, b, c).DEFAULT(y);</span><br><span class="line"><span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;switch1&quot;</span>&gt;</span></span><br><span class="line">    SWITCH(x).TO(a, b, THEN(c, d).id(&quot;t1&quot;)).DEFAULT(y);</span><br><span class="line"><span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="存在的问题">存在的问题</h2><p>虽然用 SWITCH 可以实现类似全局决策表的功能，但其实还是有一些不同</p><ul><li>每次都要通过前置选择组件的方式实现，操作繁琐</li><li>增加新的 Chain实现时容易漏掉，并且需要改动选择组件实现的代码来接入</li><li>无法实现更灵活的组件选择（例如根据某种情况进行多种排列组合，要对 EL进行表达式拆分）</li></ul><h1 id="使用">使用</h1><h2 id="文档">文档</h2><p>在定义规则的时候，新增了 <code>route</code> 和 <code>body</code>标签</p><ul><li>route 内是决策 EL，决策 EL里只能用与或非表达式，内部的组件只能是布尔组件</li><li>body 内就是原有的规则 EL</li></ul><p>我理解基本的实现思想就是定义了一个顶层的EL，作为决策路由的入口，相当于顶层的选择组件，是框架帮忙加的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;chain1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">route</span>&gt;</span></span><br><span class="line">        AND(r1, r2, r3)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">route</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        THEN(a, b, c);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行时调用 <code>FlowExecutor</code> 提供的一系列新的 API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;LiteflowResponse&gt; responseList = flowExecutor.executeRouteChain(requestData, YourContext.class);</span><br></pre></td></tr></table></figure><p>调用后 LiteFlow会去并行的判断决策路由，符合决策的规则也会被并行的进行执行</p><p>返回是一个 <code>List&lt;LiteflowResponse&gt;</code>，List里面的就是每一个匹配到的规则执行后的结果</p><h2 id="demo">Demo</h2><p>假设有一个成就系统，根据用户运动的一些数据进行成就的发放</p><h3 id="模拟用户成就数据">模拟用户成就数据</h3><p>这里用一个静态 set 存放数据，假设是一次持久化操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserAchievement</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Integer&gt; ACHIEVEMENTS_AND_COUNT = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Synchronized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addAchievement</span><span class="params">(String achievement)</span> &#123;</span><br><span class="line">        ACHIEVEMENTS_AND_COUNT.put(achievement, ACHIEVEMENTS_AND_COUNT.getOrDefault(achievement, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; <span class="title function_">getAchievements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ACHIEVEMENTS_AND_COUNT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上下文参数">上下文参数</h3><p>承接用户的运动数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseData</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户 ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运动距离，单位米</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer exerciseDistanceMeters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 运动时间，单位分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer exerciseTimeMinutes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long timestamp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断组件">判断组件</h3><p>跑步成就相关判断的布尔组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5 公里</span></span><br><span class="line"><span class="meta">@Component(&quot;jr5k&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudgeRun5Kilometers</span> <span class="keyword">extends</span> <span class="title class_">NodeBooleanComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processBoolean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> getRequestData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(exerciseData)</span><br><span class="line">                .map(ExerciseData::getExerciseDistanceMeters)</span><br><span class="line">                .map(distance -&gt; distance &gt;= <span class="number">5000</span>)</span><br><span class="line">                .orElse(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10 公里</span></span><br><span class="line"><span class="meta">@Component(&quot;jr10k&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudgeRun10Kilometers</span> <span class="keyword">extends</span> <span class="title class_">NodeBooleanComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processBoolean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> getRequestData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(exerciseData)</span><br><span class="line">                .map(ExerciseData::getExerciseDistanceMeters)</span><br><span class="line">                .map(distance -&gt; distance &gt;= <span class="number">10000</span>)</span><br><span class="line">                .orElse(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运动时间成就相关判断的布尔组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运动 30 分钟</span></span><br><span class="line"><span class="meta">@Component(&quot;je30m&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudgeExercise30Minutes</span> <span class="keyword">extends</span> <span class="title class_">NodeBooleanComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processBoolean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> getRequestData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(exerciseData)</span><br><span class="line">                .map(ExerciseData::getExerciseTimeMinutes)</span><br><span class="line">                .map(timeMinutes -&gt; timeMinutes &gt;= <span class="number">30</span>)</span><br><span class="line">                .orElse(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运动 60 分钟</span></span><br><span class="line"><span class="meta">@Component(&quot;je60m&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JudgeExercise60Minutes</span> <span class="keyword">extends</span> <span class="title class_">NodeBooleanComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processBoolean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> getRequestData();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(exerciseData)</span><br><span class="line">                .map(ExerciseData::getExerciseTimeMinutes)</span><br><span class="line">                .map(timeMinutes -&gt; timeMinutes &gt;= <span class="number">60</span>)</span><br><span class="line">                .orElse(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断组件就是用于决策路由 EL 中的 <code>rounte</code> 部分</p><h3 id="执行组件">执行组件</h3><p>执行组件用于发放奖励</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跑步 5 公里成就</span></span><br><span class="line"><span class="meta">@LiteflowComponent(&quot;ar5k&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AchievementRun5Kilometers</span> <span class="keyword">extends</span> <span class="title class_">NodeComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserAchievement.addAchievement(<span class="string">&quot;run 5 kilometers&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的实现类似</p><h3 id="el">EL</h3><p>使用 EL 配置决策路由</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">flow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;exercise-30-minutes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">route</span>&gt;</span></span><br><span class="line">            je30m;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">route</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            THEN(ae30m);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;exercise-60-minutes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">route</span>&gt;</span></span><br><span class="line">            je60m;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">route</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            THEN(ae60m);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;run-5-kilometers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">route</span>&gt;</span></span><br><span class="line">            jr5k;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">route</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            THEN(ar5k);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">chain</span> <span class="attr">name</span>=<span class="string">&quot;run-10-kilometers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">route</span>&gt;</span></span><br><span class="line">            jr10k;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">route</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            THEN(ar10k);</span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">chain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">flow</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="执行">执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> ExerciseData.builder()</span><br><span class="line">        .userId(<span class="number">1L</span>)</span><br><span class="line">        .exerciseTimeMinutes(<span class="number">50</span>)</span><br><span class="line">        .exerciseDistanceMeters(<span class="number">15000</span>)</span><br><span class="line">        .timestamp(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line">List&lt;LiteflowResponse&gt; responseList = flowExecutor.executeRouteChain(exerciseData);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成就结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;STAR &quot;</span> + UserAchievement.getAchievements());</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STAR &#123;<span class="built_in">run</span> 10 <span class="attribute">kilometers</span>=1, exercise 30 <span class="attribute">minutes</span>=1, <span class="built_in">run</span> 5 <span class="attribute">kilometers</span>=1&#125;</span><br></pre></td></tr></table></figure><p>可以看到 15 km 的运动距离同时获得了 5 和 10 km 两个成就</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ExerciseData</span> <span class="variable">exerciseData</span> <span class="operator">=</span> ExerciseData.builder()</span><br><span class="line">        .userId(<span class="number">1L</span>)</span><br><span class="line">        .exerciseTimeMinutes(<span class="number">50</span>)</span><br><span class="line">        .exerciseDistanceMeters(<span class="number">15000</span>)</span><br><span class="line">        .timestamp(System.currentTimeMillis())</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;STAR &quot;</span> + UserAchievement.getAchievements());</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">STAR &#123;<span class="built_in">run</span> 5 <span class="attribute">kilometers</span>=1&#125;</span><br></pre></td></tr></table></figure><p>只满足了跑步 5 km 的成就</p><h1 id="源码">源码</h1><h2 id="flowexcutor-执行">FlowExcutor 执行</h2><p>路由决策的入口最终会在设置一些运行时参数后调用<code>doExecuteWithRoute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;LiteflowResponse&gt; <span class="title function_">executeWithRoute</span><span class="params">(Object param, String requestId, Class&lt;?&gt;[] contextBeanClazzArray, Object[] contextBeanArray)</span>&#123;</span><br><span class="line">  <span class="comment">// 核心入口 返回值是 Slot 的集合</span></span><br><span class="line">  List&lt;Slot&gt; slotList = doExecuteWithRoute(param, requestId, contextBeanClazzArray, contextBeanArray);</span><br><span class="line">  <span class="comment">// wrap response</span></span><br><span class="line">  <span class="keyword">return</span> slotList.stream().map(LiteflowResponse::newMainResponse).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行准备">执行准备</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Slot&gt; <span class="title function_">doExecuteWithRoute</span><span class="params">(Object param, String requestId, Class&lt;?&gt;[] contextBeanClazzArray, Object[] contextBeanArray)</span>&#123;</span><br><span class="line">  <span class="comment">// 判断 FlowBus 初始化</span></span><br><span class="line">  <span class="keyword">if</span> (FlowBus.needInit()) &#123;</span><br><span class="line">    init(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取带有路由体的 Chain 集合</span></span><br><span class="line">  List&lt;Chain&gt; routeChainList = FlowBus.getChainMap().values().stream().filter(chain -&gt; chain.getRouteItem() != <span class="literal">null</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有会抛一个异常，因为没有路由规则就没必要调用 executeWithRoute</span></span><br><span class="line">  <span class="keyword">if</span> (CollUtil.isEmpty(routeChainList))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RouteChainNotFoundException</span>(<span class="string">&quot;cannot find any route chain&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 确定 requestId</span></span><br><span class="line">  String finalRequestId;</span><br><span class="line">  <span class="keyword">if</span> (StrUtil.isBlank(requestId))&#123;</span><br><span class="line">    finalRequestId = IdGeneratorHolder.getInstance().generate();</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    finalRequestId = requestId;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在做调用前的准备</p><ol type="1"><li>判断 <code>FlowBus</code> 是否初始化完成；<code>FlowBus</code>是存放各种 <code>Executable</code>的工具，初始化完成后应该加载了环境下所有的组件；没有初始化则初始化是为了兼容其他环境或者Spring 环境下的特殊配置，一般 Spring 环境在 starter 中的 Configuration就完成了初始化</li><li>获取所有决策路由的 Chain 并校验</li><li>确定 requestId；生成一个或者使用参数</li></ol><h3 id="异步执行路由体">异步执行路由体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Slot&gt; <span class="title function_">doExecuteWithRoute</span><span class="params">(Object param, String requestId, Class&lt;?&gt;[] contextBeanClazzArray, Object[] contextBeanArray)</span>&#123;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 异步执行 route el</span></span><br><span class="line">List&lt;Tuple&gt; routeTupleList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Chain routeChain : routeChainList)&#123;</span><br><span class="line">CompletableFuture&lt;Slot&gt; f = CompletableFuture.supplyAsync(</span><br><span class="line">() -&gt; doExecute(routeChain.getChainId(), param, finalRequestId, contextBeanClazzArray, contextBeanArray, <span class="literal">null</span>, InnerChainTypeEnum.NONE, ChainExecuteModeEnum.ROUTE)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">routeTupleList.add(<span class="keyword">new</span> <span class="title class_">Tuple</span>(routeChain, f));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取结果</span></span><br><span class="line">CompletableFuture&lt;?&gt; resultRouteCf = CompletableFuture.allOf(routeTupleList.stream().map(</span><br><span class="line">(Function&lt;Tuple, CompletableFuture&lt;?&gt;&gt;) tuple -&gt; tuple.get(<span class="number">1</span>)</span><br><span class="line">).collect(Collectors.toList()).toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[] &#123;&#125;));</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">resultRouteCf.get();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LiteFlowException</span>(<span class="string">&quot;There is An error occurred while executing the route.&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>异步执行这些 Chain，将 <code>CompletableFuture</code> 和 Chain本身包装为 <code>Tuple</code>；因为后面执行 body 里的逻辑还需要用到这个Chain 对象</li><li>等待任务都执行完成，check 一下有没有异常，任一有异常就会抛出一个<code>LiteFlowException</code></li></ol><h3 id="获取路由结果并执行">获取路由结果并执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 route 执行为 true 都过滤出来</span></span><br><span class="line">List&lt;Chain&gt; matchedRouteChainList = routeTupleList.stream().filter(tuple -&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    CompletableFuture&lt;Slot&gt; f = tuple.get(<span class="number">1</span>);</span><br><span class="line">    <span class="type">Slot</span> <span class="variable">slot</span> <span class="operator">=</span> f.get();</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(slot.getRouteResult());</span><br><span class="line">  &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).map(</span><br><span class="line">    (Function&lt;Tuple, Chain&gt;) tuple -&gt; tuple.get(<span class="number">0</span>)</span><br><span class="line">).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CollUtil.isEmpty(matchedRouteChainList))&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoMatchedRouteChainException</span>(<span class="string">&quot;there is no matched route chain&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步分别执行这些 chain</span></span><br><span class="line">List&lt;CompletableFuture&lt;Slot&gt;&gt; executeChainCfList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (Chain chain : matchedRouteChainList)&#123;</span><br><span class="line">  CompletableFuture&lt;Slot&gt; cf = CompletableFuture.supplyAsync(</span><br><span class="line">      () -&gt; doExecute(chain.getChainId(), param, finalRequestId, contextBeanClazzArray, contextBeanArray, <span class="literal">null</span>, InnerChainTypeEnum.NONE, ChainExecuteModeEnum.BODY)</span><br><span class="line">  );</span><br><span class="line">  executeChainCfList.add(cf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>从上一步的流程中获取路由结果为 true 的</li><li>异步执行路由结果为 true 的 Chain</li></ol><h3 id="处理结果">处理结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;?&gt; resultChainCf = CompletableFuture.allOf(executeChainCfList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[] &#123;&#125;));</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  resultChainCf.get();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LiteFlowException</span>(<span class="string">&quot;There is An error occurred while executing the matched chain.&quot;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Slot&gt; resultSlotList = executeChainCfList.stream().map(slotCompletableFuture -&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> slotCompletableFuture.get();</span><br><span class="line">  &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).filter(Objects::nonNull).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">LOG.info(<span class="string">&quot;There are &#123;&#125; chains that matched the route.&quot;</span>, resultSlotList.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resultSlotList;</span><br></pre></td></tr></table></figure><p>最终就是把结果获取，最后返回</p><p>返回的对象是 Slot，保存了整个 Chain运行时的元数据、过程数据、结果等</p><h3 id="包装-response">包装 Response</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> slotList.stream().map(LiteflowResponse::newMainResponse).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LiteflowResponse <span class="title function_">newResponse</span><span class="params">(Slot slot, Exception e)</span> &#123;</span><br><span class="line">  <span class="type">LiteflowResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiteflowResponse</span>();</span><br><span class="line">  response.setChainId(slot.getChainId());</span><br><span class="line">  <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">    response.setSuccess(<span class="literal">false</span>);</span><br><span class="line">    response.setCause(e);</span><br><span class="line">    response.setMessage(response.getCause().getMessage());</span><br><span class="line">    response.setCode(response.getCause() <span class="keyword">instanceof</span> LiteFlowException</span><br><span class="line">        ? ((LiteFlowException) response.getCause()).getCode() : <span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    response.setSuccess(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  response.setSlot(slot);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终根据执行情况包装为<code>LiteflowResponse</code>，设置不同的属性</p><h2 id="el-解析">EL 解析</h2><p>这里以 XML 格式为例</p><h3 id="解析-route-和-body">解析 route 和 body</h3><p>见<code>com.yomahub.liteflow.parser.helper.ParserHelper#parseOneChainEl(org.dom4j.Element)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Element</span> <span class="variable">routeElement</span> <span class="operator">=</span> e.element(ROUTE);</span><br><span class="line"></span><br><span class="line"><span class="type">LiteFlowChainELBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> LiteFlowChainELBuilder.createChain().setChainId(chainId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在路由体</span></span><br><span class="line"><span class="keyword">if</span> (routeElement != <span class="literal">null</span>)&#123;</span><br><span class="line">        builder.setRoute(ElRegexUtil.removeComments(routeElement.getText()));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 有路由体必然有 Body</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">bodyElement</span> <span class="operator">=</span> e.element(BODY);</span><br><span class="line">        <span class="keyword">if</span> (bodyElement == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;If you have defined the tag &lt;route&gt;, then you must define the tag &lt;body&gt; in chain[&#123;&#125;]&quot;</span>, chainId);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowSystemException</span>(errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">        builder.setEL(ElRegexUtil.removeComments(bodyElement.getText()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不存在</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 这里兼容新增的 Body 标签写法和原有无任何标签的写法</span></span><br><span class="line">    <span class="type">Element</span> <span class="variable">bodyElement</span> <span class="operator">=</span> e.element(BODY);</span><br><span class="line">    <span class="keyword">if</span> (bodyElement != <span class="literal">null</span>)&#123;</span><br><span class="line">        builder.setEL(ElRegexUtil.removeComments(bodyElement.getText()));</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        builder.setEL(ElRegexUtil.removeComments(e.getText()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由体是新的处理，使用<code>builder.setRoute(ElRegexUtil.removeComments(routeElement.getText()))</code></p><p>构造相关的对象</p><p>而对于 body 则和旧有没有标签的逻辑是一致的</p><h3 id="build-路由体">Build 路由体</h3><p>见<code>com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder#setRoute</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LiteFlowChainELBuilder <span class="title function_">setRoute</span><span class="params">(String routeEl)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(routeEl)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;You have defined the label &lt;route&gt; but there is no el in the chain route[&#123;&#125;].&quot;</span>, chain.getChainId());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FlowSystemException</span>(errMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; errorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DefaultContext&lt;String, Object&gt; context = <span class="keyword">new</span> <span class="title class_">DefaultContext</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 往上下文里放入所有的node，使得el表达式可以直接引用到nodeId</span></span><br><span class="line">        FlowBus.getNodeMap().keySet().forEach(nodeId -&gt; context.put(nodeId, FlowBus.getNode(nodeId)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析route el成为一个executable</span></span><br><span class="line">        <span class="type">Executable</span> <span class="variable">routeExecutable</span> <span class="operator">=</span> (Executable) EXPRESS_RUNNER.execute(routeEl, context, errorList, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断routeEL是不是符合规范</span></span><br><span class="line">        <span class="keyword">if</span> (!(routeExecutable <span class="keyword">instanceof</span> AndOrCondition || routeExecutable <span class="keyword">instanceof</span> NotCondition || routeExecutable <span class="keyword">instanceof</span> Node)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RouteELInvalidException</span>(<span class="string">&quot;the route EL can only be a boolean node, or an AND or OR expression.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把主要的condition加入</span></span><br><span class="line">        <span class="built_in">this</span>.route = routeExecutable;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (QLException e) &#123;</span><br><span class="line">        <span class="comment">// EL 底层会包装异常，这里是曲线处理</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNotNull(e.getCause()) &amp;&amp; Objects.equals(e.getCause().getMessage(), DataNotFoundException.MSG)) &#123;</span><br><span class="line">            <span class="comment">// 构建错误信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> buildDataNotFoundExceptionMsg(routeEl);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ELParseException</span>(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ObjectUtil.isNotNull(e.getCause())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ELParseException</span>(e.getCause().getMessage());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ELParseException</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RouteELInvalidException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> StrUtil.format(<span class="string">&quot;parse el fail in this chain[&#123;&#125;];\r\n&quot;</span>, chain.getChainId());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ELParseException</span>(errMsg + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>构造 EL 解析的上下文；这里只放入了Node，说明路由体中不支持子流程</li><li>经过 <code>ExpressRunner</code>，解析出 <code>Executable</code></li><li>校验 <code>Executable</code> 只能是布尔组件、或者与或非Condition</li><li>保存到 <code>route</code> 属性</li></ol><h3 id="build-chain">Build Chain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.chain.setRouteItem(<span class="built_in">this</span>.route);</span><br><span class="line">    <span class="built_in">this</span>.chain.setConditionList(<span class="built_in">this</span>.conditionList);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//暂且去掉循环依赖检测，因为有发现循环依赖检测在对大的EL进行检测的时候，会导致CPU飙升，也或许是jackson低版本的问题</span></span><br><span class="line">    <span class="comment">//checkBuild();</span></span><br><span class="line"></span><br><span class="line">    FlowBus.addChain(<span class="built_in">this</span>.chain);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>见<code>com.yomahub.liteflow.builder.el.LiteFlowChainELBuilder#build</code></p><ol type="1"><li>执行 <code>build</code> 方法后会将路由体和规则设置为 Chain对象的属性</li><li>将该 Chain 对象加入 <code>FlowBus</code></li></ol><h1 id="总结">总结</h1><p>本质上就是从框架层面支持了顶层的判断表达，使用异步判断条件是否符合并且执行结果</p><p>路由和路由之间是隔离的，性能可能会存在问题</p><h1 id="参考">参考</h1><p><a href="https://liteflow.cc/pages/b7ed78/">🍽决策路由用法 |LiteFlow</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/">开源学习</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LiteFlow/">LiteFlow</category>
      
      
      <category domain="https://www.kugaaa.com/tags/%E6%BA%90%E7%A0%81/">源码</category>
      
      <category domain="https://www.kugaaa.com/tags/LiteFlow/">LiteFlow</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/%E5%BC%80%E6%BA%90%E5%AD%A6%E4%B9%A0/LiteFlow/LiteFlow%20-%20%E5%86%B3%E7%AD%96%E8%B7%AF%E7%94%B1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MySQL EXPLAIN 中的 type range</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range.html</guid>
      <pubDate>Mon, 18 Mar 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;
&lt;p&gt;之前一直对索引分析中 type range 有误解&lt;/p&gt;
&lt;p&gt;下面是官方文档对 type range 的解释&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_range&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt;
can be used when a key column is compared to a constant using any of the
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal&quot;&gt;&lt;code&gt;=&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-equal&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than&quot;&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than-or-equal&quot;&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than&quot;&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than-or-equal&quot;&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-null&quot;&gt;&lt;code&gt;IS NULL&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal-to&quot;&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_between&quot;&gt;&lt;code&gt;BETWEEN&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_like&quot;&gt;&lt;code&gt;LIKE&lt;/code&gt;&lt;/a&gt;,
or &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_in&quot;&gt;&lt;code&gt;IN()&lt;/code&gt;&lt;/a&gt;
operators:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; key_column &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; key_column &lt;span class=&quot;keyword&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; key_column &lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;FROM&lt;/span&gt; tbl_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; key_part1 &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;AND&lt;/span&gt; key_part2 &lt;span class=&quot;keyword&quot;&gt;IN&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;IN&lt;/code&gt; 查询下的 range 什么时候会恶化为 ALL
呢？按照我之前的理解，可能有两点&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="背景">背景</h1><p>之前一直对索引分析中 type range 有误解</p><p>下面是官方文档对 type range 的解释</p><blockquote><p><ahref="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_range"><code>range</code></a>can be used when a key column is compared to a constant using any of the<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal"><code>=</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_not-equal"><code>&lt;&gt;</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than"><code>&gt;</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_greater-than-or-equal"><code>&gt;=</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than"><code>&lt;</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_less-than-or-equal"><code>&lt;=</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_is-null"><code>IS NULL</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_equal-to"><code>&lt;=&gt;</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_between"><code>BETWEEN</code></a>,<ahref="https://dev.mysql.com/doc/refman/5.7/en/string-comparison-functions.html#operator_like"><code>LIKE</code></a>,or <ahref="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#operator_in"><code>IN()</code></a>operators:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line"><span class="keyword">WHERE</span> key_column <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line"><span class="keyword">WHERE</span> key_column <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line"><span class="keyword">WHERE</span> key_column <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> tbl_name</span><br><span class="line"><span class="keyword">WHERE</span> key_part1 <span class="operator">=</span> <span class="number">10</span> <span class="keyword">AND</span> key_part2 <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure></blockquote><p><code>IN</code> 查询下的 range 什么时候会恶化为 ALL呢？按照我之前的理解，可能有两点</p><ul><li>数量太多；这点是一个老生常谈的问题，例如 <code>IN</code>需要不能传过多的值，否则优化器不会选择走索引</li><li>范围太大；事实证明，<code>IN</code> 和范围无关</li></ul><p>上述两点中，第二点是错误的，范围太大并不会导致 <code>IN</code> 的索引type 退化为 ALL</p><p>这篇文档就是进行验证和记录答案</p><h1 id="理清概念">理清概念</h1><h2 id="type">type</h2><p>在 EXLAIN 中，type 指的是 join type</p><blockquote><p>The <code>type</code> column of <ahref="https://dev.mysql.com/doc/refman/5.7/en/explain.html"><code>EXPLAIN</code></a>output describes how tables are joined. In JSON-formatted output, theseare found as values of the <code>access_type</code> property.</p></blockquote><p>对于 type 的好坏这里就不再赘述</p><p>从好到坏为：</p><ol type="1"><li><code>system</code> 该表只有一行（系统表）；特殊的 const</li><li><code>const</code> 该表最多有一个匹配行，该行在查询开始时读取</li><li><code>eq_ref</code>对于前一个表中的每一行组合，都会从该表中读取一行；出现在联表查询时，当联接使用索引的所有部分，并且该索引是PRIMARY KEY 或 UNIQUE NOT NULL 索引时</li><li><code>ref</code>对于前一个表中的每一个行组合，都会从此表中读取索引值匹配的所有行；出现在联表查询时，如果联接不能根据键值选择一行</li><li><code>fulltext</code> 联表查询使用 FULLTEXT 索引</li><li><code>ref_or_null</code> 类似于 <code>ref</code>，但 MySQL 会对包含<code>NULL</code> 值的行进行额外搜索</li><li><code>index_merge</code> 使用了索引合并（Index Merge）优化</li><li><code>unique_subquery</code> 含有 <code>eq_ref</code> 的子查询</li><li><code>index_subquery</code> 类似<code>unique_subquery</code>，但索引是非唯一约束</li><li><code>range</code> 只检索给定范围内的行，使用索引选择行</li><li><code>index</code> 与 <code>ALL</code>相同，只是扫描了索引树；区别在于索引覆盖或者按照索引顺序回表</li><li><code>ALL</code> 完整的表扫描</li></ol><p>也就是说 type 表达的是 JOIN 下索引的执行类型（单表可以理解为特殊的JOIN）</p><h2 id="rows">rows</h2><blockquote><p>The <code>rows</code> column indicates the number of rows MySQLbelieves it must examine to execute the query.</p><p>For <ahref="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html"><code>InnoDB</code></a>tables, this number is an estimate, and may not always be exact.</p></blockquote><p>这里有一个疑问，rows 指的是扫描索引的行数还是回表的行数？</p><p>官方文档只表达为 <code>must examine to execute</code></p><p>下面这里做一个验证，我有这样一个表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `city` (</span><br><span class="line">  `ID` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `Name` <span class="type">char</span>(<span class="number">35</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `CountryCode` <span class="type">char</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `District` <span class="type">char</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `Population` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`ID`),</span><br><span class="line">  KEY `CountryCode` (`CountryCode`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `city_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`CountryCode`) <span class="keyword">REFERENCES</span> `country` (`Code`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>执行下面的分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="operator">=</span> &quot;BRA&quot; <span class="keyword">AND</span> name <span class="operator">=</span> &quot;Fortaleza&quot;;</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-1.png" class="" title="img-1"><p>可以看到使用了索引 <code>CountryCode</code>，type 为<code>ref</code>，行数为 250，我们表中 <code>CountryCode = "BRA"</code>对应的数据就是 250 行</p><p>如果我们在索引上加上 <code>name</code>，可以猜测使用新的索引 rows应该是 1 行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> city <span class="keyword">ADD</span> KEY `idx_CountryCode_name`(`CountryCode`,`name`);</span><br></pre></td></tr></table></figure><p>再次执行分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="operator">=</span> &quot;BRA&quot; <span class="keyword">AND</span> name <span class="operator">=</span> &quot;Fortaleza&quot;;</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-2.png" class="" title="img-2"><p>和猜想的没错，rows 其实表示的是回表的行数</p><p>如果我们将语句修改为只查询 name 呢？会产生索引覆盖，那么 rows如何显示？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="operator">=</span> &quot;BRA&quot; <span class="keyword">AND</span> name <span class="operator">=</span> &quot;Fortaleza&quot;;</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-3.png" class="" title="img-3"><p>可以看到 Extra 告诉我们 <code>Using index</code> 使用了索引覆盖，但是rows 还是 1</p><p>不过不管怎么说，我们可以认为 rows表达的是回表的行，起码不是代表扫过的索引；事实上从语义上也可以这么理解，索引中也不会有row 这个概念（BTree）</p><h1 id="验证">验证</h1><h2 id="和数量有关">和数量有关</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="keyword">IN</span> (&quot;ABW&quot;, &quot;AFG&quot;, &quot;AGO&quot;);</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-4.png" class="" title="img-4"><p>可以看到上面这个语句成功走了索引，type 为 range</p><p>如果加大 <code>IN</code> 中的值数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="keyword">IN</span> (&quot;ABW&quot;, &quot;AFG&quot;, &quot;AGO&quot;, &quot;AIA&quot;, &quot;ALB&quot;, &quot;AND&quot;, &quot;ANT&quot;, &quot;ARE&quot;, &quot;ARG&quot;, &quot;ARM&quot;, &quot;ASM&quot;, &quot;ATG&quot;, &quot;AUS&quot;, &quot;AUT&quot;, &quot;AZE&quot;, &quot;BDI&quot;, &quot;BEL&quot;, &quot;BEN&quot;, &quot;BFA&quot;, &quot;BGD&quot;, &quot;BGR&quot;, &quot;BHR&quot;, &quot;BHS&quot;, &quot;BIH&quot;, &quot;BLR&quot;, &quot;BLZ&quot;, &quot;BMU&quot;, &quot;BOL&quot;, &quot;BRA&quot;, &quot;BRB&quot;, &quot;BRN&quot;, &quot;BTN&quot;, &quot;BWA&quot;, &quot;CAF&quot;, &quot;CAN&quot;, &quot;CCK&quot;, &quot;CHE&quot;, &quot;CHL&quot;, &quot;CHN&quot;, &quot;CIV&quot;, &quot;CMR&quot;, &quot;COD&quot;, &quot;COG&quot;, &quot;COK&quot;, &quot;COL&quot;, &quot;COM&quot;, &quot;CPV&quot;, &quot;CRI&quot;, &quot;CUB&quot;, &quot;CXR&quot;, &quot;CYM&quot;, &quot;CYP&quot;, &quot;CZE&quot;, &quot;DEU&quot;, &quot;DJI&quot;, &quot;DMA&quot;, &quot;DNK&quot;, &quot;DOM&quot;, &quot;DZA&quot;, &quot;ECU&quot;, &quot;EGY&quot;, &quot;ERI&quot;, &quot;ESH&quot;, &quot;ESP&quot;, &quot;EST&quot;, &quot;ETH&quot;, &quot;FIN&quot;, &quot;FJI&quot;, &quot;FLK&quot;, &quot;FRA&quot;, &quot;FRO&quot;, &quot;FSM&quot;, &quot;GAB&quot;, &quot;GBR&quot;, &quot;GEO&quot;, &quot;GHA&quot;, &quot;GIB&quot;, &quot;GIN&quot;, &quot;GLP&quot;, &quot;GMB&quot;, &quot;GNB&quot;, &quot;GNQ&quot;, &quot;GRC&quot;, &quot;GRD&quot;, &quot;GRL&quot;, &quot;GTM&quot;, &quot;GUF&quot;, &quot;GUM&quot;, &quot;GUY&quot;, &quot;HKG&quot;, &quot;HND&quot;, &quot;HRV&quot;, &quot;HTI&quot;, &quot;HUN&quot;, &quot;IDN&quot;, &quot;IND&quot;, &quot;IRL&quot;, &quot;IRN&quot;, &quot;IRQ&quot;, &quot;ISL&quot;, &quot;ISR&quot;, &quot;ITA&quot;, &quot;JAM&quot;, &quot;JOR&quot;, &quot;JPN&quot;, &quot;KAZ&quot;, &quot;KEN&quot;, &quot;KGZ&quot;, &quot;KHM&quot;);</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-5.png" class="" title="img-5"><p>可以看到走了 type 为 ALL 的全表扫描</p><h2 id="和范围有关">和范围有关</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(CountryCode) <span class="keyword">FROM</span> city;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span>(CountryCode) <span class="keyword">FROM</span> city <span class="keyword">ORDER</span> <span class="keyword">BY</span> CountryCode LIMIT <span class="number">110</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>得到 <code>CountryCode</code> 最小值和中间值为 <code>ABW</code> 和<code>KNA</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="keyword">IN</span> (&quot;ABW&quot;, &quot;KNA&quot;);</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-6.png" class="" title="img-6"><p>可以发现依然是 range，和 <code>IN</code> 中的范围没有关系</p><p>而且扫描行数是 2，这是不是可以说明表中值为 <code>ABW</code> 和<code>KNA</code> 的数据只有两条呢？（虽然 InnoDB引擎下的行数不一定准确）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="keyword">IN</span> (&quot;ABW&quot;, &quot;KNA&quot;);</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-7.png" class="" title="img-7"><p>结果确实是 2 行</p><h1 id="结论">结论</h1><h2 id="为什么和数量有关">为什么和数量有关</h2><blockquote><p>Read about <ahref="https://dev.mysql.com/doc/refman/8.0/en/range-optimization.html#range-optimization-memory-use">LimitingMemory Use for Range Optimization</a>.</p><p>When you have a large list of values in an <code>IN()</code>predicate, it uses more memory during the query optimization step. Thiswas considered a problem in some cases, so recent versions of MySQL seta max memory limit (it's 8MB by default).</p><p>If the optimizer finds that it would need more memory than the limit,there is not another condition in your query it can use to optimize, itgives up trying to optimize, and resorts to a table-scan. I infer thatyour table statistics actually show that the table has ~221 million rows(though table statistics are inexact estimates).</p><p>I can't say I know the exact formula to know how much memory isneeded for a given list of values, but given your observed behavior, wecould guess that it's about 600 bytes per item on average, given that14k items works and more than that does not work.</p><p>You can set <code>range_optimizer_max_mem_size = 0</code> to disablethe memory limit. This creates a risk of excessive memory use, but itavoids the optimizer "giving up." We set this value on all MySQLinstances at my last job, because we couldn't educate the developers toavoid creating huge lists of values in their queries.</p></blockquote><p>总结：</p><ul><li>优化器认为应该走全表扫描</li><li>索引使用的内存超出了 <code>range_optimizer_max_mem_size</code>的限制</li></ul><p><code>range_optimizer_max_mem_size</code> 的默认值为<code>8388608</code> 即 8 MB</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION range_optimizer_max_mem_size <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> CountryCode <span class="keyword">IN</span> (&quot;ABW&quot;, &quot;KNA&quot;);</span><br></pre></td></tr></table></figure><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-8.png" class="" title="img-8"><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-9.png" class="" title="img-9"><h2 id="innodb-引擎下-rows-近似值">InnoDB 引擎下 rows 近似值</h2><p>对于 InnoDB 引擎而言，EXPLAIN 下的 rows数字是一个估计值，可能并不总是准确的</p><p>因为 InnoDB存储引擎使用了一种称为多版本并发控制（MVCC）的机制来处理并发事务，MVCC允许多个事务同时读取和修改表中的数据，而不会相互干扰</p><p>为了支持 MVCC，InnoDB 使用 Undo Log 用于存储旧版本的数据</p><p>当一个事务修改了表中的数据时，InnoDB会将旧版本的数据存储在回滚段中，以便其他事务可以读取到一致的数据视图</p><p>由于回滚段中可能存在多个事务的旧版本数据，InnoDB无法精确地知道表中的行数。它只能根据回滚段中的数据估计出大致的行数</p><h2 id="eq_range_index_dive_limit">eq_range_index_dive_limit</h2><p><code>eq_range_index_dive_limit</code> 这个参数在控制什么呢？</p><p>其实控制的是对扫描行数的预估</p><p>简单来说就是根据 <code>eq_range_index_dive_limit</code>参数设置的阀值来按照不同算法预估影响行数，对于 <code>IN</code> 或<code>OR</code> 条件中的每个范围段视为一个元组，对于元组数低于<code>eq_range_index_dive_limit</code> 参数阀值时使用 index dive算法，对于高于阈值使用 index statistics 算法</p><ul><li><strong>index dive</strong> 针对每个元组 dive 到 index中使用索引完成元组数的估算，类似于使用索引进行实际查询得到影响行数</li><li><strong>index statistics</strong>根据索引的统计数值进行估算，例如索引统计信息计算出每个等值影响 100条数据，那么 <code>IN</code> 条件中包含 5 个等值则影响<code>5 * 100</code> 条记录</li></ul><p><code>eq_range_index_dive_limit</code> 在 5.7 版本下默认<code>200</code></p><img src="/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range/img-10.png" class="" title="img-10"><p>可以看到将 <code>eq_range_index_dive_limit</code> 设置为 1时，优化器认为超出了阈值，使用 index statistics 进行估算，返回的 rows是不符合实际情况的估算值</p><h1 id="参考">参考</h1><p><ahref="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#explain-join-types">MySQL:: MySQL 5.7 Reference Manual :: 8.8.2 EXPLAIN Output Format</a></p><p><ahref="https://zhuanlan.zhihu.com/p/638202900?utm_id=0">in用不用索引，啥时候能用啥时候不能用，一文说清- 知乎 (zhihu.com)</a></p><p><ahref="https://stackoverflow.com/questions/72361880/mysql-in-operator-on-large-number-of-values">MySQL'IN' operator on large number of values - Stack Overflow</a></p><p><ahref="https://dev.mysql.com/doc/refman/8.0/en/range-optimization.html#range-optimization-memory-use">LimitingMemory Use for Range Optimization</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/DB/">DB</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/DB/MySQL/">MySQL</category>
      
      
      <category domain="https://www.kugaaa.com/tags/DB/">DB</category>
      
      <category domain="https://www.kugaaa.com/tags/MySQL/">MySQL</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/MySQL/MySQL%20EXPLAIN%20%E4%B8%AD%E7%9A%84%20type%20range.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Redis SCAN 原理</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/Redis/Redis%20SCAN%20%E5%8E%9F%E7%90%86.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/Redis/Redis%20SCAN%20%E5%8E%9F%E7%90%86.html</guid>
      <pubDate>Mon, 05 Feb 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;如何使用&quot;&gt;如何使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SCAN cursor [MATCH pattern] [COUNT count] [TYPE &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一次调用是 &lt;code&gt;O(1)&lt;/code&gt;，完整的迭代是
&lt;code&gt;O(N)&lt;/code&gt;，包括不断调用直到返回 cursor 为 0；N
为集合内元素数量&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="如何使用">如何使用</h1><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCAN cursor [MATCH pattern] [COUNT count] [TYPE <span class="built_in">type</span>]</span><br></pre></td></tr></table></figure><p><strong>时间复杂度</strong></p><p>一次调用是 <code>O(1)</code>，完整的迭代是<code>O(N)</code>，包括不断调用直到返回 cursor 为 0；N为集合内元素数量</p><p><code>SCAN</code> 命令和相关的 <code>SSCAN</code>、<code>HSCAN</code>和 <code>ZSCAN</code> 命令都是用于对元素集合进行增量迭代</p><ul><li><code>SCAN</code> 迭代当前所选 Redis 数据库中 keys</li><li><code>SSCAN</code> 迭代 Set 的元素</li><li><code>HSCAN</code> 迭代 Hash 的字段和它们对应的 value</li><li><code>ZSCAN</code> 迭代 Sorted Set 和它们对应的 score</li></ul><p>由于这些命令允许增量迭代，每次调用只返回少量元素，因此可以在生产中使用它们，而不会出现<code>KEYS</code> 或 <code>SMEMBERS</code>等命令的缺点，这些命令在针对大量 key或元素调用时可能会长时间（甚至几秒钟）阻塞服务器</p><p>然而，尽管像 <code>SMEMBERS</code>这样的阻塞命令能够在给定的时刻提供集合的所有元素，但 <code>SCAN</code>命令族仅对返回的元素提供有限的保证，因为我们增量迭代的集合可能在迭代过程中发生变化（事实上现在<code>SCAN</code>使用的方式可以避免漏掉元素，但不能保证不重复元素，不过这种算法只有实践验证，并未得到数学层面的验证）</p><p>具体可以查看官方文档中 <strong>Scan guarantees</strong> 内容</p><h2 id="使用示例">使用示例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> 1 1</span><br><span class="line">&gt; <span class="built_in">set</span> 2 2</span><br><span class="line">&gt; <span class="built_in">set</span> 3 3</span><br><span class="line">&gt; <span class="built_in">set</span> 4 4</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; SCAN 0</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;2&quot;</span></span><br><span class="line">   2) <span class="string">&quot;3&quot;</span></span><br><span class="line">   3) <span class="string">&quot;4&quot;</span></span><br><span class="line">   4) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>返回的 cursor 是 <code>0</code>，说明已经返回了所有的元素</p><p>返回的 keys 列表为<code>2</code>、<code>3</code>、<code>4</code>、<code>1</code></p><p>可以看到返回顺序并非添加顺序，因为 Redis keys的底层也使用的哈希结构，非有序</p><p>设置 <code>MATCH</code> 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SCAN 0 MATCH 1</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>只会返回匹配的 key</p><p>设置 <code>COUNT</code> 参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; SCAN 0 COUNT 2</span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;2&quot;</span></span><br><span class="line">   2) <span class="string">&quot;3&quot;</span></span><br><span class="line"> </span><br><span class="line">&gt; SCAN 3 COUNT 2</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;4&quot;</span></span><br><span class="line">   2) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><p>第一返回了 2 个 key，并且返回了下一个 cursor 为 <code>3</code></p><p>第二次 cursor 返回 <code>0</code>，表示迭代完了所有的元素</p><h2 id="为什么-scan-可能会在单个调用中返回所有元素">为什么 SCAN可能会在单个调用中返回所有元素？</h2><p>在 <code>COUNT</code>参数的文档说明中提到，有时这类命令可能会在一次调用中同时返回 Set、Hash或 Sorted Set 的所有元素，而与 <code>COUNT</code> 的值无关</p><p>之所以会发生这种情况，是因为只有当我们正在扫描的聚合数据类型表示为哈希表（HashTable）时，才可以实现基于光标的迭代器（cursor-based iterator），但是Redis使用了内存优化，受优化的影响，小的聚合数据类型使用紧凑的单分配压缩编码来表示，直到它们达到给定的项目数量或单个元素的给定最大大小</p><p>在这种情况下，<code>SCAN</code>没有可返回的有意义的游标，并且必须一次迭代整个数据结构，因此它唯一合理的行为就是在调用中返回所有内容</p><p>还要注意，这种行为是 <code>SSCAN</code>、<code>HSCAN</code> 和<code>ZSCAN</code> 特有的；<code>SCAN</code> 本身从不显示这种行为，因为keys 的存储总是由哈希表实现</p><p>概括一下，即当聚合类型的 key使用非哈希结构时（压缩列表等数据结构），游标的概念无意义</p><p>尝试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; HSET test_scan 1 1</span><br><span class="line">&gt; HSET test_scan 2 2</span><br><span class="line">&gt; HSET test_scan 3 3</span><br></pre></td></tr></table></figure><p>创建了一个 Hash key，按照默认配置，当前的 key 使用的是压缩列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; HSCAN test_scan 0 COUNT 1</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1&quot;</span></span><br><span class="line">   2) <span class="string">&quot;1&quot;</span></span><br><span class="line">   3) <span class="string">&quot;2&quot;</span></span><br><span class="line">   4) <span class="string">&quot;2&quot;</span></span><br><span class="line">   5) <span class="string">&quot;3&quot;</span></span><br><span class="line">   6) <span class="string">&quot;3&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到哪怕命令中明确设置了 <code>COUNT</code> 参数为<code>1</code>，还是返回了整个 key 所有的元素</p><h1 id="实现原理">实现原理</h1><h2 id="cursor-非递增">cursor 非递增</h2><p>cursor 是哈希槽的坐标（经过运算），所以不断增加 cursor一直调用，最终就可以查询到所有的元素</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">set</span> 1 1</span><br><span class="line">&gt; <span class="built_in">set</span> 2 2</span><br><span class="line">&gt; <span class="built_in">set</span> 3 3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; SCAN 0 COUNT 1</span><br><span class="line">1) <span class="string">&quot;2&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1&quot;</span></span><br><span class="line">   </span><br><span class="line">&gt; SCAN 2 COUNT 1</span><br><span class="line">1) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; SCAN 1 COUNT 1</span><br><span class="line">1) <span class="string">&quot;3&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">&gt; SCAN 3 COUNT 1</span><br><span class="line">1) <span class="string">&quot;0&quot;</span></span><br><span class="line">2) (empty list or <span class="built_in">set</span>)</span><br></pre></td></tr></table></figure><p>可以看到 cursor 的顺序 0 -&gt; 2 -&gt; 1 -&gt;3，并非是顺序递增（注意，这个实验结果和 Redis 当前存储 key 的哈希表 size有关，如果哈希表已经扩容过，可能无法和当前结果一致，可以切换到新的 DB上进行实验）</p><h2 id="高位-1">高位 + 1</h2><p>将上面 cursor 值转换为二进制</p><p><code>00 -&gt; 10 -&gt; 01 -&gt; 11</code></p><p>可以观察出这个序列是逐步高位加 1 的，进 1 则进到低位</p><h2 id="逆二进制迭代">逆二进制迭代</h2><p>即 <code>Scan</code> 命令使用的是 <strong>reverse binaryiteration</strong> 算法</p><p>实现细节相关 issue <ahref="https://github.com/redis/redis/pull/579">Add SCAN command bypietern · Pull Request #579 · redis/redis (github.com)</a></p><p>简单来说就是将低位向高位的运算变为高位向低位，则同样的当二进制为<code>11...111</code> 时，进一则变为 <code>0</code></p><p>最终通过迭代扫描整个字典</p><p><strong>Redis 实现相关代码</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将游标 v 的 unmasked 比特都置为 1</span></span><br><span class="line">v |= ~m0;</span><br><span class="line"><span class="comment">// 反转 v</span></span><br><span class="line">v = rev(v);</span><br><span class="line"><span class="comment">// 关键，对一个数加 1，其实就是将这个数的低位的连续 1 变为 0，然后将最低的一个 0 变为 1，其实就是将最低的一个 0 变为 1</span></span><br><span class="line">v++;</span><br><span class="line"><span class="comment">// 再次反转，即得到下一个游标值</span></span><br><span class="line">v = rev(v);</span><br></pre></td></tr></table></figure><p><strong>使用 Java 实现了一下，方便观察位运算的操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseBinaryIteration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZE_BIT_COUNT</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">end</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!end) &#123;</span><br><span class="line">            next = getReverseBinaryIterationNext(next);</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="number">0</span>) &#123;</span><br><span class="line">                end = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getReverseBinaryIterationNext</span><span class="params">(<span class="type">int</span> current)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.of(current)</span><br><span class="line">                <span class="comment">// 将游标的 unmasked 比特都置为 1</span></span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> setUnmasked(i);</span><br><span class="line">                    System.out.println(<span class="string">&quot;setUnmasked : &quot;</span> + Integer.toBinaryString(res));</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> reverseBits(i);</span><br><span class="line">                    System.out.println(<span class="string">&quot;reverseBits : &quot;</span> + Integer.toBinaryString(res));</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> ++i;</span><br><span class="line">                    System.out.println(<span class="string">&quot;低位加 1 : &quot;</span> + Integer.toBinaryString(res));</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> reverseBits(i);</span><br><span class="line">                    System.out.println(<span class="string">&quot;reverseBits : &quot;</span> + Integer.toBinaryString(res));</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;)</span><br><span class="line">                .map(i -&gt; &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;最终结果 : &quot;</span> + Integer.toBinaryString(i));</span><br><span class="line">                    System.out.println(<span class="string">&quot;---------------------------------------&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;)</span><br><span class="line">                .get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非有效位设置为 1</span></span><br><span class="line"><span class="comment">     * SIZE_BIT_COUNT 为模拟有效位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">setUnmasked</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 全是 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">0xffffffff</span>;</span><br><span class="line">        <span class="comment">// 模拟有效位数的保留码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">retain_mask</span> <span class="operator">=</span> ((<span class="number">1</span> &lt;&lt; SIZE_BIT_COUNT) - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 保留有效位数</span></span><br><span class="line">        mask &amp;= ~retain_mask;</span><br><span class="line">        <span class="comment">// 或出结果</span></span><br><span class="line">        <span class="keyword">return</span> num | mask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反转比特位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">reverseBits</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span> &amp;&amp; num != <span class="number">0</span>; ++i) &#123;</span><br><span class="line">            res |= (num &amp; <span class="number">1</span>) &lt;&lt; (<span class="number">31</span> - i);</span><br><span class="line">            num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中模拟 masked 位数为 2，即 4 个哈希槽，结果如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">setUnmasked : 11111111111111111111111111111100</span><br><span class="line">reverseBits : 111111111111111111111111111111</span><br><span class="line">低位加 1 : 1000000000000000000000000000000</span><br><span class="line">reverseBits : 10</span><br><span class="line"><span class="section">最终结果 : 10</span></span><br><span class="line"><span class="section">---------------------------------------</span></span><br><span class="line">setUnmasked : 11111111111111111111111111111110</span><br><span class="line">reverseBits : 1111111111111111111111111111111</span><br><span class="line">低位加 1 : 10000000000000000000000000000000</span><br><span class="line">reverseBits : 1</span><br><span class="line"><span class="section">最终结果 : 1</span></span><br><span class="line"><span class="section">---------------------------------------</span></span><br><span class="line">setUnmasked : 11111111111111111111111111111101</span><br><span class="line">reverseBits : 10111111111111111111111111111111</span><br><span class="line">低位加 1 : 11000000000000000000000000000000</span><br><span class="line">reverseBits : 11</span><br><span class="line"><span class="section">最终结果 : 11</span></span><br><span class="line"><span class="section">---------------------------------------</span></span><br><span class="line">setUnmasked : 11111111111111111111111111111111</span><br><span class="line">reverseBits : 11111111111111111111111111111111</span><br><span class="line">低位加 1 : 0</span><br><span class="line">reverseBits : 0</span><br><span class="line"><span class="section">最终结果 : 0</span></span><br><span class="line"><span class="section">---------------------------------------</span></span><br></pre></td></tr></table></figure><p>可以看到最终实现了高位加 1 的运算，0 -&gt; 2 -&gt; 1 -&gt; 3 -&gt;0</p><h2 id="模拟">模拟</h2><p>在运行过程中，Redis的哈希表会有哪些操作，这些操作是否会导致数据错误</p><h3 id="哈希表不变">哈希表不变</h3><p>在哈希表不变的情况下，游标使用逆二进制迭代最终会扫描所有槽位</p><h3 id="扩容完成">扩容完成</h3><p>假设在上一次调用时，哈希表的槽位是 4，这次调用时槽位经过 resize扩大到了 8</p><p>在扩容过程中，key 会被重新分配槽位，其哈希值不变，槽位计算方式为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash(key)&amp;(size<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>假设一个 key 哈希为 <code>6</code>，之前计算槽位为<code>2(10)</code>，那么扩容后即为 <code>6(101)</code>，即 2 和 6称为同模</p><p>假设一个 key 哈希为 <code>7</code>，之前计算槽位为<code>3(11)</code>，那么扩容后即为 <code>7(111)</code>，即 3 和 7称为同模</p><p>如何保证在这个过程中游标不会略过修改后的槽位？</p><p>只需要保证</p><ul><li>一个 key 扩容后的槽位不变或更大（必然）</li><li>当前游标在对应更大的 masked位数时，只会比下一个游标更小（注意逆迭代）</li></ul><p>假设当前游标到了槽位 2（即 10）</p><p>可以发现后面的 4、5、6、7 槽位按照逆二进制迭代的规则，都要大于槽位2，也就是在后续遍历过程中不会遗漏数据</p><h3 id="扩容中">扩容中</h3><p>Redis 使用渐进式 Hash，旧的哈希表依然是 4 槽位，新的哈希表是 8槽位</p><p>那么根据扩容完成的情况</p><p>假设扫描槽位 2 时，需要同时扫描旧表中的 2 槽位和新表中的 2 和 6槽位来避免数据遗漏</p><h3 id="缩容">缩容</h3><p>Redis 中的哈希结构还会自动进行缩容（负载因子小于 0.1）</p><p>（这里没看懂，但是看 issue 上的讨论，是可以避免缩容问题的）</p><p>看了参考的博客，看起来是在代码层面进行了重复的扫描来进行避免</p><h1 id="卡马克快速逆平方根">卡马克快速逆平方根</h1><p>这个逆二进制迭代算法就和卡马克快速逆平方根一样</p><blockquote><p>求逆平方根的算法来自《雷神之锤3》的作者卡马克，该算法并不复杂，其核心就是用牛顿迭代法来不断逼近，但卡马克真正厉害的地方，在于他选择了一个十分神秘的常数：0x5f3759df来计算猜测值，第一次牛顿迭代算出的值已经非常接近，这样仅需两次牛顿迭代就可达到所需精度</p><p>普渡大学的数学家 Chris Lomont看了以后觉得有趣，决定要研究卡马克弄出来的这个猜测值有什么奥秘</p><p>Lomont在精心研究之后从理论上也推导出一个最佳猜测值：0x5f37642f，和卡马克的数字非常接近</p><p>传奇并没有在这里结束</p><p>Lomont计算出结果以后非常满意，于是拿自己计算出的起始值和卡马克的神秘数字做比较，看哪个数字能够更快更精确的求得逆平方根，结果是卡马克赢了...谁也不知道卡马克是怎么找到这个数字的</p><p>最后 Lomont采用暴力方法一个数字一个数字试过来，终于找到一个比卡马克数字要好上那么一丁点的数字，虽然实际上这两个数字所产生的结果非常近似，这个暴力得出的数字是：0x5f375a86</p><p>Lomont 为此写下一篇论文，<em>Fast Inverse Square Root</em></p></blockquote><p>作者并没有数学上验证其准确性，只是通过一些测试用例测试没有问题</p><blockquote><p>Those guarantees are correct. Although I don't have a formal prooffor these guarantees, I'm reasonably confident they hold. I workedthrough every hash table state (stable, grow, shrink) and it appears towork everywhere by means of the reverse binary iteration (for lack of abetter word).</p></blockquote><h1 id="参考">参考</h1><p><a href="https://redis.io/commands/scan/">SCAN | Redis</a></p><p><a href="https://www.lixueduan.com/posts/redis/redis-scan/">RedisScan 原理解析与踩坑 - (lixueduan.com)</a></p><p><a href="https://github.com/redis/redis/pull/579">Add SCAN command bypietern · Pull Request #579 · redis/redis (github.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/DB/">DB</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/DB/Redis/">Redis</category>
      
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/DB/Redis/Redis%20SCAN%20%E5%8E%9F%E7%90%86.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 并发与异步</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%BC%82%E6%AD%A5.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%BC%82%E6%AD%A5.html</guid>
      <pubDate>Sun, 04 Feb 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;多进程&quot;&gt;多进程&lt;/h1&gt;
&lt;h2 id=&quot;fork&quot;&gt;fork&lt;/h2&gt;
&lt;p&gt;Unix/Linux 操作系统提供了一个 &lt;code&gt;fork&lt;/code&gt;
系统调用，它非常特殊，因为普通的函数调用，调用一次就返回一次，但是
&lt;code&gt;fork&lt;/code&gt; 调用一次，返回两次&lt;/p&gt;
&lt;p&gt;因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后分别在父进程和子进程内返回，子进程永远返回
&lt;code&gt;0&lt;/code&gt;，而父进程返回子进程的 ID&lt;/p&gt;
&lt;p&gt;这样做的理由是，一个父进程可以 fork
出很多子进程，所以，父进程要记下每个子进程的 ID，而子进程只需要调用
&lt;code&gt;getppid&lt;/code&gt; 就可以拿到父进程的 ID&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="多进程">多进程</h1><h2 id="fork">fork</h2><p>Unix/Linux 操作系统提供了一个 <code>fork</code>系统调用，它非常特殊，因为普通的函数调用，调用一次就返回一次，但是<code>fork</code> 调用一次，返回两次</p><p>因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后分别在父进程和子进程内返回，子进程永远返回<code>0</code>，而父进程返回子进程的 ID</p><p>这样做的理由是，一个父进程可以 fork出很多子进程，所以，父进程要记下每个子进程的 ID，而子进程只需要调用<code>getppid</code> 就可以拿到父进程的 ID</p><p>Python 的 <code>os</code> 模块封装了常见的系统调用，其中就包括<code>fork</code>，所以可以在 Python 程序中轻松创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Process (%s) start...&#x27;</span> % os.getpid()) </span><br><span class="line"><span class="comment"># Only works on Unix/Linux/Mac: </span></span><br><span class="line">pid = os.fork() </span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I am child process (%s) and my parent is %s.&#x27;</span> % (os.getpid(), os.getppid())) </span><br><span class="line"><span class="keyword">else</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;I (%s) just created a child process (%s).&#x27;</span> % (os.getpid(), pid))</span><br></pre></td></tr></table></figure><p>由于 Windows 没有 <code>fork</code> 调用，上面的代码在 Windows上无法运行；而 Mac 系统是基于 BSD（Unix的一种）内核，所以，在 Mac下运行是没有问题的</p><h2 id="multiprocessing">multiprocessing</h2><p>由于 Python是跨平台的，自然也应该提供一个跨平台的多进程支持；<code>multiprocessing</code>模块就是跨平台版本的多进程模块</p><p><code>multiprocessing</code> 模块提供了一个 Process类来代表一个进程对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 子进程要执行的代码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Run child process %s (%s)...&#x27;</span> % (name, os.getpid()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Child process will start.&#x27;</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Child process end.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Parent <span class="built_in">process</span> <span class="number">588.</span></span><br><span class="line">Child <span class="built_in">process</span> will <span class="built_in">start</span>.</span><br><span class="line">Run child <span class="built_in">process</span> test (<span class="number">19096</span>)...</span><br><span class="line">Child <span class="built_in">process</span> <span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>创建子进程时，只需要传入一个执行函数和函数的参数，创建一个<code>Process</code> 实例，用 <code>start</code>方法启动，这样创建进程比 <code>fork</code> 还要简单</p><p><code>join</code>方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</p><h2 id="pool">Pool</h2><p>如果要启动大量的子进程，可以用进程池的方式批量创建子进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_time_task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Run task %s (%s)...&#x27;</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Task %s runs %0.2f seconds.&#x27;</span> % (name, (end - start)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Parent process %s.&#x27;</span> % os.getpid())</span><br><span class="line">    p = Pool()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Waiting for all subprocesses done...&#x27;</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;All subprocesses done.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Parent</span> process <span class="number">37332</span>.</span><br><span class="line"><span class="attribute">Waiting</span> for <span class="literal">all</span> subprocesses done...</span><br><span class="line"><span class="attribute">Run</span> task <span class="number">0</span> (<span class="number">21488</span>)...</span><br><span class="line"><span class="attribute">Run</span> task <span class="number">1</span> (<span class="number">35776</span>)...</span><br><span class="line"><span class="attribute">Run</span> task <span class="number">2</span> (<span class="number">19912</span>)...</span><br><span class="line"><span class="attribute">Run</span> task <span class="number">3</span> (<span class="number">18472</span>)...</span><br><span class="line"><span class="attribute">Task</span> <span class="number">0</span> runs <span class="number">0</span>.<span class="number">37</span> seconds.</span><br><span class="line"><span class="attribute">Run</span> task <span class="number">4</span> (<span class="number">21488</span>)...</span><br><span class="line"><span class="attribute">Task</span> <span class="number">2</span> runs <span class="number">0</span>.<span class="number">94</span> seconds.</span><br><span class="line"><span class="attribute">Task</span> <span class="number">1</span> runs <span class="number">1</span>.<span class="number">30</span> seconds.</span><br><span class="line"><span class="attribute">Task</span> <span class="number">4</span> runs <span class="number">0</span>.<span class="number">95</span> seconds.</span><br><span class="line"><span class="attribute">Task</span> <span class="number">3</span> runs <span class="number">2</span>.<span class="number">75</span> seconds.</span><br><span class="line"><span class="attribute">All</span> subprocesses done.</span><br></pre></td></tr></table></figure><p>对 <code>Pool</code> 对象调用 <code>join</code>方法会等待所有子进程执行完毕，调用 <code>join</code> 之前必须先调用<code>close</code>，调用 <code>close</code> 之后就不能继续添加新的<code>Process</code> 了</p><p><code>Pool</code> 默认进程数是 CPU 核数，也可以入参<code>processes</code> 进行设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> processes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    processes = os.cpu_count() <span class="keyword">or</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> processes &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Number of processes must be at least 1&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> maxtasksperchild <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(maxtasksperchild, <span class="built_in">int</span>) <span class="keyword">or</span> maxtasksperchild &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;maxtasksperchild must be a positive int or None&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="控制子进程">控制子进程</h2><p>创建了子进程后，有时还需要控制子进程的输入和输出</p><p><code>subprocess</code>模块可以让我们非常方便地启动一个子进程，然后控制其输入和输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;$ nslookup www.python.org&#x27;</span>)</span><br><span class="line">r = subprocess.call([<span class="string">&#x27;nslookup&#x27;</span>, <span class="string">&#x27;www.python.org&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Exit code:&#x27;</span>, r)</span><br></pre></td></tr></table></figure><p><code>call</code> 方法用运行带有参数的命令</p><p>如果子进程还需要输入，则可以通过 <code>communicate</code>方法输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;$ nslookup&#x27;</span>)</span><br><span class="line">p = subprocess.Popen([<span class="string">&#x27;nslookup&#x27;</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">output, err = p.communicate(<span class="string">b&#x27;set q=mx\npython.org\nexit\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(output.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Exit code:&#x27;</span>, p.returncode)</span><br></pre></td></tr></table></figure><p>上面的代码相当于在命令行执行命令<code>nslookup</code>，然后手动输入如下参数和命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> q=mx</span><br><span class="line">python.org</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="进程间通信">进程间通信</h2><p><code>Process</code>之间是需要通信的，操作系统提供了很多机制来实现进程间的通信</p><p>Python 的 <code>multiprocessing</code> 模块包装了底层的机制，提供了<code>Queue</code>、<code>Pipes</code> 等多种方式来交换数据</p><p>以 <code>Queue</code> 为例，在父进程中创建两个子进程，一个向<code>Queue</code> 里写数据，一个从 <code>Queue</code> 里读数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to write: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Put %s to queue...&#x27;</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Process to read: %s&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        value = q.get(<span class="literal">True</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Get %s from queue.&#x27;</span> % value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Process <span class="keyword">to</span> write: <span class="number">26020</span></span><br><span class="line">Put A <span class="keyword">to</span> <span class="keyword">queue</span>...</span><br><span class="line">Process <span class="keyword">to</span> read: <span class="number">916</span></span><br><span class="line">Get A <span class="keyword">from</span> <span class="keyword">queue</span>.</span><br><span class="line">Put B <span class="keyword">to</span> <span class="keyword">queue</span>...</span><br><span class="line">Get B <span class="keyword">from</span> <span class="keyword">queue</span>.</span><br><span class="line">Put C <span class="keyword">to</span> <span class="keyword">queue</span>...</span><br><span class="line">Get C <span class="keyword">from</span> <span class="keyword">queue</span>.</span><br><span class="line">Process Process-<span class="number">2</span>:</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># 这里会报错，因为 q.get(True, 1) 设置了超时时间</span></span><br></pre></td></tr></table></figure><h1 id="多线程">多线程</h1><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成</p><p>由于线程是操作系统直接支持的执行单元，因此高级语言通常都内置多线程的支持，Python也不例外，并且 Python 的线程是真正的 PosixThread，而不是模拟出来的线程</p><p>Python 的标准库提供了两个模块：<code>_thread</code>和<code>threading</code>，<code>_thread</code>是低级模块，<code>threading</code> 是高级模块，对 <code>_thread</code>进行了封装</p><p>绝大多数情况下，我们只需要使用 <code>threading</code>这个高级模块</p><h2 id="thread">Thread</h2><p>启动一个线程就是把一个函数传入并创建 <code>Thread</code>实例，然后调用 <code>start</code> 开始执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新线程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;thread %s &gt;&gt;&gt; %s&#x27;</span> % (threading.current_thread().name, n))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;thread %s is running...&#x27;</span> % threading.current_thread().name)</span><br><span class="line">t = threading.Thread(target=loop, name=<span class="string">&#x27;LoopThread&#x27;</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;thread %s ended.&#x27;</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread MainThread is running...</span><br><span class="line">thread LoopThread is running...</span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">3</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line">thread LoopThread &gt;&gt;&gt; <span class="number">5</span></span><br><span class="line">thread LoopThread ended.</span><br><span class="line">thread MainThread ended.</span><br></pre></td></tr></table></figure><p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的 <code>threading</code> 模块有个 <code>current_thread()</code>函数，它永远返回当前线程的实例</p><p>主线程实例的名字叫<code>MainThread</code>，子线程的名字在创建时指定，我们用<code>LoopThread</code>命名子线程，名字仅仅在打印时用来显示，没有其他作用</p><h2 id="lock">Lock</h2><p>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响</p><p>而多线程中，所有变量都由所有线程共享（线程中数据共享）</p><p>所以在并发情况下，会出现并发安全问题导致数据错乱</p><p>下面举一个错乱的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">total_count = <span class="number">100000000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>():</span><br><span class="line">    <span class="keyword">global</span> total_count</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> total_count &gt; <span class="number">0</span>:</span><br><span class="line">            total_count -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1024</span>):</span><br><span class="line">    threads.append(threading.Thread(target=buy()))</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">    t.start()</span><br><span class="line">    t.join()</span><br><span class="line"><span class="built_in">print</span>(total_count)</span><br></pre></td></tr></table></figure><p>事实上因为运算太快，貌似很难复现并发问题，但是不代表不存在</p><p>想要保证原子性，就要上锁，创建一个锁就是通过<code>threading.Lock</code> 来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># threading.Lock 创建锁</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buy</span>():</span><br><span class="line">    <span class="keyword">global</span> total_count</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 上锁</span></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> total_count &gt; <span class="number">0</span>:</span><br><span class="line">                total_count -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 释放</span></span><br><span class="line">            lock.release()</span><br></pre></td></tr></table></figure><h2 id="多核-cpu">多核 CPU</h2><p>如果有两个死循环线程，在多核 CPU 中，可以监控到会占用 200%的CPU，也就是占用两个 CPU 核心</p><p>试试用 Python 写个死循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading, multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loop</span>():</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = x ^ <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(multiprocessing.cpu_count()):</span><br><span class="line">    t = threading.Thread(target=loop)</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><p>但事实上 Python 上的死循环跑不满所有的 CPU</p><p>因为 Python 的线程虽然是真正的线程，但解释器执行代码时，有一个 GIL 锁<strong>Global Interpreter Lock</strong>，任何 Python线程执行前，必须先获得 GIL 锁，然后，每执行 100条字节码，解释器就自动释放 GIL 锁，让别的线程有机会执行</p><p>这个 GIL 全局锁实际上把所有线程的执行代码都给上了锁，所以多线程在Python 中只能交替执行，即使 100 个线程跑在 100 核 CPU 上，也只能用到 1个核</p><p>GIL 是 Python解释器设计的历史遗留问题，通常我们用的解释器是官方实现的CPython，要真正利用多核，除非重写一个不带 GIL 的解释器</p><p>不过也不用过于担心，Python虽然不能利用多线程实现多核任务，但可以通过多进程实现多核任务，因为多个Python 进程有各自独立的 GIL 锁，互不影响</p><h2 id="threadlocal">ThreadLocal</h2><p>Java 中也有 ThreadLocal 机制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建全局 ThreadLocal 对象</span></span><br><span class="line">local_school = threading.local()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_student</span>():</span><br><span class="line">    <span class="comment"># 获取当前线程关联的 student</span></span><br><span class="line">    std = local_school.student</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s (in %s)&#x27;</span> % (std, threading.current_thread().name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_thread</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 绑定 ThreadLocal 的 student</span></span><br><span class="line">    local_school.student = name</span><br><span class="line">    process_student()</span><br><span class="line"></span><br><span class="line">t1 = threading.Thread(target= process_thread, args=(<span class="string">&#x27;Alice&#x27;</span>,), name=<span class="string">&#x27;Thread-A&#x27;</span>)</span><br><span class="line">t2 = threading.Thread(target= process_thread, args=(<span class="string">&#x27;Bob&#x27;</span>,), name=<span class="string">&#x27;Thread-B&#x27;</span>)</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> Alice (in <span class="keyword">Thread</span>-A)</span><br><span class="line"><span class="built_in">Hello,</span> Bob (in <span class="keyword">Thread</span>-B)</span><br></pre></td></tr></table></figure><p>全局变量 <code>local_school</code> 就是一个 <code>ThreadLocal</code>对象，每个 <code>Thread</code> 对它都可以读写 <code>student</code>属性，但互不影响</p><p>但每个属性如 <code>local_school.student</code>都是线程的局部变量，可以任意读写而互不干扰，也不用管理锁的问题，<code>ThreadLocal</code>内部会自动处理</p><h2 id="分布式进程">分布式进程</h2><p>Python <code>multiprocessing</code>模块中的 <code>managers</code>子模块还支持把多进程分布到多台机器上</p><p>由于 <code>managers</code>模块封装很好，不必了解网络通信的细节，就可以很容易地编写分布式多进程程序</p><p>通过 <code>managers</code> 模块把 <code>Queue</code>通过网络暴露出去，就可以让其他机器的进程访问 <code>Queue</code> 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># task_worker.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, sys, queue</span><br><span class="line"><span class="keyword">from</span> multiprocessing.managers <span class="keyword">import</span> BaseManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类似的 QueueManager</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueManager</span>(<span class="title class_ inherited__">BaseManager</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于这个 QueueManager 只从网络上获取 Queue，所以注册时只提供名字</span></span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_task_queue&#x27;</span>)</span><br><span class="line">QueueManager.register(<span class="string">&#x27;get_result_queue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到服务器，也就是运行 task_master.py 的机器</span></span><br><span class="line">server_addr = <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Connect to server %s...&#x27;</span> % server_addr)</span><br><span class="line"><span class="comment"># 端口和验证码注意保持与 task_master.py 设置的完全一致</span></span><br><span class="line">m = QueueManager(address=(server_addr, <span class="number">5000</span>), authkey=<span class="string">b&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment"># 从网络连接</span></span><br><span class="line">m.connect()</span><br><span class="line"><span class="comment"># 获取 Queue 的对象</span></span><br><span class="line">task = m.get_task_queue()</span><br><span class="line">result = m.get_result_queue()</span><br><span class="line"><span class="comment"># 从 task 队列取任务,并把结果写入result队列</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        n = task.get(timeout=<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;run task %d * %d...&#x27;</span> % (n, n))</span><br><span class="line">        r = <span class="string">&#x27;%d * %d = %d&#x27;</span> % (n, n, n*n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        result.put(r)</span><br><span class="line">    <span class="keyword">except</span> Queue.Empty:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;task queue is empty.&#x27;</span>)</span><br><span class="line"><span class="comment"># 处理结束:</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;worker exit.&#x27;</span>)</span><br></pre></td></tr></table></figure><p>任务进程要通过网络连接到服务进程，所以要指定服务进程的 IP</p><ol type="1"><li><p>先启动 <code>task_master.py</code> 服务进程</p></li><li><p><code>task_master.py</code> 进程发送完任务后，开始等待<code>result</code> 队列的结果，现在启动 <code>task_worker.py</code>进程</p></li><li><p><code>task_worker.py</code> 进程结束，在<code>task_master.py</code> 进程中会继续打印出结果</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Result</span>: <span class="number">3411</span> * <span class="number">3411</span> = <span class="number">11634921</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">1605</span> * <span class="number">1605</span> = <span class="number">2576025</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">1398</span> * <span class="number">1398</span> = <span class="number">1954404</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">4729</span> * <span class="number">4729</span> = <span class="number">22363441</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">5300</span> * <span class="number">5300</span> = <span class="number">28090000</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">7471</span> * <span class="number">7471</span> = <span class="number">55815841</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">68</span> * <span class="number">68</span> = <span class="number">4624</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">4219</span> * <span class="number">4219</span> = <span class="number">17799961</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">339</span> * <span class="number">339</span> = <span class="number">114921</span></span><br><span class="line"><span class="attribute">Result</span>: <span class="number">7866</span> * <span class="number">7866</span> = <span class="number">61873956</span></span><br></pre></td></tr></table></figure><p><code>Queue</code> 对象存储在 <code>task_master</code>上，只是通过网络共享了出去（类似 RPC，对上层面屏蔽网络实现）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">                                             │</span><br><span class="line">┌─────────────────────────────────────────┐     ┌──────────────────────────────────────┐</span><br><span class="line">│task_master.py                           │  │  │task_worker.py                        │</span><br><span class="line">│                                         │     │                                      │</span><br><span class="line">│  task = manager.get_task_queue()        │  │  │  task = manager.get_task_queue()     │</span><br><span class="line">│  result = manager.get_result_queue()    │     │  result = manager.get_result_queue() │</span><br><span class="line">│              │                          │  │  │              │                       │</span><br><span class="line">│              │                          │     │              │                       │</span><br><span class="line">│              ▼                          │  │  │              │                       │</span><br><span class="line">│  ┌─────────────────────────────────┐    │     │              │                       │</span><br><span class="line">│  │QueueManager                     │    │  │  │              │                       │</span><br><span class="line">│  │ ┌────────────┐ ┌──────────────┐ │    │     │              │                       │</span><br><span class="line">│  │ │ task_queue │ │ result_queue │ │&lt;───┼──┼──┼──────────────┘                       │</span><br><span class="line">│  │ └────────────┘ └──────────────┘ │    │     │                                      │</span><br><span class="line">│  └─────────────────────────────────┘    │  │  │                                      │</span><br><span class="line">└─────────────────────────────────────────┘     └──────────────────────────────────────┘</span><br><span class="line">                                             │</span><br><span class="line"></span><br><span class="line">                                          Network</span><br></pre></td></tr></table></figure><p>注意 <code>Queue</code>的作用是用来传递任务和接收结果，每个任务的描述数据量要尽量小；比如发送一个处理日志文件的任务，就不要发送几百兆的日志文件本身，而是发送日志文件存放的完整路径，由Worker 进程再去共享的磁盘上读取文件</p><h1 id="协程">协程</h1><p>协程，英文名 Coroutine</p><p>子程序，或者称为函数，在所有语言中都是层级调用，比如 A 调用 B，B在执行过程中又调用了 C，C 执行完毕返回，B 执行完毕返回，最后是 A执行完毕（函数栈）</p><p>而协程的调用和子程序不同，协程看上去也是子程序，但执行过程中，在子程序内部可中断，然后转而执行别的子程序，在适当的时候再返回来接着执行</p><p>注意在一个子程序中中断后去执行其他子程序，不是函数调用，有点类似 CPU的中断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">B</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;z&#x27;</span>)</span><br></pre></td></tr></table></figure><p>假设由协程执行，在执行 A 的过程中，可以随时中断，去执行 B，B也可能在执行过程中中断再去执行 A，结果可能是</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">x</span></span><br><span class="line">y</span><br><span class="line"><span class="number">3</span></span><br><span class="line">z</span><br></pre></td></tr></table></figure><p>但是在 A 中是没有调用 B的，所以协程的调用比函数调用理解起来要难一些</p><p>那么协程和多线程有哪些区别？</p><ul><li><p>优势</p><ul><li><p><strong>执行效率高</strong>：子程序切换不是线程切换，协程属于程序级别，调度开支小</p></li><li><p><strong>不需要多线程的锁机制</strong>：无需同步互斥操作</p></li><li><p><strong>并发高</strong>：没有 C10K 问题，IO 并发性好</p></li></ul></li><li><p>缺点</p><ul><li><strong>多核 CPU</strong>：协程的本质是个单线程，不能很好地利用 CPU的多个核心；协程需要和进程配合才能运行在多 CPU 上</li><li><strong>受线程影响</strong>：进行阻塞（Blocking）操作时会阻塞掉整个程序</li></ul></li></ul><p>利用多核 CPU，最简单的方法是多进程 +协程，既充分利用多核，又充分发挥协程的高效率</p><p>Python 对协程的支持是通过 generator 实现的，<code>yield</code>不但可以返回一个值，它还可以接收调用者发出的参数，同过 <code>next</code>启动生成器，并在后续逻辑中调用 <code>send</code> 函数传递值</p><p>下面是一个经典的生产者消费者协程示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    r = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="keyword">yield</span> r</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[CONSUMER] Consuming %s...&#x27;</span> % n)</span><br><span class="line">        r = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">produce</span>(<span class="params">c</span>):</span><br><span class="line">    <span class="built_in">next</span>(c)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Producing %s...&#x27;</span> % n)</span><br><span class="line">        r = c.send(n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[PRODUCER] Consumer return: %s&#x27;</span> % r)</span><br><span class="line">    c.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = consumer()</span><br><span class="line">produce(c)</span><br></pre></td></tr></table></figure><p>整个流程无锁，由一个线程执行，<code>produce</code> 和<code>consumer</code>协作完成任务，所以称为协程，而非线程的抢占式多任务</p><p>同样举一个多协程的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">average</span>():</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    value = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        term = <span class="keyword">yield</span> value</span><br><span class="line">        total += term</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        value = total / count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    c = average()</span><br><span class="line">    <span class="built_in">next</span>(c)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;录入数字 <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">        avg = c.send(i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;已录入数字的平均值为 <span class="subst">&#123;avg&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;其他操作&quot;</span>)</span><br><span class="line">    i = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;录入数字 <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">    avg = c.send(i)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;已录入数字的平均值为 <span class="subst">&#123;avg&#125;</span>&#x27;</span>)</span><br><span class="line">    c.close()</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">录入数字 0</span><br><span class="line">已录入数字的平均值为 0.0</span><br><span class="line">录入数字 1</span><br><span class="line">已录入数字的平均值为 0.5</span><br><span class="line">录入数字 2</span><br><span class="line">已录入数字的平均值为 1.0</span><br><span class="line">其他操作</span><br><span class="line">录入数字 10</span><br><span class="line">已录入数字的平均值为 3.25</span><br></pre></td></tr></table></figure><p>协程函数中的无限循环表明，只要调用方不断把值发给这个协程，它就会一直接收值，然后计算已录入的所有数字的平均值</p><p>可以看出和函数的区别在于，协程像是一个其他调用分支，将当前执行的数据现场保存了起来，如果这个操作使用函数调用来实现，需要对象来对历史数据进行存储（从这个角度来看，协程就保存现场的对象？）</p><h1 id="参考">参考</h1><p><ahref="https://www.liaoxuefeng.com/wiki/1016959663602400/1017627212385376">进程和线程- 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/667442795">「基础篇」Python协程（一） - 知乎 (zhihu.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/Python/">Python</category>
      
      
      <category domain="https://www.kugaaa.com/tags/Python/">Python</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E5%B9%B6%E5%8F%91%E4%B8%8E%E5%BC%82%E6%AD%A5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 进阶语法</title>
      <link>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95.html</link>
      <guid>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95.html</guid>
      <pubDate>Tue, 30 Jan 2024 16:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;因为 Python
并非是工作内容需要使用的语言，所以对语法并没有系统地学习过，加上也不会使用
Python
编写什么复杂的逻辑，所以一直以来都是使用过程中遇到需要的逻辑语法就查一下&lt;/p&gt;
&lt;p&gt;在学习 LangChain 的过程中，发现 Python
的语法糖很多，很多设计思想提供了语法层面的支持，使得阅读源码挺费劲的&lt;/p&gt;
&lt;p&gt;所以在这里还是系统地了解下 Python 都提供了哪些语法，也了解下 Python
编写代码的主要思想&lt;/p&gt;
&lt;p&gt;这里主要是整理下 Python 中比较特殊的、和 Java 有较大区别的操作&lt;/p&gt;
&lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>因为 Python并非是工作内容需要使用的语言，所以对语法并没有系统地学习过，加上也不会使用Python编写什么复杂的逻辑，所以一直以来都是使用过程中遇到需要的逻辑语法就查一下</p><p>在学习 LangChain 的过程中，发现 Python的语法糖很多，很多设计思想提供了语法层面的支持，使得阅读源码挺费劲的</p><p>所以在这里还是系统地了解下 Python 都提供了哪些语法，也了解下 Python编写代码的主要思想</p><p>这里主要是整理下 Python 中比较特殊的、和 Java 有较大区别的操作</p><h1 id="函数">函数</h1><h2 id="多返回值">多返回值</h2><p>Python 允许函数返回多个值，并且调用时使用多个变量承接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line">a, b, c = build()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(b) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><p>实际上真正的返回值是一个 Tuple 对象，Python帮忙做了解压（unpack）操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line">t = build()</span><br><span class="line"><span class="built_in">print</span>(t) <span class="comment"># (1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(t.__class__) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="默认参数">默认参数</h2><p>设置参数的默认值，默认参数可以简化函数的调用</p><p>需要注意：</p><ul><li>必选参数在前，默认参数在后</li><li>实践中一般将变化大的参数放在前面，变化小的参数放在后面（简单理解，就是因为变化小才需要默认）</li><li>当不按顺序提供部分默认参数时，需要把参数名写上；如<code>default_params('李四', city='上海')</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default_params</span>(<span class="params">name, age=<span class="number">20</span>, city=<span class="string">&#x27;北京&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="built_in">print</span>(age)</span><br><span class="line">    <span class="built_in">print</span>(city)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">default_params(<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line">default_params(<span class="string">&#x27;李四&#x27;</span>, city=<span class="string">&#x27;上海&#x27;</span>)</span><br><span class="line">default_params(<span class="string">&#x27;王五&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;上海&#x27;</span>)</span><br></pre></td></tr></table></figure><p>默认参数有一个需要注意的坑：<strong>默认参数必须指向不变对象</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default_params</span>(<span class="params">L=[]</span>):</span><br><span class="line">    L.append(<span class="string">&quot;END&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">default_params([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># [1, 2, 3, &#x27;END&#x27;]</span></span><br><span class="line">default_params() <span class="comment"># [&#x27;END&#x27;]</span></span><br><span class="line">default_params() <span class="comment"># [&#x27;END&#x27;, &#x27;END&#x27;]</span></span><br></pre></td></tr></table></figure><p>原因是 Python 函数在定义的时候，默认参数 <code>L</code>的值就被计算出来了，即 <code>[]</code>，因为默认参数 <code>L</code>也是一个变量，它指向对象 <code>[]</code>，每次调用该函数都在改变<code>L</code> 变量的值</p><p>实际上 PyCharm IDE 也会出现警告<code>Default argument value is mutable</code></p><p>可以使用 <code>None</code> 来解决上述问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default_params</span>(<span class="params">L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&quot;END&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(L)</span><br></pre></td></tr></table></figure><h2 id="可变参数">可变参数</h2><p>可变参数指传入的参数个数是可变的，例如 0 个、1 个、2 个...</p><p>定义可变参数和定义一个 list 或 tuple参数相比，只需要在参数前面加了一个 <code>*</code>号，在函数内部实现逻辑可以完全不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">*nums</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="built_in">sum</span> += n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>如果我们已经有了一个 list 或tuple，则无法直接作为参数传入该方法，也可以使用 <code>*</code>号将其转换为可变参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">*nums</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">        <span class="built_in">sum</span> += n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(nums)) <span class="comment"># 报错；TypeError: unsupported operand type(s) for +=: &#x27;int&#x27; and &#x27;list&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(*nums)) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h2 id="关键字参数">关键字参数</h2><p>可变参数允许传入 0个或任意个参数，这些可变参数在函数调用时自动组装为一个 tuple</p><p>关键字参数允许传入 0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict</p><p>使用 <code>**</code> 表示希望接收的是个关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_student</span>(<span class="params">name, age, **other</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, other)</span><br><span class="line"></span><br><span class="line">build_student(name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">20</span>, city=<span class="string">&#x27;北京&#x27;</span>, birthday=<span class="string">&#x27;2004-01-01&#x27;</span>)</span><br><span class="line"><span class="comment"># name: 张三 age: 20 other: &#123;&#x27;city&#x27;: &#x27;北京&#x27;, &#x27;birthday&#x27;: &#x27;2004-01-01&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>和可变参数类似，也可以先组装出一个 dict，然后，把该 dict转换为关键字参数传入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_student</span>(<span class="params">name, age, **other</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;other:&#x27;</span>, other)</span><br><span class="line"></span><br><span class="line">student = &#123;name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">20</span>, city=<span class="string">&#x27;北京&#x27;</span>, birthday=<span class="string">&#x27;2004-01-01&#x27;</span>&#125;</span><br><span class="line">build_student(**student)</span><br></pre></td></tr></table></figure><p>对于关键字参数，函数的调用方可以传入任意不受限制的关键字参数，对于参数值可以在函数内进行参数校验</p><p>对于参数名字的限制可以通过命名关键字参数来进行限制，通过<code>*</code> 号分隔位置参数和关键字参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_student</span>(<span class="params">name, age, *, city</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;city:&#x27;</span>, city)</span><br><span class="line"></span><br><span class="line">build_student(name=<span class="string">&#x27;张三&#x27;</span>, age=<span class="number">20</span>, city=<span class="string">&#x27;北京&#x27;</span>, birthday=<span class="string">&#x27;2004-01-01&#x27;</span>)</span><br><span class="line"><span class="comment"># 报错 TypeError: build_student() got an unexpected keyword argument &#x27;birthday&#x27;</span></span><br></pre></td></tr></table></figure><p>命名关键字参数也可以有默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">build_student</span>(<span class="params">name, age=<span class="number">20</span>, *, city=<span class="string">&#x27;北京&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name, <span class="string">&#x27;age:&#x27;</span>, age, <span class="string">&#x27;city:&#x27;</span>, city)</span><br><span class="line"></span><br><span class="line">build_student(name=<span class="string">&#x27;张三&#x27;</span>)</span><br><span class="line"><span class="comment"># name: 张三 age: 20 city: 北京</span></span><br></pre></td></tr></table></figure><p>使用命名关键字参数时需要注意，如果没有可变参数就必须加一个<code>*</code> 作为特殊分隔符，因为如果缺少 <code>*</code>，Python解释器将无法识别位置参数和命名关键字参数</p><h2 id="组合参数">组合参数</h2><p>在 Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5 种参数都可以组合使用</p><p>但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</p><p>比如定义一个函数，包含上述若干种参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">a, b, c=<span class="number">0</span>, *args, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;args =&#x27;</span>, args, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f2</span>(<span class="params">a, b, c=<span class="number">0</span>, *, d, **kw</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a =&#x27;</span>, a, <span class="string">&#x27;b =&#x27;</span>, b, <span class="string">&#x27;c =&#x27;</span>, c, <span class="string">&#x27;d =&#x27;</span>, d, <span class="string">&#x27;kw =&#x27;</span>, kw)</span><br></pre></td></tr></table></figure><p>最神奇的是通过一个 tuple 和 dict 也可以调用上述函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kw = &#123;<span class="string">&#x27;d&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;#&#x27;</span>&#125;</span><br><span class="line">f1(*args, **kw)</span><br><span class="line"><span class="comment"># a = 1 b = 2 c = 3 args = (4,) kw = &#123;&#x27;d&#x27;: 99, &#x27;x&#x27;: &#x27;#&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>即对于任意函数，都可以通过类似 <code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的</p><h1 id="集合特性">集合特性</h1><h2 id="切片">切片</h2><p><code>l[0:3]</code> 表示，从索引 0 开始取，直到索引 3为止，但不包括索引 3（左闭右开，基本上所有的集合 API 都是这种设计）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果第一个索引是 0，还可以省略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(l[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>-1 表示取倒数第一个元素，即同样支持倒数切片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(l[-<span class="number">3</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># [2, 3]</span></span><br></pre></td></tr></table></figure><p>前 10 个数，每 2 个取一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[:<span class="number">10</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><p>所有数每 3 个取一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[::<span class="number">3</span>])</span><br><span class="line"><span class="comment"># [1, 4, 7, 10, 13]</span></span><br></pre></td></tr></table></figure><p>甚至什么都不写，只写 <code>[:]</code> 就可以原样复制一个 list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l[:])</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>tuple 也是一种 list，唯一区别是 tuple 不可变，因此 tuple也可以用切片操作，操作的结果仍是 tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t[:<span class="number">3</span>])</span><br><span class="line"><span class="comment"># (1, 2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(t[:<span class="number">3</span>].__class__)</span><br><span class="line"><span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>字符串也可以看成是一种list，每个元素就是一个字符；因此字符串也可以用切片操作，操作结果仍是字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>:])</span><br><span class="line"><span class="comment"># World!</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">6</span>:].__class__)</span><br><span class="line"><span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="迭代">迭代</h2><p>只要是可迭代对象，无论有无下标，都可以迭代，比如 dict 就可以迭代</p><p>因为 dict 的存储不是按照 list的方式顺序排列，所以迭代出的结果顺序很可能不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;beijing&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># age</span></span><br><span class="line"><span class="comment"># city</span></span><br></pre></td></tr></table></figure><p>默认情况下，dict 迭代的是 key；如果要迭代 value，可以用<code>for value in d.values()</code>，如果要同时迭代 key 和value，可以用 <code>for k, v in d.items()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;beijing&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># (&#x27;name&#x27;, &#x27;zhangsan&#x27;)</span></span><br><span class="line"><span class="comment"># (&#x27;age&#x27;, 20)</span></span><br><span class="line"><span class="comment"># (&#x27;city&#x27;, &#x27;beijing&#x27;)</span></span><br></pre></td></tr></table></figure><p>如何判断一个对象是可迭代对象呢？方法是通过<code>collections.abc</code> 模块的 <code>Iterable</code> 类型判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;abc&#x27;</span>, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;<span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>: <span class="string">&#x27;c&#x27;</span>&#125;, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>, Iterable)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>如果要对 list 实现类似 Java 的下标循环，可以使用 Python 内置的<code>enumerate</code> 函数可以把一个 list 变成索引-元素对，这样就可以在for 循环中同时迭代索引和元素本身</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i, value)</span><br><span class="line"><span class="comment"># 0 A</span></span><br><span class="line"><span class="comment"># 1 B</span></span><br><span class="line"><span class="comment"># 2 C</span></span><br></pre></td></tr></table></figure><p>Python 中也可以同时引用多个变量进行 for 循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name, age <span class="keyword">in</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">20</span>), (<span class="string">&#x27;李四&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;王五&#x27;</span>, <span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(age, name)</span><br><span class="line"><span class="comment"># 20 张三</span></span><br><span class="line"><span class="comment"># 21 李四</span></span><br><span class="line"><span class="comment"># 20 王五</span></span><br></pre></td></tr></table></figure><h2 id="列表生成式">列表生成式</h2><p>列表生成式即 List Comprehensions，是 Python内置的非常简单却强大的可以用来创建 list 的生成式</p><p>如果要生成 <code>[1x1, 2x2, 3x3, ..., 10x10]</code> 的 list方法一是循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    l.append(x * x)</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>而列表生成式则可以用一行语句代替循环生成上面的 list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span></span><br></pre></td></tr></table></figure><p>还可以使用两层循环，可以生成全排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [m + n <span class="keyword">for</span> m <span class="keyword">in</span> [<span class="string">&#x27;草莓味&#x27;</span>, <span class="string">&#x27;柠檬味&#x27;</span>, <span class="string">&#x27;菠萝味&#x27;</span>] <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="string">&#x27;棒棒糖&#x27;</span>, <span class="string">&#x27;口香糖&#x27;</span>, <span class="string">&#x27;水果茶&#x27;</span>]]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [&#x27;草莓味棒棒糖&#x27;, &#x27;草莓味口香糖&#x27;, &#x27;草莓味水果茶&#x27;, &#x27;柠檬味棒棒糖&#x27;, &#x27;柠檬味口香糖&#x27;, &#x27;柠檬味水果茶&#x27;, &#x27;菠萝味棒棒糖&#x27;, &#x27;菠萝味口香糖&#x27;, &#x27;菠萝味水果茶&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>if ... else ...</strong></p><p>在生成式中，也可以使用 <code>if ... else</code></p><p>需要注意在一个列表生成式中，<code>for</code> 前面的<code>if ... else</code> 是表达式，而 <code>for</code> 后面的<code>if</code> 是过滤条件，不能带 <code>else</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 [0,10) 范围中取出 x % 2 == 0 的数字</span></span><br><span class="line">l = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果 x % 2 != 0，则取 &#x27;x&#x27;</span></span><br><span class="line">l = [x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br><span class="line"><span class="comment"># [0, &#x27;x&#x27;, 2, &#x27;x&#x27;, 4, &#x27;x&#x27;, 6, &#x27;x&#x27;, 8, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="生成器">生成器</h2><p>在 Python 中，一边循环一边计算的机制，称为生成器 Generator</p><p>第一种方法，只要把一个列表生成式的 <code>[]</code> 改成<code>()</code>，就创建了一个 generator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(l) <span class="comment"># &lt;generator object &lt;genexpr&gt; at 0x000002293F899630&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(l)) <span class="comment"># &lt;class &#x27;generator&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p>获取生成器元素时，可以使用<code>next</code>，也可以将其作为迭代器循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(l))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(l))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>同理也可以将迭代器输出为 list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(l.__iter__()))</span><br><span class="line"><span class="comment"># [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p>如果推算的算法比较复杂，用类似列表生成式的 <code>for</code>循环无法实现的时候，还可以用函数来实现</p><p>下面是一个斐波那契数列的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span>(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure><p>只需要把 <code>print(b)</code> 改为 <code>yield b</code>就修改为了生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(fib(<span class="number">10</span>).__iter__()))</span><br><span class="line"><span class="comment"># [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span></span><br></pre></td></tr></table></figure><p>需要注意：</p><ul><li>函数生成器遇到 <code>yield</code> 语句返回，再次执行时从上次返回的<code>yield</code> 语句处继续执行</li><li>没有 <code>yield</code> 执行时会报错 <code>StopIteration</code></li><li>调用 generator 函数会创建一个 generator 对象，多次调用 generator函数会创建多个相互独立的 generator</li></ul><p>此外，生成器函数中的 <code>return</code> 会被当做<code>StopIteration</code>异常抛出，如果想要获取返回值，需要解析异常；并且迭代器不会抛出异常，需要使用<code>next</code> 获取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">return_gen</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> return_gen():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------------&quot;</span>)</span><br><span class="line">rg = return_gen()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        i = <span class="built_in">next</span>(rg)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;return value:&#x27;</span> + <span class="built_in">str</span>(e.value))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> value:<span class="number">100</span></span><br></pre></td></tr></table></figure><h2 id="迭代器">迭代器</h2><p>前面已经了解到可以直接作用于 <code>for</code>循环的数据类型有以下几种</p><ul><li>集合数据类型，如 list、tuple、dict、set、str 等</li><li>生成器，包括生成器和带 yield 的生成器函数</li></ul><p>这些可以直接作用于 <code>for</code>循环的对象统称为<strong>可迭代对象</strong>：<code>Iterable</code></p><p>可以使用 <code>isinstance</code> 判断一个对象是否是<code>Iterable</code> 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([], Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;&#125;, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;a&#x27;</span>, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1</span>, Iterable)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>可以被 <code>next</code>函数调用并不断返回下一个值的对象称为<strong>迭代器</strong>：<code>Iterator</code></p><p>可以使用 <code>isinstance</code> 判断一个对象是否是<code>Iterator</code> 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>([], Iterator)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(&#123;&#125;, Iterator)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>((x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)), Iterator)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;a&#x27;</span>, Iterator)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">1</span>, Iterator)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>生成器都是 <code>Iterator</code> 对象，但 list、dict、str 虽然是<code>Iterable</code>，却不是 <code>Iterator</code></p><p>把 list、dict、str 等 <code>Iterable</code> 变成<code>Iterator</code> 可以使用 <code>iter</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">iter</span>([]), Iterator)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">iter</span>(&#123;&#125;), Iterator)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="built_in">iter</span>(<span class="string">&#x27;a&#x27;</span>), Iterator)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>为什么 list、dict、str 等数据类型不是 <code>Iterator</code>？</p><p>因为 Python 的 <code>Iterator</code>对象表示的是一个数据流，<code>Iterator</code> 对象可以被<code>next</code> 函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code> 错误</p><p>可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next</code> 函数实现按需计算下一个数据，所以 <code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算</p><h1 id="函数式编程">函数式编程</h1><h2 id="高阶函数">高阶函数</h2><p>一个函数接收另一个函数作为参数，这种函数就称之为高阶函数（Java 中的Function）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y, f</span>):</span><br><span class="line">    <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">3</span>, -<span class="number">5</span>, <span class="built_in">abs</span>))</span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure><p><strong>map</strong></p><p><code>map</code> 函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code> 返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o_list = [-<span class="number">1</span>, <span class="number">2</span>, -<span class="number">3</span>, -<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">n_list = <span class="built_in">map</span>(<span class="built_in">abs</span>, o_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(n_list))</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p><strong>reduce</strong></p><p><code>reduce</code> 把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果视为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">10</span> + y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(reduce(fn, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]))</span><br><span class="line"><span class="comment"># 13579</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DIGITS = &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;4&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;5&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;6&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;7&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;8&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;9&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char2num</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> DIGITS[s]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2int</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x * <span class="number">10</span> + y, <span class="built_in">map</span>(char2num, s))</span><br><span class="line"></span><br><span class="line">i = str2int(<span class="string">&quot;1234&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(i) <span class="comment"># 1234</span></span><br><span class="line"><span class="built_in">print</span>(i.__class__) <span class="comment"># &lt;class &#x27;int&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><strong>filter</strong></p><p><code>filter</code> 也接收一个函数和一个序列</p><p>把传入的函数依次作用于每个元素，然后根据返回值是 <code>True</code>还是 <code>False</code> 决定保留还是丢弃该元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">not_empty</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> s <span class="keyword">and</span> s.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(not_empty, [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;  &#x27;</span>])))</span><br><span class="line"><span class="comment"># [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]</span></span><br></pre></td></tr></table></figure><p>需要注意 <code>filter</code>使用了惰性计算，所以只有在取结果的时候，才会真正筛选并每次返回下一个筛出的元素</p><p><strong>sort</strong></p><p>如果是字符串或者两个 dict直接比较数学上的大小是没有意义的，因此比较的过程必须通过函数抽象出来</p><p>直接排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">sorted</span>([<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;zhaoliu&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># [&#x27;lisi&#x27;, &#x27;wangwu&#x27;, &#x27;zhangsan&#x27;, &#x27;zhaoliu&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>sorted</code> 函数也是一个高阶函数，它还可以接收一个<code>key</code> 函数来实现自定义的排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">sorted</span>([<span class="number">10</span>, -<span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">7</span>, <span class="number">3</span>], key=<span class="built_in">abs</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># [0, 1, 3, -5, -7, 10]</span></span><br></pre></td></tr></table></figure><p><code>reverse</code> 可以控制顺逆序，逆序为由大到小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">sorted</span>([<span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;wangwu&quot;</span>, <span class="string">&quot;zhaoliu&quot;</span>, <span class="string">&quot;a&quot;</span>], key=<span class="built_in">str</span>.__len__, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># [&#x27;zhangsan&#x27;, &#x27;zhaoliu&#x27;, &#x27;wangwu&#x27;, &#x27;lisi&#x27;, &#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="函数返回值">函数返回值</h2><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lazy_sum</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sum</span>():</span><br><span class="line">        ax = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> args:</span><br><span class="line">            ax = ax + n</span><br><span class="line">        <span class="keyword">return</span> ax</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lazy_sum = lazy_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(lazy_sum()) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p>调用函数 <code>lazy_sum</code> 时，才真正计算求和的结果</p><p>当调用<code>lazy_sum()</code>时，每次调用都会返回一个新的函数，即使传入相同的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lazy_sum1 = lazy_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">lazy_sum2 = lazy_sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(lazy_sum1 == lazy_sum2) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h2 id="闭包">闭包</h2><p>在上述例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中</p><p>这种程序结构就被称为闭包（Closure）</p><p>使用闭包时需要注意</p><ul><li>返回闭包函数不要引用任何循环变量，或者后续会发生变化的变量</li><li>使用闭包时，对外层变量赋值前，需要先使用 <code>nonlocal</code>声明该变量不是当前函数的局部变量</li><li>返回的函数并不是立刻执行，而是直到调用才执行</li></ul><p><strong>这是一个问题示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">            <span class="keyword">return</span> i * i</span><br><span class="line"></span><br><span class="line">        fs.append(f)</span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="built_in">print</span>([f1(), f2(), f3()])</span><br><span class="line"><span class="comment"># [9, 9, 9]</span></span><br></pre></td></tr></table></figure><p>实际上调用 <code>f1</code> 等函数会发现，结果都是<code>9</code>，原因是返回的函数引用了变量<code>i</code>，但它并非立刻执行，等到 3个函数都返回时，它们所引用的变量 <code>i</code> 已经变成了<code>3</code>，因此最终结果为 <code>9</code></p><p>如果一定要引用循环变量怎么办？方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">j</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">g</span>():</span><br><span class="line">            <span class="keyword">return</span> j * j</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">    fs = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        fs.append(f(i))  <span class="comment"># f(i)立刻被执行，因此i的当前值被传入f()</span></span><br><span class="line">    <span class="keyword">return</span> fs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1, f2, f3 = count()</span><br><span class="line"><span class="built_in">print</span>([f1(), f2(), f3()])</span><br><span class="line"><span class="comment"># [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p><strong>nonlocal</strong></p><p>使用闭包，就是内层函数引用了外层函数的局部变量，可以读取值，但是赋值时Python 解释器会认为对局部变量赋值，就会报错</p><p>可以加上 <code>nonlocal</code>声明，声明后解释器会把变量看作外层函数的局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = count()</span><br><span class="line">f() <span class="comment"># 1</span></span><br><span class="line">f() <span class="comment"># 2</span></span><br><span class="line">f() <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="匿名函数">匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</span><br></pre></td></tr></table></figure><p>如上，关键字 <code>lambda</code> 表示匿名函数，冒号前面的<code>x</code> 表示函数参数</p><p>匿名函数只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果</p><p>匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span>: <span class="built_in">print</span>(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p>同样，也可以把匿名函数作为返回值返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: x + y</span><br><span class="line"></span><br><span class="line">f = add(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h2 id="装饰器">装饰器</h2><h2 id="偏函数">偏函数</h2><p><code>functools.partial</code> 可以帮助创建一个偏函数</p><p>把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，使得调用这个新函数会更简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun2 = functools.partial(hello, name=<span class="string">&#x27;World&#x27;</span>)</span><br><span class="line">fun2() <span class="comment"># Hello World!</span></span><br><span class="line">fun2(name=<span class="string">&#x27;Tomorrow&#x27;</span>) <span class="comment"># Hello Tomorrow!</span></span><br></pre></td></tr></table></figure><p>创建偏函数时，实际上可以接收函数对象、<code>*args</code> 和<code>**kw</code> 3 个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max2 = functools.partial(<span class="built_in">max</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>实际上会把 <code>10</code> 作为 <code>*args</code>的一部分自动加到左边，也就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max2(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment"># &gt;&gt; 实际上等同于 args = (10, 5, 6, 7) max(*args) 的调用</span></span><br><span class="line"><span class="comment"># 结果为 10</span></span><br></pre></td></tr></table></figure><h1 id="面向对象">面向对象</h1><h2 id="访问限制">访问限制</h2><p>在 Python 中，实例的变量名如果以 <code>__</code>开头，就变成了一个私有变量（private）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, score</span>):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: %s&#x27;</span> % (self.__name, self.__score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(s.score) <span class="comment"># 100</span></span><br><span class="line"><span class="built_in">print</span>(s.__name) <span class="comment"># AttributeError: &#x27;Student&#x27; object has no attribute &#x27;__name&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>需要注意</strong></p><ul><li>在 Python 中，变量名类似 <code>__xxx__</code>，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量；特殊变量是可以直接访问的，不是私有变量</li><li>以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思为“虽然我可以被访问，但是请把我视为私有变量，不要随意访问”</li><li>在外部手动设置私有属性和对象真正的私有属性无关（因为已经被改名）</li><li>本质上私有的实现原理是解释器变更了属性名</li></ul><h2 id="继承和多态">继承和多态</h2><p>Python 的继承和多态和 Java 类似，这里只列举一些 API和明显区别的点</p><p>判断一个变量是否是某个类型可以用 <code>isinstance</code> 判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="number">123</span>, <span class="built_in">int</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;123&#x27;</span>, <span class="built_in">int</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(<span class="string">&#x27;123&#x27;</span>, <span class="built_in">str</span>)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>对于静态语言（例如 Java）来说，如果需要传入 <code>Animal</code>类型，则传入的对象必须是 <code>Animal</code> 类型或者它的子类</p><p>对于 Python 这样的动态语言来说，则不一定需要传入 <code>Animal</code>类型，只需要具有相同的方法即可</p><p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Human is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_twice</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 都可以调用成功</span></span><br><span class="line">run_twice(Dog())</span><br><span class="line">run_twice(Human())</span><br></pre></td></tr></table></figure><h2 id="对象信息">对象信息</h2><p>Python 中对象的属性可以不用定义在类结构中</p><p>那么当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢</p><ul><li><code>type</code> 获取对象类型</li><li><code>isinstance</code> 判断对象是否等于 or 继承于某类</li><li><code>dir</code> 返回一个包含字符串的list，包含一个对象的所有属性和方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(Animal()))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(Dog()))</span><br><span class="line"><span class="comment"># [&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__dict__&#x27;, &#x27;__dir__&#x27;, &#x27;__doc__&#x27;, &#x27;__eq__&#x27;, &#x27;__format__&#x27;, &#x27;__ge__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__gt__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__le__&#x27;, &#x27;__lt__&#x27;, &#x27;__module__&#x27;, &#x27;__ne__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__weakref__&#x27;, &#x27;run&#x27;]</span></span><br></pre></td></tr></table></figure><p>配合 <code>getattr</code>、<code>setattr</code> 以及<code>hasattr</code>，我们可以直接操作一个对象的属性；类似 Java的反射</p><ul><li><code>hasattr</code> 是否具有某属性</li><li><code>getattr</code> 获取某属性</li><li><code>setattr</code> 设置某属性</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">hasattr</span>(student, <span class="string">&#x27;age&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">getattr</span>(student, <span class="string">&#x27;age&#x27;</span>)) <span class="comment"># 20</span></span><br><span class="line">    <span class="built_in">setattr</span>(student, <span class="string">&#x27;age&#x27;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student.age) <span class="comment"># 25</span></span><br></pre></td></tr></table></figure><h2 id="实例属性和类属性">实例属性和类属性</h2><p>对应 Java 中的静态变量和成员变量</p><p>给实例绑定属性的方法是通过实例变量，或者通过 <code>self</code>变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;Bob&#x27;</span>)</span><br><span class="line">s.score = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>如果 <code>Student</code> 类本身需要绑定一个属性呢？可以直接在 class中定义属性，这种属性是类属性，归 <code>Student</code> 类所有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = <span class="string">&#x27;Student&#x27;</span></span><br></pre></td></tr></table></figure><p>对象可以覆盖同名类属性，也可以通过类名加属性名访问类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = <span class="string">&quot;Student&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zhangsan = Student()</span><br><span class="line">zhangsan.name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(zhangsan.name) <span class="comment"># zhangsan</span></span><br><span class="line">lisi = Student()</span><br><span class="line"><span class="built_in">print</span>(lisi.name) <span class="comment"># Student</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.name) <span class="comment"># Student</span></span><br></pre></td></tr></table></figure><h2 id="slots__">__slots__</h2><p>正常情况下，当定义了一个 class，创建了一个 class的实例后可以给该实例绑定任何属性和方法，这就是动态语言的灵活性</p><p>也可以给 class 绑定方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    name = <span class="string">&quot;Student&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_score</span>(<span class="params">self, score</span>):</span><br><span class="line">    self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student()</span><br><span class="line">Student.set_score = set_score</span><br><span class="line">student.set_score(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(student.score) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><p>如果想要限制实例的属性，Python 允许在定义 class的时候，定义一个特殊的 <code>__slots__</code> 变量，来限制该 class实例能添加的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 用tuple定义允许绑定的属性名称</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student()</span><br><span class="line">student.name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">student.score = <span class="number">50</span></span><br><span class="line"><span class="comment"># AttributeError: &#x27;Student&#x27; object has no attribute &#x27;score&#x27;</span></span><br></pre></td></tr></table></figure><p>使用 <code>__slots__</code> 要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的</p><p>在子类中定义 <code>__slots__</code>，子类实例允许定义的属性就是自身的<code>__slots__</code> 加上父类的 <code>__slots__</code></p><h2 id="property"><span class="citation"data-cites="property">@property</span></h2><p>Python 内置的 <code>@property</code>装饰器就是负责把一个方法变成属性调用（和 Java 的 Lombok 相反）</p><p>把一个 getter 方法变成属性，只需要加上 <code>@property</code>就可以了</p><p><code>@property</code> 本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个 setter 方法变成属性赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">    @score.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">score</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must be an integer!&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&#x27;score must between 0 ~ 100!&#x27;</span>)</span><br><span class="line">        self._score = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = Student()</span><br><span class="line">student.score = <span class="number">100</span></span><br><span class="line">student.score = -<span class="number">1</span></span><br><span class="line"><span class="comment"># ValueError: score must between 0 ~ 100!</span></span><br></pre></td></tr></table></figure><p>要特别注意：属性的方法名不要和实例变量重名</p><p>例如以下的错误代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法名称和实例变量均为birth:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">birth</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.birth</span><br></pre></td></tr></table></figure><p>这是因为调用 <code>s.birth</code> 时，首先转换为方法调用，在执行<code>return self.birth</code> 时，又视为访问 <code>self</code>的属性，于是又转换为方法调用，造成无限递归，最终导致栈溢出报错<code>RecursionError</code></p><h2 id="多重继承">多重继承</h2><p>Python支持多重继承，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code> 除了继承自 <code>Bird</code> 外，再同时继承<code>Runnable</code>，这种设计通常称之为 <strong>MixIn</strong></p><p>为了更好地看出继承关系，我们把 <code>Runnable</code> 和<code>Flyable</code> 改为 <code>RunnableMixIn</code> 和<code>FlyableMixIn</code></p><p>类似的，你还可以定义出肉食动物 <code>CarnivorousMixIn</code>和草食动物 <code>HerbivoresMixIn</code>，让某个动物同时拥有好几个MixIn</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(Mammal, RunnableMixIn, CarnivorousMixIn):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>MixIn的目的就是给一个类增加多个功能，这样在设计类的时候，优先考虑通过多重继承来组合多个MixIn 的功能，而不是设计多层次的复杂的继承关系</p><p>Python 自带的很多库也使用了 MixIn；例如 Python 自带了<code>TCPServer</code> 和 <code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code> 和 <code>ThreadingMixIn</code>提供，通过组合，我们就可以创造出合适的服务来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多进程模式的 TCP 服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTCPServer</span>(TCPServer, ForkingMixIn):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 多线程模式的 UDP 服务</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyUDPServer</span>(UDPServer, ThreadingMixIn):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类</p><h2 id="定制方法">定制方法</h2><p>看到类似 <code>__slots__</code> 这种形如 <code>__xxx__</code>的变量或者函数名就要注意，这些在 Python 中是有特殊用途的</p><p><strong>__str__</strong></p><p>调用 <code>print</code> 时，会调用对象的该方法进行打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">        self.age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;name:&#x27;</span> + self.name + <span class="string">&quot;, age:&quot;</span> + <span class="built_in">str</span>(self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = Student()</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># name:zhangsan, age:20</span></span><br></pre></td></tr></table></figure><p><strong>__iter__</strong></p><p>如果一个类想被用于 <code>for ... in</code> 循环，类似 list 或 tuple那样，就必须实现一个 <code>__iter__()</code> 方法</p><p>该方法返回一个迭代对象，然后 Python 的 for循环就会不断调用该迭代对象的 <code>__next__()</code>方法拿到循环的下一个值，直到遇到 <code>StopIteration</code>错误时退出循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeNumber</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.current = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self  <span class="comment"># 实例本身就是迭代对象，故返回自己</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.current + <span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 是质数</span></span><br><span class="line">            <span class="keyword">if</span> count &lt;= <span class="number">2</span>:</span><br><span class="line">                self.current = i</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(PrimeNumber().__iter__()))</span><br><span class="line"><span class="comment"># [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]</span></span><br></pre></td></tr></table></figure><p>上面的示例实现了一个 100 以内素数的迭代器</p><p><strong>__getitem__</strong></p><p>上面的 <code>PrimeNumber</code> 虽然可以迭代，但是还是不能当作 list使用</p><p>要表现得像 list 那样按照下标取出元素，需要实现<code>__getitem__</code> 方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeNumber</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, n</span>):</span><br><span class="line">        current_index = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 是质数</span></span><br><span class="line">            <span class="keyword">if</span> count &lt;= <span class="number">2</span>:</span><br><span class="line">                current_index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> current_index == n:</span><br><span class="line">                    <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">return</span> current_index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pn = PrimeNumber()</span><br><span class="line"><span class="built_in">print</span>(pn[<span class="number">1</span>]) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(pn[<span class="number">10</span>]) <span class="comment"># 29</span></span><br></pre></td></tr></table></figure><p>如果进一步希望其支持切片方法，需要判断入参是否是<code>slice</code>，再进行不同的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrimeNumber</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, n</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">int</span>):  <span class="comment"># n是索引</span></span><br><span class="line">            current_index = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 是质数</span></span><br><span class="line">                <span class="keyword">if</span> count &lt;= <span class="number">2</span>:</span><br><span class="line">                    current_index += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> current_index == n:</span><br><span class="line">                        <span class="keyword">return</span> i</span><br><span class="line">            <span class="keyword">return</span> current_index</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(n, <span class="built_in">slice</span>):  <span class="comment"># n是切片</span></span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                start = <span class="number">0</span></span><br><span class="line">            res = []</span><br><span class="line">            current_index = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i + <span class="number">1</span>):</span><br><span class="line">                    <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">                        count += <span class="number">1</span></span><br><span class="line">                <span class="comment"># 是质数</span></span><br><span class="line">                <span class="keyword">if</span> count &lt;= <span class="number">2</span>:</span><br><span class="line">                    current_index += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> start &lt;= current_index &lt; stop:</span><br><span class="line">                        res.append(i)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pn = PrimeNumber()</span><br><span class="line"><span class="built_in">print</span>(pn[<span class="number">1</span>:<span class="number">5</span>]) <span class="comment"># [2, 3, 5, 7]</span></span><br></pre></td></tr></table></figure><p>（只是举个例子，实现的很粗糙）</p><p>总之通过上面的方法，自己定义的类表现得和 Python 自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口</p><p><strong>__getattr__</strong></p><p>当调用不存在的属性时，比如 <code>score</code>，Python解释器会试图调用 <code>__getattr__(self, 'score')</code>来尝试获得属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student().score) <span class="comment"># 99</span></span><br></pre></td></tr></table></figure><p>也可以返回函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;Michael&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, attr</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">get_score</span>():</span><br><span class="line">            <span class="keyword">return</span> <span class="number">99</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> attr == <span class="string">&#x27;score&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> get_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = Student().score</span><br><span class="line"><span class="built_in">print</span>(f())</span><br></pre></td></tr></table></figure><p><strong>__call__</strong></p><p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code> 来调用</p><p>而任何类，只需要定义一个 <code>__call__</code>方法，就可以直接对实例进行调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;My name is %s.&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line">s() <span class="comment"># My name is Michael.</span></span><br></pre></td></tr></table></figure><p>完全可以把对象看成函数，把函数看成对象</p><p>那么怎么判断一个变量是对象还是函数呢，能被调用的对象就是一个<code>Callable</code> 对象，比如函数和上面定义的带有<code>__call__</code> 的类实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;My name is %s.&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(Student(<span class="string">&#x27;zhangsan&#x27;</span>))) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(Student(<span class="string">&#x27;zhangsan&#x27;</span>).name)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(Student(<span class="string">&#x27;zhangsan&#x27;</span>).__str__)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(Student(<span class="string">&#x27;zhangsan&#x27;</span>).__str__())) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="number">123</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="string">&#x27;123&#x27;</span>)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">callable</span>(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(x))) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="枚举类">枚举类</h2><p>Python 提供了 <code>Enum</code> 类来实现枚举类的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Month = Enum(<span class="string">&#x27;Month&#x27;</span>, (<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name, member <span class="keyword">in</span> Month.__members__.items():</span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&#x27;=&gt;&#x27;</span>, member, <span class="string">&#x27;,&#x27;</span>, member.value)</span><br></pre></td></tr></table></figure><p>可以直接使用 <code>Month.Jan</code> 来引用一个常量，或者使用<code>__members__</code> 列举所有成员</p><p><code>value</code> 属性则是自动赋给成员的 <code>int</code>常量，默认从 <code>1</code> 开始计数</p><p>如果需要更精确地控制枚举类型，可以从 <code>Enum</code>派生出自定义类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@unique</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weekday</span>(<span class="title class_ inherited__">Enum</span>):</span><br><span class="line">    Sun = <span class="number">0</span>  <span class="comment"># Sun的value被设定为0</span></span><br><span class="line">    Mon = <span class="number">1</span></span><br><span class="line">    Tue = <span class="number">2</span></span><br><span class="line">    Wed = <span class="number">3</span></span><br><span class="line">    Thu = <span class="number">4</span></span><br><span class="line">    Fri = <span class="number">5</span></span><br><span class="line">    Sat = <span class="number">6</span></span><br></pre></td></tr></table></figure><p><code>@unique</code> 装饰器可以帮助我们检查保证没有重复值</p><p>既可以用成员名称引用枚举常量，又可以直接根据 value的值获得枚举常量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(Weekday.Sat)</span><br><span class="line"><span class="built_in">print</span>(Weekday[<span class="string">&#x27;Sat&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(Weekday(<span class="number">6</span>))</span><br><span class="line"><span class="comment"># Weekday.Sat</span></span><br></pre></td></tr></table></figure><h2 id="元类">元类</h2><p>动态语言和静态语言最大的不同，就是函数和类的定义不是编译时定义的，而是<strong>运行时动态创建</strong>的</p><p><code>type</code> 函数可以查看一个类型或变量的类型，一个 class类型就是 <code>type</code></p><p>创建 class 的方法就是使用 <code>type</code> 函数</p><p><code>type</code>函数既可以返回一个对象的类型，又可以创建出新的类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义出函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self, name: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 type 创建出 Student class</span></span><br><span class="line">Student = <span class="built_in">type</span>(<span class="string">&#x27;Student&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(hello=hello))</span><br><span class="line"><span class="built_in">print</span>(Student) <span class="comment"># &lt;class &#x27;__main__.Student&#x27;&gt;</span></span><br><span class="line"><span class="comment"># 创建实例</span></span><br><span class="line">s = Student()</span><br><span class="line">s.hello(<span class="string">&#x27;zhangsan&#x27;</span>) <span class="comment"># Hello zhangsan!</span></span><br></pre></td></tr></table></figure><p><code>type</code> 的参数：</p><ul><li>class 的名称</li><li>继承的父类集合（注意 Python 支持多重继承，如果只有一个父类，别忘了tuple 的单元素写法）</li><li>class 的方法名称与函数绑定；示例中将 hello 方法名绑定上面定义的<code>hello</code> 函数</li></ul><p>动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂（Java中的 cglib、bytebuddy）</p><p><strong>tuple 单元素写法</strong></p><p>Python 中单元素的 tuple 应在元素后加上 <code>,</code>，若括号中没有<code>,</code>，则会被认为是其元素类型（忽略 <code>()</code> tuple表达）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(tuple1) <span class="comment"># a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple1)) <span class="comment"># &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">tuple2 = (<span class="string">&#x27;a&#x27;</span>,)</span><br><span class="line"><span class="built_in">print</span>(tuple2) <span class="comment"># (&#x27;a&#x27;,)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple2)) <span class="comment"># &lt;class &#x27;tuple&#x27;&gt;</span></span><br></pre></td></tr></table></figure><hr /><p><strong>metaclass</strong></p><p>除了使用 <code>type</code>动态创建类以外，要控制类的创建行为，还可以使用 metaclass</p><p>metaclass 直译为元类，简单的解释就是：先定义metaclass，就可以创建类，最后创建实例</p><p>metaclass 允许创建类或者修改类，换句话说可以把类看成是 metaclass创建出来的“实例”</p><p>举一个例子，给我们自定义的 <code>MyList</code> 增加一个<code>add</code> 方法</p><p>定义 <code>ListMetaclass</code>，按照默认习惯，metaclass 的类名总是以<code>Metaclass</code> 结尾，以便清楚地表示这是一个 metaclass</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># metaclass 是类的模板，所以必须从 `type` 类型派生</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">mcs, name, bases, attrs</span>):</span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(mcs, name, bases, attrs)</span><br></pre></td></tr></table></figure><p><code>__new__</code>方法接收到的参数依次是：</p><ol type="1"><li>当前准备创建的类的对象</li><li>类的名字</li><li>类继承的父类集合</li><li>类的方法集合</li></ol><p>有了 <code>ListMetaclass</code>，我们在定义类的时候还要指示使用<code>ListMetaclass</code> 来定制类，传入关键字参数<code>metaclass</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>(<span class="built_in">list</span>, metaclass=ListMetaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当我们传入关键字参数 <code>metaclass</code> 时，魔术就生效了，它指示Python 解释器在创建 <code>MyList</code> 时，要通过<code>ListMetaclass.__new__()</code> 来创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = MyList()</span><br><span class="line">my_list.add(<span class="number">1</span>)</span><br><span class="line">my_list.add(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list) <span class="comment"># [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通的 list 没有 add 方法</span></span><br><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="built_in">list</span>.add(<span class="number">1</span>) <span class="comment"># AttributeError: &#x27;list&#x27; object has no attribute &#x27;add&#x27;</span></span><br></pre></td></tr></table></figure><hr /><p>这里使用元类实现一个 ORM Model 作为练习</p><p>首先来定义 <code>Field</code>类，它负责保存数据库表的字段名和字段类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Field</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, column_type</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;%s:%s&gt;&#x27;</span> % (self.__class__.__name__, self.name)</span><br></pre></td></tr></table></figure><p>在 <code>Field</code> 的基础上，进一步定义各种类型的<code>Field</code>，比如<code>StringField</code>，<code>IntegerField</code> 等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringField</span>(<span class="title class_ inherited__">Field</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(StringField, self).__init__(name, <span class="string">&#x27;varchar(100)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerField</span>(<span class="title class_ inherited__">Field</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(IntegerField, self).__init__(name, <span class="string">&#x27;bigint&#x27;</span>)</span><br></pre></td></tr></table></figure><p>编写 <code>ModelMetaclass</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ModelMetaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">mcs, name, bases, attrs</span>):</span><br><span class="line">        <span class="comment"># 如果是 Model，则直接创建 class 返回</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;Model&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">type</span>.__new__(mcs, name, bases, attrs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 非 Module</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Found model: %s&#x27;</span> % name)</span><br><span class="line">        <span class="comment"># 解析类属性</span></span><br><span class="line">        mappings = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attrs.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, Field):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Found mapping: %s ==&gt; %s&#x27;</span> % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[<span class="string">&#x27;__mappings__&#x27;</span>] = mappings  <span class="comment"># 保存属性和列的映射关系</span></span><br><span class="line">        attrs[<span class="string">&#x27;__table__&#x27;</span>] = name  <span class="comment"># 假设表名和类名一致</span></span><br><span class="line">        <span class="comment"># 创建对应的 class</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>.__new__(mcs, name, bases, attrs)</span><br></pre></td></tr></table></figure><p>基类 <code>Model</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Model</span>(<span class="built_in">dict</span>, metaclass=ModelMetaclass):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, **kw</span>):</span><br><span class="line">        <span class="built_in">super</span>(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot;</span> % key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        <span class="comment"># 从 __mappings__ 获取解析出的属性</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            args.append(<span class="built_in">getattr</span>(self, k, <span class="literal">None</span>))</span><br><span class="line">        sql = <span class="string">&#x27;insert into %s (%s) values (%s)&#x27;</span> % (self.__table__, <span class="string">&#x27;,&#x27;</span>.join(fields), <span class="string">&#x27;,&#x27;</span>.join(params))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;SQL: %s&#x27;</span> % sql)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;ARGS: %s&#x27;</span> % <span class="built_in">str</span>(args))</span><br></pre></td></tr></table></figure><p>在 <code>ModelMetaclass</code> 中，一共做了几件事情</p><ul><li>排除掉对 <code>Model</code> 类的修改</li><li>在当前类（比如<code>User</code>）中查找定义的类的所有属性，如果找到一个<code>Field</code> 属性，就把它保存到一个 <code>__mappings__</code> 的dict 中，同时从类属性中删除该 <code>Field</code>属性，否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）</li><li>把表名保存到 <code>__table__</code>中，这里简化为表名默认为类名</li></ul><p>定义实体类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Model</span>):</span><br><span class="line">    <span class="built_in">id</span> = IntegerField(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    name = StringField(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    email = IntegerField(<span class="string">&#x27;email&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = Student(<span class="built_in">id</span>=<span class="number">12345</span>, name=<span class="string">&#x27;zhangsan&#x27;</span>, email=<span class="string">&#x27;zhangsan@xxx.com&#x27;</span>)</span><br><span class="line">s.save()</span><br><span class="line"><span class="comment"># SQL: insert into Student (id,name,email) values (?,?,?)</span></span><br><span class="line"><span class="comment"># ARGS: [12345, &#x27;zhangsan&#x27;, &#x27;zhangsan@xxx.com&#x27;]</span></span><br></pre></td></tr></table></figure><p>这里在看的时候有一个问题，定义的 <code>Student</code> 属性必须和<code>Student(id=12345, name='zhangsan', email='zhangsan@xxx.com')</code>参数一致</p><p>不然就会出现如下结果 <code>ARGS: [None, None, None]</code></p><p>这是为什么呢，其次如果一致的话不应该实例属性影响类属性吗</p><ul><li>Q：为什么名称必须一致<ul><li>因为后续是通过 <code>getattr(self, k, None)</code> 操作来找到对应value 的，如果不一致 <code>self</code> 将找不到该属性对应的 value</li></ul></li><li>Q：名称如果一致的话不应该实例属性影响类属性吗<ul><li>不影响，因为 <code>Model</code> 重写了 <code>__getattr__</code>方法，实现为 <code>self[key]</code></li><li>而 <code>Model</code> 继承了 <code>dict</code>，实际上讲数据以 KV形式保存在自己 <code>dict</code> 中</li><li><code>ModelMetaclass</code> 定义中，在保存了属性后使用<code>attrs.pop(k)</code> 将实例同名属性删除了</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例化后，s 对象其实已经没有了 id\name\email 属性</span></span><br><span class="line">s = Student(<span class="built_in">id</span>=<span class="number">12345</span>, name=<span class="string">&#x27;zhangsan&#x27;</span>, email=<span class="string">&#x27;zhangsan@xxx.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.__dir__())</span><br><span class="line"><span class="comment"># [&#x27;__module__&#x27;, &#x27;__mappings__&#x27;, &#x27;__table__&#x27;, &#x27;__doc__&#x27;, &#x27;__init__&#x27;, &#x27;__getattr__&#x27;, &#x27;__setattr__&#x27;, &#x27;save&#x27;, &#x27;__dict__&#x27;, &#x27;__weakref__&#x27;, &#x27;__repr__&#x27;, &#x27;__hash__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__lt__&#x27;, &#x27;__le__&#x27;, &#x27;__eq__&#x27;, &#x27;__ne__&#x27;, &#x27;__gt__&#x27;, &#x27;__ge__&#x27;, &#x27;__iter__&#x27;, &#x27;__or__&#x27;, &#x27;__ror__&#x27;, &#x27;__ior__&#x27;, &#x27;__len__&#x27;, &#x27;__getitem__&#x27;, &#x27;__setitem__&#x27;, &#x27;__delitem__&#x27;, &#x27;__contains__&#x27;, &#x27;__new__&#x27;, &#x27;__sizeof__&#x27;, &#x27;get&#x27;, &#x27;setdefault&#x27;, &#x27;pop&#x27;, &#x27;popitem&#x27;, &#x27;keys&#x27;, &#x27;items&#x27;, &#x27;values&#x27;, &#x27;update&#x27;, &#x27;fromkeys&#x27;, &#x27;clear&#x27;, &#x27;copy&#x27;, &#x27;__reversed__&#x27;, &#x27;__class_getitem__&#x27;, &#x27;__str__&#x27;, &#x27;__delattr__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__reduce__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;__init_subclass__&#x27;, &#x27;__format__&#x27;, &#x27;__dir__&#x27;, &#x27;__class__&#x27;]</span></span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><p><ahref="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程 -廖雪峰的官方网站 (liaoxuefeng.com)</a></p>]]></content:encoded>
      
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/">开发</category>
      
      <category domain="https://www.kugaaa.com/categories/%E5%BC%80%E5%8F%91/Python/">Python</category>
      
      
      <category domain="https://www.kugaaa.com/tags/Python/">Python</category>
      
      
      <comments>https://www.kugaaa.com/%E5%BC%80%E5%8F%91/Python/Python%20%E8%BF%9B%E9%98%B6%E8%AF%AD%E6%B3%95.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
